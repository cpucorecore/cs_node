package com.ancun.chain_storage.node.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ChainStorage extends Contract {
  public static final String[] BINARY_ARRAY = {
    "",
    "565b005b348015610f0e57600080fd5b50610f8660048036036020811015610f2557600080fd5b8101908080359060200190640100000000811115610f4257600080fd5b820183602082011115610f5457600080fd5b80359060200191846001830284011164010000000083111715610f7657600080fd5b9091929391929390505050613938565b005b348015610f9457600080fd5b50610fe360048036036040811015610fab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050613a32565b005b348015610ff157600080fd5b506110c86004803603606081101561100857600080fd5b810190808035906020019064010000000081111561102557600080fd5b82018360208201111561103757600080fd5b8035906020019184600183028401116401000000008311171561105957600080fd5b9091929391929390803590602001909291908035906020019064010000000081111561108457600080fd5b82018360208201111561109657600080fd5b803590602001918460018302840111640100000000831117156110b857600080fd5b9091929391929390505050613b38565b005b3480156110d657600080fd5b5061114e600480360360208110156110ed57600080fd5b810190808035906020019064010000000081111561110a57600080fd5b82018360208201111561111c57600080fd5b8035906020019184600183028401116401000000008311171561113e57600080fd5b909192939192939050505061414b565b005b34801561115c57600080fd5b50611165614245565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060048054806020026020016040519081016040528092919081815260200182805480156111db57602002820191906000526020600020905b8154815260200190600101908083116111c7575b5050505050905090565b6111ed6113d9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611292576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61135a6113d9565b801515600260159054906101000a900460ff161515141561137a576113d6565b801515600260159054906101000a900460ff1615157fac1664632d6278432aa05a6afc0aa83e5ea08e8df9a1436736daa5d6283211c060405160405180910390a380600260156101000a81548160ff0219169083151502179055505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561149e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6114e5614309565b6114ed61431b565b73ffffffffffffffffffffffffffffffffffffffff16630a39bde53384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b1580156115bb57600080fd5b505af11580156115cf573d6000803e3d6000fd5b505050505050565b6115df614309565b6115e761434b565b73ffffffffffffffffffffffffffffffffffffffff16634fdbb0026040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561164857600080fd5b505afa15801561165c573d6000803e3d6000fd5b505050506040513d602081101561167257600080fd5b810190808051906020019092919050505082829050111515156116fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a66696c652065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b61170561437b565b73ffffffffffffffffffffffffffffffffffffffff16638e04d4f933868686866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018381038352878782818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b15801561180757600080fd5b505af115801561181b573d6000803e3d6000fd5b5050505050505050565b61182d614309565b61183561437b565b73ffffffffffffffffffffffffffffffffffffffff1663a95d5fb233868686866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001831515151581526020018281038252858582818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561194357600080fd5b505af1158015611957573d6000803e3d6000fd5b5050505050505050565b611969614309565b61197161434b565b73ffffffffffffffffffffffffffffffffffffffff16630c360f0a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156119d257600080fd5b505afa1580156119e6573d6000803e3d6000fd5b505050506040513d60208110156119fc57600080fd5b81019080805190602001909291905050508282905011151515611a87576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a757365722065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b611a8f61437b565b73ffffffffffffffffffffffffffffffffffffffff166394fc2a4e3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015611b5d57600080fd5b505af1158015611b71573d6000803e3d6000fd5b505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c75576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f77726f6e672063616c6c6572000000000000000000000000000000000000000081525060200191505060405180910390fd5b50565b600260159054906101000a900460ff1681565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d215780601f10611cf657610100808354040283529160200191611d21565b820191906000526020600020905b815481529060010190602001808311611d0457829003601f168201915b505050505081565b611d31614309565b611d3961434b565b73ffffffffffffffffffffffffffffffffffffffff16630c360f0a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611d9a57600080fd5b505afa158015611dae573d6000803e3d6000fd5b505050506040513d6020811015611dc457600080fd5b81019080805190602001909291905050508282905011151515611e4f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a757365722065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b611e5761437b565b73ffffffffffffffffffffffffffffffffffffffff166332434a2e3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050",
    "",
    "8160011615610100020316600290048015612f5a5780601f10612f2f57610100808354040283529160200191612f5a565b820191906000526020600020905b815481529060010190602001808311612f3d57829003601f168201915b505050505061469f9092919063ffffffff16565b901515613016576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fdb578082015181840152602081019050612fc0565b50505050905090810190601f1680156130085780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b60148151101515613093576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f63616e6e6f742068617665206d6f7265207468616e203230206974656d73000081525060200191505060405180910390fd5b600080905060008090505b825181101561313b576005600084838151811015156130b957fe5b90602001906020020151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561312e576001915061313b565b808060010191505061309e565b508015156131b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f63616c6c6572206973206e6f7420696e20636f6e7461696e730000000000000081525060200191505060405180910390fd5b5050565b6131bd6113d9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61332a614309565b61333261434b565b73ffffffffffffffffffffffffffffffffffffffff1663b1ad09f76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561339357600080fd5b505afa1580156133a7573d6000803e3d6000fd5b505050506040513d60208110156133bd57600080fd5b81019080805190602001909291905050508282905011151515613448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f43533a63696420746f6f206c6f6e67000000000000000000000000000000000081525060200191505060405180910390fd5b61345061437b565b73ffffffffffffffffffffffffffffffffffffffff1663101f51063384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b15801561351e57600080fd5b505af1158015613532573d6000803e3d6000fd5b505050505050565b6135426113d9565b60008090505b60048054905081101561369c57600060048281548110151561356657fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561360257600080fd5b505afa158015613616573d6000803e3d6000fd5b505050506040513d602081101561362c57600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050613548565b50565b6136a7614309565b6136af61434b565b73ffffffffffffffffffffffffffffffffffffffff166371e346626040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561371057600080fd5b505afa158015613724573d6000803e3d6000fd5b505050506040513d602081101561373a57600080fd5b810190808051906020019092919050505082829050111515156137c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a6e6f64652065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b60008311151561383d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f43533a6e6f64652073746f72616765546f74616c206d7573743e30000000000081525060200191505060405180910390fd5b61384561431b565b73ffffffffffffffffffffffffffffffffffffffff1663f11b1b88338585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b15801561391b57600080fd5b505af115801561392f573d6000803e3d6000fd5b50505050505050565b613940614309565b61394861431b565b73ffffffffffffffffffffffffffffffffffffffff1663cd4de7a43384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015613a1657600080fd5b505af1158015613a2a573d6000803e3d6000fd5b505050505050565b613a3a614309565b613a4261437b565b73ffffffffffffffffffffffffffffffffffffffff16630e60b9d43384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019350505050600060405180830381600087803b158015613b1c57600080fd5b505af1158015613b30573d6000803e3d6000fd5b505050505050565b613b40614309565b613b4861434b565b73ffffffffffffffffffffffffffffffffffffffff16634fdbb0026040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015613ba957600080fd5b505afa158015613bbd573d6000803e3d6000fd5b505050506040513d6020811015613bd357600080fd5b81019080805190602001909291905050508282905011151515613c5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a66696c652065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b613c6661434b565b73ffffffffffffffffffffffffffffffffffffffff1663b1ad09f76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015613cc757600080fd5b505afa158015613cdb573d6000803e3d6000fd5b505050506040513d6020811015613cf157600080fd5b81019080805190602001909291905050508585905011151515613d7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f43533a63696420746f6f206c6f6e67000000000000000000000000000000000081525060200191505060405180910390fd5b613d846143ab565b73ffffffffffffffffffffffffffffffffffffffff166338b25c8086866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060206040518083038186803b158015613e1c57600080fd5b505afa158015613e30573d6000803e3d6000fd5b505050506040513d6020811015613e4657600080fd5b81019080805190602001909291905050501515613ecb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f43533a63696420696e20626c61636b6c6973740000000000000000000000000081525060200191505060405180910390fd5b613ed36143ab565b73ffffffffffffffffffffffffffffffffffffffff16631e9d48cf336040518263ffffffff167c01000000",
    "00000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613f6b57600080fd5b505afa158015613f7f573d6000803e3d6000fd5b505050506040513d6020811015613f9557600080fd5b8101908080519060200190929190505050151561401a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a7573657220696e20626c61636b6c69737400000000000000000000000081525060200191505060405180910390fd5b61402261437b565b73ffffffffffffffffffffffffffffffffffffffff1663b6bbd1503387878787876040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001858152602001806020018381038352888882818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b15801561412c57600080fd5b505af1158015614140573d6000803e3d6000fd5b505050505050505050565b614153614309565b61415b61431b565b73ffffffffffffffffffffffffffffffffffffffff16632fc28b2f3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b15801561422957600080fd5b505af115801561423d573d6000803e3d6000fd5b505050505050565b61424d614309565b61425561431b565b73ffffffffffffffffffffffffffffffffffffffff16635b114af6336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156142ef57600080fd5b505af1158015614303573d6000803e3d6000fd5b50505050565b614311612c9c565b6143196125c9565b565b60006143467f4e6f64654d616e61676572000000000000000000000000000000000000000000614774565b905090565b60006143767f53657474696e6700000000000000000000000000000000000000000000000000614774565b905090565b60006143a67f557365724d616e61676572000000000000000000000000000000000000000000614774565b905090565b60006143d67f426c61636b6c6973740000000000000000000000000000000000000000000000614774565b905090565b606082826040516020018083805190602001908083835b60208310151561441757805182526020820191506020810190506020830392506143f2565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310151561446a5780518252602082019150602081019050602083039250614445565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60001515600260149054906101000a900460ff161515146145a06040805190810160405280601581526020017f3a20616c726561647920696e697469616c697a6564000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561458d5780601f106145625761010080835404028352916020019161458d565b820191906000526020600020905b81548152906001019060200180831161457057829003601f168201915b50505050506143db90919063ffffffff16565b901515614648576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561460d5780820151818401526020810190506145f2565b50505050905090810190601f16801561463a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600260146101000a81548160ff021916908315150217905550565b80604051602001808281526020019150506040516020818303038152906040526000908051906020019061469b9291906149ee565b5050565b60608383836040516020018084805190602001908083835b6020831015156146dc57805182526020820191506020810190506020830392506146b7565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b60208310151561472f578051825260208201915060208101905060208303925061470a565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156148bd6040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156148a95780601f1061487e576101008083540402835291602001916148a9565b820191906000526020600020905b81548152906001019060200180831161488c57829003601f168201915b505050505061469f9092919063ffffffff16565b901515614965576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561492a57808201518184015260208101905061490f565b50505050905090810190601f1680156149575780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8280548282559060005260206000209081019282156149dd579160200282015b828111156149dc5782518255916020019190600101906149c1565b5b5090506149ea9190614a6e565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614a2f57805160ff1916838001178555614a5d565b82800160010185558215614a5d579182015b82811115614a5c578251825591602001919060010190614a41565b5b509050614a6a9190614a93565b5090565b614a9091905b80821115614a8c576000816000905550600101614a74565b5090565b90565b614ab591905b80821115614ab1576000816000905550600101614a99565b5090565b9056fea165627a7a723058207ae43cfe1d622d9dd5246fcc0669c41d61e4655c260a0fcd77cadd23aaa7fa610029"
  };

  public static final String BINARY =
      org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

  public static final String[] SM_BINARY_ARRAY = {
    "",
    "52601f19601f8201169050808301925050505050505091929192905050506139d0565b005b348015610f2f57600080fd5b50610fa760048036036020811015610f4657600080fd5b8101908080359060200190640100000000811115610f6357600080fd5b820183602082011115610f7557600080fd5b80359060200191846001830284011164010000000083111715610f9757600080fd5b9091929391929390505050613b6b565b005b348015610fb557600080fd5b50610fbe613c65565b604051808215151515815260200191505060405180910390f35b348015610fe457600080fd5b50610fed613c78565b005b348015610ffb57600080fd5b506110736004803603602081101561101257600080fd5b810190808035906020019064010000000081111561102f57600080fd5b82018360208201111561104157600080fd5b8035906020019184600183028401116401000000008311171561106357600080fd5b9091929391929390505050613d3c565b005b34801561108157600080fd5b5061108a613f54565b005b34801561109857600080fd5b50611165600480360360408110156110af57600080fd5b81019080803590602001906401000000008111156110cc57600080fd5b8201836020820111156110de57600080fd5b8035906020019184600183028401116401000000008311171561110057600080fd5b90919293919293908035906020019064010000000081111561112157600080fd5b82018360208201111561113357600080fd5b8035906020019184600183028401116401000000008311171561115557600080fd5b90919293919293905050506140b9565b005b61116f61334c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611214576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611302614307565b61130a614319565b73ffffffffffffffffffffffffffffffffffffffff16636cac89326040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561136b57600080fd5b505afa15801561137f573d6000803e3d6000fd5b505050506040513d602081101561139557600080fd5b81019080805190602001909291905050508282905011151515611420576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f43533a63696420746f6f206c6f6e67000000000000000000000000000000000081525060200191505060405180910390fd5b611428614349565b73ffffffffffffffffffffffffffffffffffffffff16637d0722523384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b1580156114f657600080fd5b505af115801561150a573d6000803e3d6000fd5b505050505050565b61151a61334c565b611522614379565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061158c7f436861696e53746f726167650000000000000000000000000000000000000000614538565b60a0604051908101604052807f53657474696e670000000000000000000000000000000000000000000000000081526020017f557365724d616e6167657200000000000000000000000000000000000000000081526020017f4e6f64654d616e6167657200000000000000000000000000000000000000000081526020017f426c61636b6c697374000000000000000000000000000000000000000000000081526020017f41646d696e000000000000000000000000000000000000000000000000000000815250600490600561166492919061499f565b5050565b611670614307565b611678614349565b73ffffffffffffffffffffffffffffffffffffffff166380a0f2c23384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019350505050600060405180830381600087803b15801561175257600080fd5b505af1158015611766573d6000803e3d6000fd5b505050505050565b606060048054806020026020016040519081016040528092919081815260200182805480156117bc57602002820191906000526020600020905b8154815260200190600101908083116117a8575b5050505050905090565b6117ce61334c565b801515600260159054906101000a900460ff16151514156117ee5761184a565b801515600260159054906101000a900460ff1615157fcb8b5b2f60f2e69f0695d2a329226bd381ce84933547d7f94a137d8ed8a2accc60405160405180910390a380600260156101000a81548160ff0219169083151502179055505b50565b600260159054906101000a900460ff16156119406040805190810160405280600881526020017f3a2070617573656400000000000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561192d5780601f106119025761010080835404028352916020019161192d565b820191906000526020600020905b81548152906001019060200180831161191057829003601f168201915b505050505061457190919063ffffffff16565b9015156119e8576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156119ad578082015181840152602081019050611992565b50505050905090810190601f1680156119da5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50565b6119f3614307565b6119fb61463d565b73ffffffffffffffffffffffffffffffffffffffff1663ea36ac4a3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015611ac957600080fd5b505af1158015611add573d6000803e3d6000fd5b505050505050565b611aed614307565b611af5614349565b73ffffffffffffffffffffffffffffffffffffffff16635a6a102a33868686866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001831515151581526020018281038252858582818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015611c0357600080fd5b505af1158015611c17573d6000803e3d6000fd5b5050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611c4f614307565b611c57614349565b73ffffffffffffffffffffffffffffffffffffffff16636bddd7ba338585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018381526020018281038252858582818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b158015611d2d57600080fd5b505af1158015611d41573d6000803e3d6000fd5b50505050505050565b611d5261334c565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611de157600080fd5b505afa158015611df5573d6000803e3d6000fd5b505050506040513d6020811015611e0b57600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b611ea4614307565b611eac61463d565b73ffffffffffffffffffffffffffffffffffffffff166368aa0d873384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffff",
    "ffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015611f7a57600080fd5b505af1158015611f8e573d6000803e3d6000fd5b505050505050565b611f9e614307565b611fa6614319565b73ffffffffffffffffffffffffffffffffffffffff1662c6a4056040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561200657600080fd5b505afa15801561201a573d6000803e3d6000fd5b505050506040513d602081101561203057600080fd5b810190808051906020019092919050505082829050111515156120bb576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a6e6f64652065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b600083111515612133576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f43533a6e6f64652073746f72616765546f74616c206d7573743e30000000000081525060200191505060405180910390fd5b61213b61463d565b73ffffffffffffffffffffffffffffffffffffffff16633df7ffeb338585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b15801561221157600080fd5b505af1158015612225573d6000803e3d6000fd5b50505050505050565b612236614307565b61223e614319565b73ffffffffffffffffffffffffffffffffffffffff1663d2e8cfe86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561229f57600080fd5b505afa1580156122b3573d6000803e3d6000fd5b505050506040513d60208110156122c957600080fd5b81019080805190602001909291905050508282905011151515612354576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a757365722065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b61235c614349565b73ffffffffffffffffffffffffffffffffffffffff1663856101ec3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b15801561242a57600080fd5b505af115801561243e573d6000803e3d6000fd5b505050505050565b61244e614307565b612456614319565b73ffffffffffffffffffffffffffffffffffffffff1662c6a4056040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156124b657600080fd5b505afa1580156124ca573d6000803e3d6000fd5b505050506040513d60208110156124e057600080fd5b8101908080519060200190929190505050828290501115151561256b576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a6e6f64652065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b61257361463d565b73ffffffffffffffffffffffffffffffffffffffff1663977b65903384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b15801561264157600080fd5b505af1158015612655573d6000803e3d6000fd5b505050505050565b612665614307565b61266d61463d565b73ffffffffffffffffffffffffffffffffffffffff16633f90dee33384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b15801561273b57600080fd5b505af115801561274f573d6000803e3d6000fd5b505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461288c6040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128785780601f1061284d57610100808354040283529160200191612878565b820191906000526020600020905b81548152906001019060200180831161285b57829003601f168201915b505050505061466d9092919063ffffffff16565b901515612934576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156128f95780820151818401526020810190506128de565b50505050905090810190601f1680156129265780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b61294061334c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156129e5576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612aad614307565b612ab5614319565b73ffffffffffffffffffffffffffffffffffffffff166329bbf6386040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612b1657600080fd5b505afa158015612b2a573d6000803e3d6000fd5b505050506040513d6020811015612b4057600080fd5b81019080805190602001909291905050508282905011151515612bcb576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a66696c652065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b612bd3614319565b73ffffffffffffffffffffffffffffffffffffffff16636cac89326040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612c3457600080fd5b505afa158015612c48573d6000803e3d6000fd5b505050506040513d6020811015612c5e57600080fd5b81019080805190602001909291905050508585905011151515612ce9576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f43533a63696420746f6f206c6f6e67000000000000000000000000000000000081525060200191505060405180910390fd5b612cf1614742565b73ffffffffffffffffffffffffffffffffffffffff1663caedf05e86866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060206040518083038186803b158015612d8957600080fd5b505afa158015612d9d573d6000803e3d6000fd5b505050506040513d6020811015612db357600080fd5b81019080805190602001909291905050501515612e38576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f43533a63696420696e20626c61636b6c6973740000000000000000000000000081525060200191505060405180910390fd5b612e40614742565b73ffffffffffffffffffffffffffffffffffffffff1663ad903a9c336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612ed857600080fd5b505afa158015612eec573d6000803e3d6000fd5b505050506040513d6020811015612f025760",
    "0080fd5b81019080805190602001909291905050501515612f87576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a7573657220696e20626c61636b6c69737400000000000000000000000081525060200191505060405180910390fd5b612f8f614349565b73ffffffffffffffffffffffffffffffffffffffff166391eb51803387878787876040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001858152602001806020018381038352888882818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b15801561309957600080fd5b505af11580156130ad573d6000803e3d6000fd5b505050505050505050565b6130c0614307565b6130e97f41646d696e0000000000000000000000000000000000000000000000000000006131af565b6130f1614349565b73ffffffffffffffffffffffffffffffffffffffff16634b17e3bb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561319357600080fd5b505af11580156131a7573d6000803e3d6000fd5b505050505050565b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613285576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f77726f6e672063616c6c6572000000000000000000000000000000000000000081525060200191505060405180910390fd5b50565b613290614307565b61329861463d565b73ffffffffffffffffffffffffffffffffffffffff1663bf46bf65336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561333257600080fd5b505af1158015613346573d6000803e3d6000fd5b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613411576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b61341b614307565b613423614742565b73ffffffffffffffffffffffffffffffffffffffff1663b3e2ee7b336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156134bb57600080fd5b505afa1580156134cf573d6000803e3d6000fd5b505050506040513d60208110156134e557600080fd5b8101908080519060200190929190505050151561356a576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a6e6f646520696e20626c61636b6c69737400000000000000000000000081525060200191505060405180910390fd5b61357261463d565b73ffffffffffffffffffffffffffffffffffffffff1663ae6cb4c1338585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018381526020018281038252858582818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b15801561364857600080fd5b505af115801561365c573d6000803e3d6000fd5b50505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561375e5780601f106137335761010080835404028352916020019161375e565b820191906000526020600020905b81548152906001019060200180831161374157829003601f168201915b505050505081565b600260149054906101000a900460ff166138586040805190810160405280601881526020017f3a20636f6e747261637420756e696e697469616c697a6564000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156138455780601f1061381a57610100808354040283529160200191613845565b820191906000526020600020905b81548152906001019060200180831161382857829003601f168201915b505050505061457190919063ffffffff16565b901515613900576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156138c55780820151818401526020810190506138aa565b50505050905090810190601f1680156138f25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50565b61390b614307565b61391361463d565b73ffffffffffffffffffffffffffffffffffffffff16634b17e3bb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156139b557600080fd5b505af11580156139c9573d6000803e3d6000fd5b5050505050565b60148151101515613a49576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f63616e6e6f742068617665206d6f7265207468616e203230206974656d73000081525060200191505060405180910390fd5b600080905060008090505b8251811015613af157600560008483815181101515613a6f57fe5b90602001906020020151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415613ae45760019150613af1565b8080600101915050613a54565b50801515613b67576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f63616c6c6572206973206e6f7420696e20636f6e7461696e730000000000000081525060200191505060405180910390fd5b5050565b613b73614307565b613b7b61463d565b73ffffffffffffffffffffffffffffffffffffffff166364ae87613384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015613c4957600080fd5b505af1158015613c5d573d6000803e3d6000fd5b505050505050565b600260159054906101000a900460ff1681565b613c80614307565b613c88614349565b73ffffffffffffffffffffffffffffffffffffffff1663bf46bf65336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015613d2257600080fd5b505af1158015613d36573d6000803e3d6000fd5b50505050565b613d44614307565b613d4c614319565b73ffffffffffffffffffffffffffffffffffffffff1663d2e8cfe86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015613dad57600080fd5b505afa158015613dc1573d6000803e3d6000fd5b505050506040513d6020811015613dd757600080fd5b81019080805190602001909291905050508282905011151515613e62576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a757365722065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b613e6a614349565b73ffffffffffffffffffffffffffffffffffffffff1663977b65903384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080",
    "828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015613f3857600080fd5b505af1158015613f4c573d6000803e3d6000fd5b505050505050565b613f5c61334c565b60008090505b6004805490508110156140b6576000600482815481101515613f8057fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561401c57600080fd5b505afa158015614030573d6000803e3d6000fd5b505050506040513d602081101561404657600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050613f62565b50565b6140c1614307565b6140c9614319565b73ffffffffffffffffffffffffffffffffffffffff166329bbf6386040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561412a57600080fd5b505afa15801561413e573d6000803e3d6000fd5b505050506040513d602081101561415457600080fd5b810190808051906020019092919050505082829050111515156141df576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a66696c652065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b6141e7614349565b73ffffffffffffffffffffffffffffffffffffffff16633a52a79633868686866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018381038352878782818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b1580156142e957600080fd5b505af11580156142fd573d6000803e3d6000fd5b5050505050505050565b61430f613766565b61431761184d565b565b60006143447f53657474696e6700000000000000000000000000000000000000000000000000614772565b905090565b60006143747f557365724d616e61676572000000000000000000000000000000000000000000614772565b905090565b60001515600260149054906101000a900460ff161515146144726040805190810160405280601581526020017f3a20616c726561647920696e697469616c697a6564000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561445f5780601f106144345761010080835404028352916020019161445f565b820191906000526020600020905b81548152906001019060200180831161444257829003601f168201915b505050505061457190919063ffffffff16565b90151561451a576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156144df5780820151818401526020810190506144c4565b50505050905090810190601f16801561450c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600260146101000a81548160ff021916908315150217905550565b80604051602001808281526020019150506040516020818303038152906040526000908051906020019061456d9291906149ec565b5050565b606082826040516020018083805190602001908083835b6020831015156145ad5780518252602082019150602081019050602083039250614588565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310151561460057805182526020820191506020810190506020830392506145db565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60006146687f4e6f64654d616e61676572000000000000000000000000000000000000000000614772565b905090565b60608383836040516020018084805190602001908083835b6020831015156146aa5780518252602082019150602081019050602083039250614685565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b6020831015156146fd57805182526020820191506020810190506020830392506146d8565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b600061476d7f426c61636b6c6973740000000000000000000000000000000000000000000000614772565b905090565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156148bb6040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156148a75780601f1061487c576101008083540402835291602001916148a7565b820191906000526020600020905b81548152906001019060200180831161488a57829003601f168201915b505050505061466d9092919063ffffffff16565b901515614963576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561492857808201518184015260208101905061490d565b50505050905090810190601f1680156149555780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8280548282559060005260206000209081019282156149db579160200282015b828111156149da5782518255916020019190600101906149bf565b5b5090506149e89190614a6c565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614a2d57805160ff1916838001178555614a5b565b82800160010185558215614a5b579182015b82811115614a5a578251825591602001919060010190614a3f565b5b509050614a689190614a91565b5090565b614a8e91905b80821115614a8a576000816000905550600101614a72565b5090565b90565b614ab391905b80821115614aaf576000816000905550600101614a97565b5090565b9056fea165627a7a72305820ae610d99c57d57ef779cb221f638dd73eca7708d4ef6cf203ab8090edb98c1fa0029"
  };

  public static final String SM_BINARY =
      org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

  public static final String[] ABI_ARRAY = {
    "[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeCancelCanAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"userSetFileExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"userApproveFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"userSetExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"mustAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"userRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"storageTotal\",\"type\":\"uint256\"}],\"name\":\"userSetStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeDeleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"nodeCanAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"storageTotal\",\"type\":\"uint256\"}],\"name\":\"nodeSetStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustNotPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"nodeSetExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"userSetFileDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userDeRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustInitialized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"names\",\"type\":\"bytes32[]\"}],\"name\":\"mustContainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"userDeleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"storageTotal\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"nodeRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeCanDeleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"userApproveAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"userAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nodeDeRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"
  };

  public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

  public static final String FUNC_RESOLVER = "resolver";

  public static final String FUNC_GETIMPORTS = "getImports";

  public static final String FUNC_SETOWNER = "setOwner";

  public static final String FUNC_SETPAUSED = "setPaused";

  public static final String FUNC_MUSTOWNER = "mustOwner";

  public static final String FUNC_GETADDRESS = "getAddress";

  public static final String FUNC_NODECANCELCANADDFILE = "nodeCancelCanAddFile";

  public static final String FUNC_USERSETFILEEXT = "userSetFileExt";

  public static final String FUNC_USERAPPROVEFILE = "userApproveFile";

  public static final String FUNC_USERSETEXT = "userSetExt";

  public static final String FUNC_MANAGER = "manager";

  public static final String FUNC_MUSTADDRESS = "mustAddress";

  public static final String FUNC_PAUSED = "paused";

  public static final String FUNC_CONTRACTNAME = "contractName";

  public static final String FUNC_USERREGISTER = "userRegister";

  public static final String FUNC_ADDADDRESS = "addAddress";

  public static final String FUNC_OWNER = "owner";

  public static final String FUNC_USERSETSTORAGETOTAL = "userSetStorageTotal";

  public static final String FUNC_NODEDELETEFILE = "nodeDeleteFile";

  public static final String FUNC_NODECANADDFILE = "nodeCanAddFile";

  public static final String FUNC_NODESETSTORAGETOTAL = "nodeSetStorageTotal";

  public static final String FUNC_MUSTNOTPAUSED = "mustNotPaused";

  public static final String FUNC_NODESETEXT = "nodeSetExt";

  public static final String FUNC_USERSETFILEDURATION = "userSetFileDuration";

  public static final String FUNC_USERDEREGISTER = "userDeRegister";

  public static final String FUNC_INITIALIZE = "initialize";

  public static final String FUNC_MUSTINITIALIZED = "mustInitialized";

  public static final String FUNC_MUSTMANAGER = "mustManager";

  public static final String FUNC_MUSTCONTAINADDRESS = "mustContainAddress";

  public static final String FUNC_SETMANAGER = "setManager";

  public static final String FUNC_USERDELETEFILE = "userDeleteFile";

  public static final String FUNC_REFRESHCACHE = "refreshCache";

  public static final String FUNC_NODEREGISTER = "nodeRegister";

  public static final String FUNC_NODECANDELETEFILE = "nodeCanDeleteFile";

  public static final String FUNC_USERAPPROVEACCOUNT = "userApproveAccount";

  public static final String FUNC_USERADDFILE = "userAddFile";

  public static final String FUNC_NODEADDFILE = "nodeAddFile";

  public static final String FUNC_NODEDEREGISTER = "nodeDeRegister";

  public static final Event PAUSECHANGED_EVENT =
      new Event(
          "PauseChanged",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Bool>(true) {}, new TypeReference<Bool>(true) {}));
  ;

  public static final Event OWNERCHANGED_EVENT =
      new Event(
          "OwnerChanged",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
  ;

  public static final Event MANAGERCHANGED_EVENT =
      new Event(
          "ManagerChanged",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
  ;

  protected ChainStorage(String contractAddress, Client client, CryptoKeyPair credential) {
    super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
  }

  public static String getBinary(CryptoSuite cryptoSuite) {
    return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
  }

  public String resolver() throws ContractException {
    final Function function =
        new Function(
            FUNC_RESOLVER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public List getImports() throws ContractException {
    final Function function =
        new Function(
            FUNC_GETIMPORTS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
    List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
    return convertToNative(result);
  }

  public TransactionReceipt setOwner(String _owner) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setOwner(String _owner, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetOwner(String _owner) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt setPaused(Boolean _paused) {
    final Function function =
        new Function(
            FUNC_SETPAUSED,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_paused)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setPaused(Boolean _paused, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETPAUSED,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_paused)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetPaused(Boolean _paused) {
    final Function function =
        new Function(
            FUNC_SETPAUSED,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_paused)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<Boolean> getSetPausedInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETPAUSED,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
  }

  public TransactionReceipt mustOwner() {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustOwner(TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustOwner() {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public String getAddress(byte[] name) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt nodeCancelCanAddFile(String cid) {
    final Function function =
        new Function(
            FUNC_NODECANCELCANADDFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] nodeCancelCanAddFile(String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NODECANCELCANADDFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNodeCancelCanAddFile(String cid) {
    final Function function =
        new Function(
            FUNC_NODECANCELCANADDFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getNodeCancelCanAddFileInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NODECANCELCANADDFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt userSetFileExt(String cid, String ext) {
    final Function function =
        new Function(
            FUNC_USERSETFILEEXT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] userSetFileExt(String cid, String ext, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_USERSETFILEEXT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForUserSetFileExt(String cid, String ext) {
    final Function function =
        new Function(
            FUNC_USERSETFILEEXT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, String> getUserSetFileExtInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_USERSETFILEEXT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, String>(
        (String) results.get(0).getValue(), (String) results.get(1).getValue());
  }

  public TransactionReceipt userApproveFile(String to, String cid, Boolean approved) {
    final Function function =
        new Function(
            FUNC_USERAPPROVEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] userApproveFile(
      String to, String cid, Boolean approved, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_USERAPPROVEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForUserApproveFile(String to, String cid, Boolean approved) {
    final Function function =
        new Function(
            FUNC_USERAPPROVEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple3<String, String, Boolean> getUserApproveFileInput(
      TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_USERAPPROVEFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {},
                new TypeReference<Utf8String>() {},
                new TypeReference<Bool>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple3<String, String, Boolean>(
        (String) results.get(0).getValue(),
        (String) results.get(1).getValue(),
        (Boolean) results.get(2).getValue());
  }

  public TransactionReceipt userSetExt(String ext) {
    final Function function =
        new Function(
            FUNC_USERSETEXT,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] userSetExt(String ext, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_USERSETEXT,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForUserSetExt(String ext) {
    final Function function =
        new Function(
            FUNC_USERSETEXT,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getUserSetExtInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_USERSETEXT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public String manager() throws ContractException {
    final Function function =
        new Function(
            FUNC_MANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt mustAddress(byte[] name) {
    final Function function =
        new Function(
            FUNC_MUSTADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustAddress(byte[] name, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustAddress(byte[] name) {
    final Function function =
        new Function(
            FUNC_MUSTADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<byte[]> getMustAddressInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_MUSTADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
  }

  public Boolean paused() throws ContractException {
    final Function function =
        new Function(
            FUNC_PAUSED,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeCallWithSingleValueReturn(function, Boolean.class);
  }

  public String contractName() throws ContractException {
    final Function function =
        new Function(
            FUNC_CONTRACTNAME,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt userRegister(String ext) {
    final Function function =
        new Function(
            FUNC_USERREGISTER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] userRegister(String ext, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_USERREGISTER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForUserRegister(String ext) {
    final Function function =
        new Function(
            FUNC_USERREGISTER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getUserRegisterInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_USERREGISTER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt addAddress(byte[] name) {
    final Function function =
        new Function(
            FUNC_ADDADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] addAddress(byte[] name, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_ADDADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForAddAddress(byte[] name) {
    final Function function =
        new Function(
            FUNC_ADDADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_ADDADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
  }

  public String owner() throws ContractException {
    final Function function =
        new Function(
            FUNC_OWNER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt userSetStorageTotal(String userAddress, BigInteger storageTotal) {
    final Function function =
        new Function(
            FUNC_USERSETSTORAGETOTAL,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] userSetStorageTotal(
      String userAddress, BigInteger storageTotal, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_USERSETSTORAGETOTAL,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForUserSetStorageTotal(
      String userAddress, BigInteger storageTotal) {
    final Function function =
        new Function(
            FUNC_USERSETSTORAGETOTAL,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, BigInteger> getUserSetStorageTotalInput(
      TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_USERSETSTORAGETOTAL,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, BigInteger>(
        (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
  }

  public TransactionReceipt nodeDeleteFile(String cid) {
    final Function function =
        new Function(
            FUNC_NODEDELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] nodeDeleteFile(String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NODEDELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNodeDeleteFile(String cid) {
    final Function function =
        new Function(
            FUNC_NODEDELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getNodeDeleteFileInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NODEDELETEFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt nodeCanAddFile(String cid, BigInteger size) {
    final Function function =
        new Function(
            FUNC_NODECANADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] nodeCanAddFile(String cid, BigInteger size, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NODECANADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNodeCanAddFile(String cid, BigInteger size) {
    final Function function =
        new Function(
            FUNC_NODECANADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, BigInteger> getNodeCanAddFileInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NODECANADDFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, BigInteger>(
        (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
  }

  public TransactionReceipt nodeSetStorageTotal(BigInteger storageTotal) {
    final Function function =
        new Function(
            FUNC_NODESETSTORAGETOTAL,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] nodeSetStorageTotal(BigInteger storageTotal, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NODESETSTORAGETOTAL,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNodeSetStorageTotal(BigInteger storageTotal) {
    final Function function =
        new Function(
            FUNC_NODESETSTORAGETOTAL,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<BigInteger> getNodeSetStorageTotalInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NODESETSTORAGETOTAL,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
  }

  public TransactionReceipt mustNotPaused() {
    final Function function =
        new Function(
            FUNC_MUSTNOTPAUSED, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustNotPaused(TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTNOTPAUSED, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustNotPaused() {
    final Function function =
        new Function(
            FUNC_MUSTNOTPAUSED, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public TransactionReceipt nodeSetExt(String ext) {
    final Function function =
        new Function(
            FUNC_NODESETEXT,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] nodeSetExt(String ext, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NODESETEXT,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNodeSetExt(String ext) {
    final Function function =
        new Function(
            FUNC_NODESETEXT,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getNodeSetExtInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NODESETEXT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt userSetFileDuration(String cid, BigInteger duration) {
    final Function function =
        new Function(
            FUNC_USERSETFILEDURATION,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] userSetFileDuration(String cid, BigInteger duration, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_USERSETFILEDURATION,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForUserSetFileDuration(String cid, BigInteger duration) {
    final Function function =
        new Function(
            FUNC_USERSETFILEDURATION,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, BigInteger> getUserSetFileDurationInput(
      TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_USERSETFILEDURATION,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, BigInteger>(
        (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
  }

  public TransactionReceipt userDeRegister() {
    final Function function =
        new Function(
            FUNC_USERDEREGISTER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] userDeRegister(TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_USERDEREGISTER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForUserDeRegister() {
    final Function function =
        new Function(
            FUNC_USERDEREGISTER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public TransactionReceipt initialize(String _resolver) {
    final Function function =
        new Function(
            FUNC_INITIALIZE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] initialize(String _resolver, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_INITIALIZE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForInitialize(String _resolver) {
    final Function function =
        new Function(
            FUNC_INITIALIZE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getInitializeInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_INITIALIZE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt mustInitialized() {
    final Function function =
        new Function(
            FUNC_MUSTINITIALIZED, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustInitialized(TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTINITIALIZED, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustInitialized() {
    final Function function =
        new Function(
            FUNC_MUSTINITIALIZED, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public TransactionReceipt mustManager(byte[] managerName) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustManager(byte[] managerName) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
  }

  public TransactionReceipt mustContainAddress(List<byte[]> names) {
    final Function function =
        new Function(
            FUNC_MUSTCONTAINADDRESS,
            Arrays.<Type>asList(
                names.isEmpty()
                    ? org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]")
                    : new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<
                        org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(
                            names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustContainAddress(List<byte[]> names, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTCONTAINADDRESS,
            Arrays.<Type>asList(
                names.isEmpty()
                    ? org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]")
                    : new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<
                        org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(
                            names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustContainAddress(List<byte[]> names) {
    final Function function =
        new Function(
            FUNC_MUSTCONTAINADDRESS,
            Arrays.<Type>asList(
                names.isEmpty()
                    ? org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]")
                    : new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<
                        org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(
                            names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<List<byte[]>> getMustContainAddressInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_MUSTCONTAINADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<List<byte[]>>(convertToNative((List<Bytes32>) results.get(0).getValue()));
  }

  public TransactionReceipt setManager(String _manager) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setManager(String _manager, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetManager(String _manager) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt userDeleteFile(String cid) {
    final Function function =
        new Function(
            FUNC_USERDELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] userDeleteFile(String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_USERDELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForUserDeleteFile(String cid) {
    final Function function =
        new Function(
            FUNC_USERDELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getUserDeleteFileInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_USERDELETEFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt refreshCache() {
    final Function function =
        new Function(
            FUNC_REFRESHCACHE, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] refreshCache(TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_REFRESHCACHE, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForRefreshCache() {
    final Function function =
        new Function(
            FUNC_REFRESHCACHE, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public TransactionReceipt nodeRegister(BigInteger storageTotal, String ext) {
    final Function function =
        new Function(
            FUNC_NODEREGISTER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] nodeRegister(BigInteger storageTotal, String ext, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NODEREGISTER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNodeRegister(BigInteger storageTotal, String ext) {
    final Function function =
        new Function(
            FUNC_NODEREGISTER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<BigInteger, String> getNodeRegisterInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NODEREGISTER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<BigInteger, String>(
        (BigInteger) results.get(0).getValue(), (String) results.get(1).getValue());
  }

  public TransactionReceipt nodeCanDeleteFile(String cid) {
    final Function function =
        new Function(
            FUNC_NODECANDELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] nodeCanDeleteFile(String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NODECANDELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNodeCanDeleteFile(String cid) {
    final Function function =
        new Function(
            FUNC_NODECANDELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getNodeCanDeleteFileInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NODECANDELETEFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt userApproveAccount(String to, Boolean approved) {
    final Function function =
        new Function(
            FUNC_USERAPPROVEACCOUNT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] userApproveAccount(String to, Boolean approved, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_USERAPPROVEACCOUNT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForUserApproveAccount(String to, Boolean approved) {
    final Function function =
        new Function(
            FUNC_USERAPPROVEACCOUNT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, Boolean> getUserApproveAccountInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_USERAPPROVEACCOUNT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, Boolean>(
        (String) results.get(0).getValue(), (Boolean) results.get(1).getValue());
  }

  public TransactionReceipt userAddFile(String cid, BigInteger duration, String ext) {
    final Function function =
        new Function(
            FUNC_USERADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] userAddFile(
      String cid, BigInteger duration, String ext, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_USERADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForUserAddFile(String cid, BigInteger duration, String ext) {
    final Function function =
        new Function(
            FUNC_USERADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple3<String, BigInteger, String> getUserAddFileInput(
      TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_USERADDFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple3<String, BigInteger, String>(
        (String) results.get(0).getValue(),
        (BigInteger) results.get(1).getValue(),
        (String) results.get(2).getValue());
  }

  public TransactionReceipt nodeAddFile(String cid) {
    final Function function =
        new Function(
            FUNC_NODEADDFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] nodeAddFile(String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NODEADDFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNodeAddFile(String cid) {
    final Function function =
        new Function(
            FUNC_NODEADDFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getNodeAddFileInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NODEADDFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt nodeDeRegister() {
    final Function function =
        new Function(
            FUNC_NODEDEREGISTER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] nodeDeRegister(TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NODEDEREGISTER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNodeDeRegister() {
    final Function function =
        new Function(
            FUNC_NODEDEREGISTER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public List<PauseChangedEventResponse> getPauseChangedEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(PAUSECHANGED_EVENT, transactionReceipt);
    ArrayList<PauseChangedEventResponse> responses =
        new ArrayList<PauseChangedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      PauseChangedEventResponse typedResponse = new PauseChangedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousValue = (Boolean) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newValue = (Boolean) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribePauseChangedEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(PAUSECHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribePauseChangedEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(PAUSECHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public List<OwnerChangedEventResponse> getOwnerChangedEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
    ArrayList<OwnerChangedEventResponse> responses =
        new ArrayList<OwnerChangedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeOwnerChangedEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeOwnerChangedEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public List<ManagerChangedEventResponse> getManagerChangedEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
    ArrayList<ManagerChangedEventResponse> responses =
        new ArrayList<ManagerChangedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeManagerChangedEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeManagerChangedEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public static ChainStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
    return new ChainStorage(contractAddress, client, credential);
  }

  public static ChainStorage deploy(Client client, CryptoKeyPair credential)
      throws ContractException {
    return deploy(ChainStorage.class, client, credential, getBinary(client.getCryptoSuite()), "");
  }

  public static class PauseChangedEventResponse {
    public TransactionReceipt.Logs log;

    public Boolean previousValue;

    public Boolean newValue;
  }

  public static class OwnerChangedEventResponse {
    public TransactionReceipt.Logs log;

    public String previousValue;

    public String newValue;
  }

  public static class ManagerChangedEventResponse {
    public TransactionReceipt.Logs log;

    public String previousValue;

    public String newValue;
  }
}
