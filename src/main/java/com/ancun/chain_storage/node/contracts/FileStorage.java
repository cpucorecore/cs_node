package com.ancun.chain_storage.node.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class FileStorage extends Contract {
  public static final String[] BINARY_ARRAY = {
    "",
    "",
    "",
    "01576129f760018360200151612e9690919063ffffffff16565b8260200181815250505b6001841115612a1557838260800181815250505b816020015182608001511115612a345781602001518260800181815250505b81602001518260800151148015612a4b5750600081115b15612a5b57808260400181815250505b81925050505b9392505050565b6000612aaa83836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612fc5565b905092915050565b600080831415612ac55760009050612b36565b60008284029050828482811515612ad857fe5b04141515612b31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061362a6021913960400191505060405180910390fd5b809150505b92915050565b6000612b4b8360000183613087565b60019004905092915050565b6000612b7f836000018373ffffffffffffffffffffffffffffffffffffffff166001026130ad565b905092915050565b6000612baf836000018373ffffffffffffffffffffffffffffffffffffffff166001026131a4565b905092915050565b6000612bdf836000018373ffffffffffffffffffffffffffffffffffffffff16600102613219565b905092915050565b6000612bf68360000183613219565b905092915050565b6000612c0d83600001836131a4565b905092915050565b6000612c2483600001836130ad565b905092915050565b6000612c3a82600001612f20565b9050919050565b60608383836040516020018084805190602001908083835b602083101515612c7e5780518252602082019150602081019050602083039250612c59565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515612cd15780518252602082019150602081019050602083039250612cac565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b612d1e611994565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612dc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b6000808284019050838110151515612f16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600081600001805490509050919050565b6000612f7383836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061323c565b905092915050565b6000612fbd83836040805190810160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250613306565b905092915050565b60008383111582901515613074576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561303957808201518184015260208101905061301e565b50505050905090810190601f1680156130665780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6000826000018281548110151561309a57fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020549050600081141515613198576000600182039050600060018660000180549050039050818114151561314e576000866000018281548110151561310557fe5b9060005260206000200154905080876000018481548110151561312457fe5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480151561315d57fe5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061319e565b60009150505b92915050565b60006131b08383613219565b151561320e578260000182908060018154018082558091505090600182039060005260206000200160009091929091909150555082600001805490508360010160008481526020019081526020016000208190555060019050613213565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808311829015156132ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156132af578082015181840152602081019050613294565b50505050905090810190601f1680156132dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858115156132f857fe5b049050809150509392505050565b600080831415829015156133b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561337a57808201518184015260208101905061335f565b50505050905090810190601f1680156133a75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082848115156133c157fe5b0690509392505050565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b60206040519081016040528061340f6135cb565b81525090565b828054828255906000526020600020908101928215613451579160200282015b82811115613450578251825591602001919060010190613435565b5b50905061345e91906135df565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106134a357803560ff19168380011785556134d1565b828001600101855582156134d1579182015b828111156134d05782358255916020019190600101906134b5565b5b5090506134de9190613604565b5090565b50805460018160011615610100020316600290046000825580601f106135085750613527565b601f0160209004906000526020600020908101906135269190613604565b5b50565b508054600082559060005260206000209081019061354891906135df565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061358c57805160ff19168380011785556135ba565b828001600101855582156135ba579182015b828111156135b957825182559160200191906001019061359e565b5b5090506135c79190613604565b5090565b602060405190810160405280606081525090565b61360191905b808211156135fd5760008160009055506001016135e5565b5090565b90565b61362691905b8082111561362257600081600090555060010161360a565b5090565b9056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a72305820e5369d450b4321d133ad6df7b14e8aa95332437b765b38887f653617ac107a830029"
  };

  public static final String BINARY =
      org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

  public static final String[] SM_BINARY_ARRAY = {
    "",
    "",
    "81602001602082028038833980820191505090505b50905060008090505b8360400151811015611a7357611a1c81840186612b6c90919063ffffffff16565b8282815181101515611a2a57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506119fb565b50808360800151846020015114955095505050505094509492505050565b8060098484604051808383808284378083019250505092505050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000806004878760405180838380828437808301925050509250505090815260200160405180910390206004019050611b5b6133cb565b611b6e611b6783612903565b8787612992565b90506000611ba08260600151611b926001856080015161291890919063ffffffff16565b612ae290919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015611bd75781602001602082028038833980820191505090505b50905060008090505b8360400151811015611c5857611c0181840186612b6c90919063ffffffff16565b8282815181101515611c0f57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050611be0565b50808360200151846080015114955095505050505094509492505050565b611c81600354611d09565b611cbd81600485856040518083838082843780830192505050925050509081526020016040518091039020600401612b8790919063ffffffff16565b50505050565b600060048383604051808383808284378083019250505092505050908152602001604051809103902060010154905092915050565b6000611d046006612bb7565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e3e6040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e2a5780601f10611dff57610100808354040283529160200191611e2a565b820191906000526020600020905b815481529060010190602001808311611e0d57829003601f168201915b5050505050612bcc9092919063ffffffff16565b901515611ee6576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611eab578082015181840152602081019050611e90565b50505050905090810190601f168015611ed85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b611ef5600354611d09565b611f3181600485856040518083838082843780830192505050925050509081526020016040518091039020600601612ca190919063ffffffff16565b50505050565b611f3f612229565b611f4881612cd1565b6040805190810160405280600781526020017f53746f726167650000000000000000000000000000000000000000000000000081525060009080519060200190611f939291906133fb565b506120b1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c22931696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b15801561201b57600080fd5b505afa15801561202f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561205957600080fd5b81019080805164010000000081111561207157600080fd5b8281019050602081018481111561208757600080fd5b81518560018202830111640100000000821117156120a457600080fd5b5050929190505050612e3e565b600381905550600060035414156120ea577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b600060048383604051808383808284378083019250505092505050908152602001604051809103902060020154905092915050565b61212d600354611d09565b6000828260405180838380828437808301925050509250505060405180910390209050612164816006612e5190919063ffffffff16565b1561217f5761217d816006612e6890919063ffffffff16565b505b60056000828152602001908152602001600020600061219e919061347b565b6004838360405180838380828437808301925050509250505090815260200160405180910390206000808201600090556001820160009055600282016000905560038201600090556004820160008082016000808201600061220091906134c3565b505050506006820160008082016000808201600061221e91906134c3565b505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122ee576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b60006004838360405180838380828437808301925050509250505090815260200160405180910390206000015460001415905092915050565b600060048383604051808383808284378083019250505092505050908152602001604051809103902060030154905092915050565b6000612392600484846040518083838082843780830192505050925050509081526020016040518091039020600401612903565b600014905092915050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124335780601f1061240857610100808354040283529160200191612433565b820191906000526020600020905b81548152906001019060200180831161241657829003601f168201915b505050505081565b60006124798260048686604051808383808284378083019250505092505050908152602001604051809103902060060161296290919063ffffffff16565b90509392505050565b600060098383604051808383808284378083019250505092505050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6124df600354611d09565b61251b81600485856040518083838082843780830192505050925050509081526020016040518091039020600401612ca190919063ffffffff16565b50505050565b61253681600854612e7f90919063ffffffff16565b60088190555050565b6000600854905090565b612554600354611d09565b61259081600485856040518083838082843780830192505050925050509081526020016040518091039020600601612b8790919063ffffffff16565b50505050565b6125a1600354611d09565b6125a96134e4565b6125b16134e4565b60c06040519081016040528060018152602001428152602001600081526020018481526020018381526020018281525060048686604051808383808284378083019250505092505050908152602001604051809103902060008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401600082015181600001600082015181600001908051906020019061265e9291906134fe565b505050505060a08201518160060160008201518160000160008201518160000190805190602001906126919291906134fe565b5050505050905050600085856040518083838082843780830192505050925050506040518091039020905085856005600084815260200190815260200160002091906126de92919061354b565b506126f3816006612e5190919063ffffffff16565b151561270f5761270d816006612f0990919063ffffffff16565b505b505050505050565b606060006004848460405180838380828437808301925050509250505090815260200160405180910390206006019050600061275282612903565b90506060816040519080825280602002602001820160405280156127855781602001602082028038833980820191505090505b50905060008090505b82811015612800576127a98185612b6c90919063ffffffff16565b82828151811015156127b757fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808060010191505061278e565b5080935050505092915050565b606060006004848460405180838380828437808301925050509250505090815260200160405180910390206004019050600061284882612903565b905060608160405190808252806020026020018201604052801561287b5781602001602082028038833980820191505090505b50905060008090505b828110156128f65761289f8185612b6c90919063ffffffff16565b82828151811015156128ad57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050612884565b5080935050505092915050565b600061291182600001612f20565b9050919050565b600061295a83836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612f31565b905092915050565b600061298a836000018373ffffffffffffffffffffffffffffffffffffffff16600102612ff3565b905092915050565b61299a6133cb565b6129a26133cb565b60a0604051908101604052808681526020016000815260200160008152602001600081526020016001815250905060008514806129df5750600084",
    "145b156129ed5780915050612adb565b603284116129fb57836129fe565b60325b8160600181815250508060600151816040018181525050612a2c81606001518661301690919063ffffffff16565b8160200181815250506000612a4e82606001518761306090919063ffffffff16565b90506000811115612a7b57612a7160018360200151612e7f90919063ffffffff16565b8260200181815250505b6001841115612a8f57838260800181815250505b816020015182608001511115612aae5781602001518260800181815250505b81602001518260800151148015612ac55750600081115b15612ad557808260400181815250505b81925050505b9392505050565b600080831415612af55760009050612b66565b60008284029050828482811515612b0857fe5b04141515612b61576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061362a6021913960400191505060405180910390fd5b809150505b92915050565b6000612b7b83600001836130aa565b60019004905092915050565b6000612baf836000018373ffffffffffffffffffffffffffffffffffffffff166001026130d0565b905092915050565b6000612bc582600001612f20565b9050919050565b60608383836040516020018084805190602001908083835b602083101515612c095780518252602082019150602081019050602083039250612be4565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515612c5c5780518252602082019150602081019050602083039250612c37565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b6000612cc9836000018373ffffffffffffffffffffffffffffffffffffffff16600102613145565b905092915050565b612cd9612229565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612d7e576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b6000612e608360000183612ff3565b905092915050565b6000612e778360000183613145565b905092915050565b6000808284019050838110151515612eff576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000612f1883600001836130d0565b905092915050565b600081600001805490509050919050565b60008383111582901515612fe0576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fa5578082015181840152602081019050612f8a565b50505050905090810190601f168015612fd25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080836001016000848152602001908152602001600020541415905092915050565b600061305883836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061323c565b905092915050565b60006130a283836040805190810160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250613306565b905092915050565b600082600001828154811015156130bd57fe5b9060005260206000200154905092915050565b60006130dc8383612ff3565b151561313a57826000018290806001815401808255809150509060018203906000526020600020016000909192909190915055508260000180549050836001016000848152602001908152602001600020819055506001905061313f565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114151561323057600060018203905060006001866000018054905003905081811415156131e6576000866000018281548110151561319d57fe5b906000526020600020015490508087600001848154811015156131bc57fe5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548015156131f557fe5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050613236565b60009150505b92915050565b6000808311829015156132ea576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156132af578082015181840152602081019050613294565b50505050905090810190601f1680156132dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858115156132f857fe5b049050809150509392505050565b600080831415829015156133b5576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561337a57808201518184015260208101905061335f565b50505050905090810190601f1680156133a75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082848115156133c157fe5b0690509392505050565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061343c57805160ff191683800117855561346a565b8280016001018555821561346a579182015b8281111561346957825182559160200191906001019061344e565b5b50905061347791906135cb565b5090565b50805460018160011615610100020316600290046000825580601f106134a157506134c0565b601f0160209004906000526020600020908101906134bf91906135cb565b5b50565b50805460008255906000526020600020908101906134e191906135f0565b50565b6020604051908101604052806134f8613615565b81525090565b82805482825590600052602060002090810192821561353a579160200282015b8281111561353957825182559160200191906001019061351e565b5b50905061354791906135f0565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061358c57803560ff19168380011785556135ba565b828001600101855582156135ba579182015b828111156135b957823582559160200191906001019061359e565b5b5090506135c791906135cb565b5090565b6135ed91905b808211156135e95760008160009055506001016135d1565b5090565b90565b61361291905b8082111561360e5760008160009055506001016135f6565b5090565b90565b60206040519081016040528060608152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a723058201ce63f81e45c21fde454fca3b024a09cbcb1b362da4495764b03e4a909143fc00029"
  };

  public static final String SM_BINARY =
      org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

  public static final String[] ABI_ARRAY = {
    "[{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getLastUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"lastUser\",\"type\":\"address\"}],\"name\":\"setLastUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"setStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getReplica\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"deleteNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"subTotalSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"deleteUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeEmpty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"nodeExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"replica\",\"type\":\"uint256\"}],\"name\":\"newFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getStatusTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cidHash\",\"type\":\"bytes32\"}],\"name\":\"getCid\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFileCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"addTotalSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"setSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"userEmpty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"
  };

  public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

  public static final String FUNC_GETNODES = "getNodes";

  public static final String FUNC_EXIST = "exist";

  public static final String FUNC_GETLASTUSER = "getLastUser";

  public static final String FUNC_SETLASTUSER = "setLastUser";

  public static final String FUNC_SETSTATUS = "setStatus";

  public static final String FUNC_SETOWNER = "setOwner";

  public static final String FUNC_MUSTOWNER = "mustOwner";

  public static final String FUNC_GETREPLICA = "getReplica";

  public static final String FUNC_GETSTATUS = "getStatus";

  public static final String FUNC_GETTOTALSIZE = "getTotalSize";

  public static final String FUNC_DELETENODE = "deleteNode";

  public static final String FUNC_ADDNODE = "addNode";

  public static final String FUNC_SUBTOTALSIZE = "subTotalSize";

  public static final String FUNC_MANAGER = "manager";

  public static final String FUNC_DELETEUSER = "deleteUser";

  public static final String FUNC_USEREXIST = "userExist";

  public static final String FUNC_NODEEMPTY = "nodeEmpty";

  public static final String FUNC_CONTRACTNAME = "contractName";

  public static final String FUNC_ADDUSER = "addUser";

  public static final String FUNC_OWNER = "owner";

  public static final String FUNC_NODEEXIST = "nodeExist";

  public static final String FUNC_NEWFILE = "newFile";

  public static final String FUNC_GETSTATUSTIME = "getStatusTime";

  public static final String FUNC_DELETEFILE = "deleteFile";

  public static final String FUNC_GETCID = "getCid";

  public static final String FUNC_GETFILECOUNT = "getFileCount";

  public static final String FUNC_GETUSERS = "getUsers";

  public static final String FUNC_MUSTMANAGER = "mustManager";

  public static final String FUNC_SETMANAGER = "setManager";

  public static final String FUNC_GETSIZE = "getSize";

  public static final String FUNC_ADDTOTALSIZE = "addTotalSize";

  public static final String FUNC_SETSIZE = "setSize";

  public static final String FUNC_USEREMPTY = "userEmpty";

  public static final Event OWNERCHANGED_EVENT =
      new Event(
          "OwnerChanged",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
  ;

  public static final Event MANAGERCHANGED_EVENT =
      new Event(
          "ManagerChanged",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
  ;

  protected FileStorage(String contractAddress, Client client, CryptoKeyPair credential) {
    super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
  }

  public static String getBinary(CryptoSuite cryptoSuite) {
    return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
  }

  public Tuple2<List<String>, Boolean> getNodes(
      String cid, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETNODES,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
    List<Type> results = executeCallWithMultipleValueReturn(function);
    return new Tuple2<List<String>, Boolean>(
        convertToNative((List<Address>) results.get(0).getValue()),
        (Boolean) results.get(1).getValue());
  }

  public Boolean exist(String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_EXIST,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeCallWithSingleValueReturn(function, Boolean.class);
  }

  public String getLastUser(String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETLASTUSER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt setLastUser(String cid, String lastUser) {
    final Function function =
        new Function(
            FUNC_SETLASTUSER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(lastUser)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setLastUser(String cid, String lastUser, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETLASTUSER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(lastUser)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetLastUser(String cid, String lastUser) {
    final Function function =
        new Function(
            FUNC_SETLASTUSER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(lastUser)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, String> getSetLastUserInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETLASTUSER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, String>(
        (String) results.get(0).getValue(), (String) results.get(1).getValue());
  }

  public TransactionReceipt setStatus(String cid, BigInteger status) {
    final Function function =
        new Function(
            FUNC_SETSTATUS,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setStatus(String cid, BigInteger status, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETSTATUS,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetStatus(String cid, BigInteger status) {
    final Function function =
        new Function(
            FUNC_SETSTATUS,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, BigInteger> getSetStatusInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETSTATUS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, BigInteger>(
        (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
  }

  public TransactionReceipt setOwner(String _owner) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setOwner(String _owner, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetOwner(String _owner) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt mustOwner() {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustOwner(TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustOwner() {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public BigInteger getReplica(String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETREPLICA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public BigInteger getStatus(String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETSTATUS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public BigInteger getTotalSize() throws ContractException {
    final Function function =
        new Function(
            FUNC_GETTOTALSIZE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public TransactionReceipt deleteNode(String cid, String nodeAddress) {
    final Function function =
        new Function(
            FUNC_DELETENODE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] deleteNode(String cid, String nodeAddress, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_DELETENODE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForDeleteNode(String cid, String nodeAddress) {
    final Function function =
        new Function(
            FUNC_DELETENODE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, String> getDeleteNodeInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_DELETENODE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, String>(
        (String) results.get(0).getValue(), (String) results.get(1).getValue());
  }

  public TransactionReceipt addNode(String cid, String nodeAddress) {
    final Function function =
        new Function(
            FUNC_ADDNODE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] addNode(String cid, String nodeAddress, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_ADDNODE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForAddNode(String cid, String nodeAddress) {
    final Function function =
        new Function(
            FUNC_ADDNODE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, String> getAddNodeInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_ADDNODE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, String>(
        (String) results.get(0).getValue(), (String) results.get(1).getValue());
  }

  public TransactionReceipt subTotalSize(BigInteger size) {
    final Function function =
        new Function(
            FUNC_SUBTOTALSIZE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] subTotalSize(BigInteger size, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SUBTOTALSIZE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSubTotalSize(BigInteger size) {
    final Function function =
        new Function(
            FUNC_SUBTOTALSIZE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<BigInteger> getSubTotalSizeInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SUBTOTALSIZE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
  }

  public String manager() throws ContractException {
    final Function function =
        new Function(
            FUNC_MANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt deleteUser(String cid, String userAddress) {
    final Function function =
        new Function(
            FUNC_DELETEUSER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] deleteUser(String cid, String userAddress, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_DELETEUSER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForDeleteUser(String cid, String userAddress) {
    final Function function =
        new Function(
            FUNC_DELETEUSER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, String> getDeleteUserInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_DELETEUSER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, String>(
        (String) results.get(0).getValue(), (String) results.get(1).getValue());
  }

  public Boolean userExist(String cid, String userAddress) throws ContractException {
    final Function function =
        new Function(
            FUNC_USEREXIST,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeCallWithSingleValueReturn(function, Boolean.class);
  }

  public Boolean nodeEmpty(String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_NODEEMPTY,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeCallWithSingleValueReturn(function, Boolean.class);
  }

  public String contractName() throws ContractException {
    final Function function =
        new Function(
            FUNC_CONTRACTNAME,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt addUser(String cid, String userAddress) {
    final Function function =
        new Function(
            FUNC_ADDUSER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] addUser(String cid, String userAddress, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_ADDUSER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForAddUser(String cid, String userAddress) {
    final Function function =
        new Function(
            FUNC_ADDUSER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, String> getAddUserInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_ADDUSER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, String>(
        (String) results.get(0).getValue(), (String) results.get(1).getValue());
  }

  public String owner() throws ContractException {
    final Function function =
        new Function(
            FUNC_OWNER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public Boolean nodeExist(String cid, String nodeAddress) throws ContractException {
    final Function function =
        new Function(
            FUNC_NODEEXIST,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeCallWithSingleValueReturn(function, Boolean.class);
  }

  public TransactionReceipt newFile(String cid, BigInteger replica) {
    final Function function =
        new Function(
            FUNC_NEWFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(replica)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] newFile(String cid, BigInteger replica, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NEWFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(replica)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNewFile(String cid, BigInteger replica) {
    final Function function =
        new Function(
            FUNC_NEWFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(replica)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, BigInteger> getNewFileInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NEWFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, BigInteger>(
        (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
  }

  public List getNodes(String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETNODES,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
    List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
    return convertToNative(result);
  }

  public BigInteger getStatusTime(String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETSTATUSTIME,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public TransactionReceipt deleteFile(String cid) {
    final Function function =
        new Function(
            FUNC_DELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] deleteFile(String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_DELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForDeleteFile(String cid) {
    final Function function =
        new Function(
            FUNC_DELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getDeleteFileInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_DELETEFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public String getCid(byte[] cidHash) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETCID,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public BigInteger getFileCount() throws ContractException {
    final Function function =
        new Function(
            FUNC_GETFILECOUNT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public List getUsers(String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETUSERS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
    List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
    return convertToNative(result);
  }

  public TransactionReceipt mustManager(byte[] managerName) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustManager(byte[] managerName) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
  }

  public TransactionReceipt setManager(String _manager) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setManager(String _manager, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetManager(String _manager) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public BigInteger getSize(String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETSIZE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public TransactionReceipt addTotalSize(BigInteger size) {
    final Function function =
        new Function(
            FUNC_ADDTOTALSIZE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] addTotalSize(BigInteger size, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_ADDTOTALSIZE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForAddTotalSize(BigInteger size) {
    final Function function =
        new Function(
            FUNC_ADDTOTALSIZE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<BigInteger> getAddTotalSizeInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_ADDTOTALSIZE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
  }

  public TransactionReceipt setSize(String cid, BigInteger size) {
    final Function function =
        new Function(
            FUNC_SETSIZE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setSize(String cid, BigInteger size, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETSIZE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetSize(String cid, BigInteger size) {
    final Function function =
        new Function(
            FUNC_SETSIZE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, BigInteger> getSetSizeInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETSIZE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, BigInteger>(
        (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
  }

  public Tuple2<List<String>, Boolean> getUsers(
      String cid, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETUSERS,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
    List<Type> results = executeCallWithMultipleValueReturn(function);
    return new Tuple2<List<String>, Boolean>(
        convertToNative((List<Address>) results.get(0).getValue()),
        (Boolean) results.get(1).getValue());
  }

  public Boolean userEmpty(String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_USEREMPTY,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeCallWithSingleValueReturn(function, Boolean.class);
  }

  public List<OwnerChangedEventResponse> getOwnerChangedEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
    ArrayList<OwnerChangedEventResponse> responses =
        new ArrayList<OwnerChangedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeOwnerChangedEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeOwnerChangedEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public List<ManagerChangedEventResponse> getManagerChangedEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
    ArrayList<ManagerChangedEventResponse> responses =
        new ArrayList<ManagerChangedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeManagerChangedEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeManagerChangedEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public static FileStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
    return new FileStorage(contractAddress, client, credential);
  }

  public static FileStorage deploy(Client client, CryptoKeyPair credential, String _manager)
      throws ContractException {
    String encodedConstructor =
        FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)));
    return deploy(
        FileStorage.class,
        client,
        credential,
        getBinary(client.getCryptoSuite()),
        encodedConstructor);
  }

  public static class OwnerChangedEventResponse {
    public TransactionReceipt.Logs log;

    public String previousValue;

    public String newValue;
  }

  public static class ManagerChangedEventResponse {
    public TransactionReceipt.Logs log;

    public String previousValue;

    public String newValue;
  }
}
