package com.ancun.chain_storage.node.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class UserStorage extends Contract {
  public static final String[] BINARY_ARRAY = {
    "",
    "01906130d5565b6120b8565b6040516108639190613b73565b60405180910390f35b34801561087857600080fd5b50610893600480360361088e91908101906130d5565b61210b565b6040516108a09190613b73565b60405180910390f35b3480156108b557600080fd5b506108d060048036036108cb9190810190613674565b61215e565b6040516108de9291906139d4565b60405180910390f35b600080606060008585604051808383808284378083019250505092505050604051809103902090506000600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002090508060010154816002015482600301808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a065780601f106109db57610100808354040283529160200191610a06565b820191906000526020600020905b8154815290600101906020018083116109e957829003601f168201915b50505050509050945094509450505093509350939050565b610a29600354611864565b80600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b610acd600354611864565b6000828260405180838380828437808301925050509250505060405180910390209050600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060008082016000610b519190612caf565b60018201600090556002820160009055600382016000610b719190612caf565b5050610bc781600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020161228490919063ffffffff16565b5050505050565b610bd6610d08565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610c48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3f90613ad3565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9190613b53565b60405180910390fd5b565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600001549050919050565b60008082805190602001209050600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff169150509392505050565b600080838360405180838380828437808301925050509250505060405180910390209050610f1581600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020161229b90919063ffffffff16565b9150509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160010154119050919050565b610fa1600354611864565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160008082016000905560018201600090555050600282016000808201600080820160006110129190612cf7565b505050506004820160006110269190612caf565b505061103c8160056122b290919063ffffffff16565b5050565b61104b600354611864565b611053612d18565b60606040519081016040528060408051908101604052806000815260200187815250815260200182815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001600082015181600001556020820151816001015550506020820151816002016000820151816000016000820151816000019080519060200190611154929190612d32565b50505050506040820151816004019080519060200190611175929190612d7f565b5090505061118d8560056122e290919063ffffffff16565b505050505050565b60006111a185856117d0565b156111af5760019050611211565b6111fe858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610deb565b1561120c5760019050611211565b600090505b949350505050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112af5780601f10611284576101008083540402835291602001916112af565b820191906000526020600020905b81548152906001019060200180831161129257829003601f168201915b505050505081565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600101549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611337600354611864565b60008484604051808383808284378083019250505092505050604051809103902090508282600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060030191906113bc929190612dff565b50505050505050565b6113d0600354611864565b8181600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004019190611421929190612dff565b50505050565b611432600354611864565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600101819055505050565b61148b600354611864565b600083836040518083838082843780830192505050925050506040518091039020905081600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff021916908315150217905550505050505050565b611566600354611864565b600083836040518083838082843780830192505050925050506040518091039020905081600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600201819055505050505050565b60006115f46005612312565b905090565b611604600354611864565b600085856040518083838082843780830192505050925050506040518091039020905060806040519081016040528087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200142815260200185815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600082015181600001908051906020019061173d929190612d7f565b506020820151816001015560408201518160020155606082015181600301908051906020019061176e929190612d7f565b509050506117c681600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020161232790919063ffffffff16565b5050505050505050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020",
    "",
    "815260040161285890613b33565b60405180910390fd5b809150505b92915050565b600061287b8360000183612bc4565b905092915050565b600081600101548260000154111561289e57600090506128bc565b6128b9826000015483600101546127ae90919063ffffffff16565b90505b919050565b60006128d08360000183612bc4565b60019004905092915050565b6000808360010160008481526020019081526020016000205490506000811415156129c7576000600182039050600060018660000180549050039050818114151561297d576000866000018281548110151561293457fe5b9060005260206000200154905080876000018481548110151561295357fe5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480151561298c57fe5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506129cd565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000612a0283836129d3565b1515612a60578260000182908060018154018082558091505090600182039060005260206000200160009091929091909150555082600001805490508360010160008481526020019081526020016000208190555060019050612a65565b600090505b92915050565b600081600001805490509050919050565b6000808284019050838110151515612ac9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac090613ab3565b60405180910390fd5b8091505092915050565b6000612b1583836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612bea565b905092915050565b6000612b5f83836040805190810160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250612c4f565b905092915050565b60008383111582901515612bb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ba89190613a71565b60405180910390fd5b5060008385039050809150509392505050565b60008260000182815481101515612bd757fe5b9060005260206000200154905092915050565b600080831182901515612c33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c2a9190613a71565b60405180910390fd5b5060008385811515612c4157fe5b049050809150509392505050565b60008083141582901515612c99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c909190613a71565b60405180910390fd5b508284811515612ca557fe5b0690509392505050565b50805460018160011615610100020316600290046000825580601f10612cd55750612cf4565b601f016020900490600052602060002090810190612cf39190612f2f565b5b50565b5080546000825590600052602060002090810190612d159190612f54565b50565b602060405190810160405280612d2c612f79565b81525090565b828054828255906000526020600020908101928215612d6e579160200282015b82811115612d6d578251825591602001919060010190612d52565b5b509050612d7b9190612f54565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612dc057805160ff1916838001178555612dee565b82800160010185558215612dee579182015b82811115612ded578251825591602001919060010190612dd2565b5b509050612dfb9190612f2f565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e4057803560ff1916838001178555612e6e565b82800160010185558215612e6e579182015b82811115612e6d578235825591602001919060010190612e52565b5b509050612e7b9190612f2f565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ec057805160ff1916838001178555612eee565b82800160010185558215612eee579182015b82811115612eed578251825591602001919060010190612ed2565b5b509050612efb9190612f2f565b5090565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b612f5191905b80821115612f4d576000816000905550600101612f35565b5090565b90565b612f7691905b80821115612f72576000816000905550600101612f5a565b5090565b90565b602060405190810160405280606081525090565b6000612f998235613ccd565b905092915050565b6000612fad8235613cdf565b905092915050565b6000612fc18235613ceb565b905092915050565b60008083601f8401121515612fdd57600080fd5b8235905067ffffffffffffffff811115612ff657600080fd5b60208301915083600182028301111561300e57600080fd5b9250929050565b600082601f830112151561302857600080fd5b813561303b61303682613bf9565b613bcc565b9150808252602083016020830185838301111561305757600080fd5b613062838284613cff565b50505092915050565b600082601f830112151561307e57600080fd5b815161309161308c82613bf9565b613bcc565b915080825260208301602083018583830111156130ad57600080fd5b6130b8838284613d0e565b50505092915050565b60006130cd8235613cf5565b905092915050565b6000602082840312156130e757600080fd5b60006130f584828501612f8d565b91505092915050565b6000806040838503121561311157600080fd5b600061311f85828601612f8d565b925050602061313085828601612f8d565b9150509250929050565b60008060006060848603121561314f57600080fd5b600061315d86828701612f8d565b935050602061316e86828701612f8d565b925050604061317f86828701612fa1565b9150509250925092565b6000806000806060858703121561319f57600080fd5b60006131ad87828801612f8d565b94505060206131be87828801612f8d565b935050604085013567ffffffffffffffff8111156131db57600080fd5b6131e787828801612fc9565b925092505092959194509250565b60008060008060006080868803121561320d57600080fd5b600061321b88828901612f8d565b955050602061322c88828901612f8d565b945050604086013567ffffffffffffffff81111561324957600080fd5b61325588828901612fc9565b9350935050606061326888828901612fa1565b9150509295509295909350565b60008060006060848603121561328a57600080fd5b600061329886828701612f8d565b93505060206132a986828701612f8d565b925050604084013567ffffffffffffffff8111156132c657600080fd5b6132d286828701613015565b9150509250925092565b6000806000604084860312156132f157600080fd5b60006132ff86828701612f8d565b935050602084013567ffffffffffffffff81111561331c57600080fd5b61332886828701612fc9565b92509250509250925092565b60008060008060006060868803121561334c57600080fd5b600061335a88828901612f8d565b955050602086013567ffffffffffffffff81111561337757600080fd5b61338388828901612fc9565b9450945050604086013567ffffffffffffffff8111156133a257600080fd5b6133ae88828901612fc9565b92509250509295509295909350565b600080600080606085870312156133d357600080fd5b60006133e187828801612f8d565b945050602085013567ffffffffffffffff8111156133fe57600080fd5b61340a87828801612fc9565b9350935050604061341d878288016130c1565b91505092959194509250565b6000806000806000806080878903121561344257600080fd5b600061345089828a01612f8d565b965050602087013567ffffffffffffffff81111561346d57600080fd5b61347989828a01612fc9565b9550955050604061348c89828a016130c1565b935050606087013567ffffffffffffffff8111156134a957600080fd5b6134b589828a01612fc9565b92509250509295509295509295565b600080604083850312156134d757600080fd5b60006134e585828601612f8d565b92505060206134f6858286016130c1565b9150509250929050565b60008060006060848603121561351557600080fd5b600061352386828701612f8d565b9350506020613534868287016130c1565b925050604061354586828701612fa1565b9150509250925092565b6000806000806060858703121561356557600080fd5b600061357387828801612f8d565b9450506020613584878288016130c1565b935050604085013567ffffffffffffffff8111156135a157600080fd5b6135ad87828801612fc9565b925092505092959194509250565b6000806000606084860312156135d057600080fd5b60006135de86828701612f8d565b93505060206135ef868287016130c1565b9250506040613600868287016130c1565b9150509250925092565b60006020828403121561361c57600080fd5b600061362a84828501612fb5565b91505092915050565b60006020828403121561364557600080fd5b600082015167ffffffffffffffff81111561365f57600080fd5b61366b8482850161306b565b91505092915050565b6000806040838503121561368757600080fd5b6000613695858286016130c1565b92505060206136a6858286016130c1565b9150509250929050565b6136b981613c85565b82525050565b60006136ca82613c3f565b8084526020840193506136dc83613c25565b60005b8281101561370e576136f28683516136b0565b6136fb82613c6b565b91506020860195506001810190506136df565b50849250505092915050565b600061372582613c4a565b8084526020840193508360208202850161373e85613c32565b60005b848110156137775783830388526137598383516137cd565b925061376482613c78565b9150602088019750600181019050613741565b508196508694505050505092915050565b61379181613c97565b82525050565b60006137a282613c60565b8084526137b6816020860160208601613d0e565b6137bf81613d41565b602085010191505092915050565b60006137d882613c55565b8084526137ec816020860160208601613d0e565b6137f581613d41565b602085010191505092915050565b6000601d82527f53534d3a7573655370616365207370616365206e6f7420656e6f7567680000006020830152604082019050919050565b6000601b82527f536166654d6174683a",
    "206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000601d82527f6e6577206f776e657220697320746865207a65726f20616464726573730000006020830152604082019050919050565b6000601982527f53534d3a667265655370616365206f7574206f662075736564000000000000006020830152604082019050919050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b6139b381613cc3565b82525050565b60006020820190506139ce60008301846136b0565b92915050565b600060408201905081810360008301526139ee81856136bf565b90506139fd6020830184613788565b9392505050565b60006040820190508181036000830152613a1e818561371a565b9050613a2d6020830184613788565b9392505050565b6000602082019050613a496000830184613788565b92915050565b60006020820190508181036000830152613a6981846137cd565b905092915050565b60006020820190508181036000830152613a8b8184613797565b905092915050565b60006020820190508181036000830152613aac81613803565b9050919050565b60006020820190508181036000830152613acc8161383a565b9050919050565b60006020820190508181036000830152613aec81613871565b9050919050565b60006020820190508181036000830152613b0c816138a8565b9050919050565b60006020820190508181036000830152613b2c816138df565b9050919050565b60006020820190508181036000830152613b4c81613916565b9050919050565b60006020820190508181036000830152613b6c81613973565b9050919050565b6000602082019050613b8860008301846139aa565b92915050565b6000606082019050613ba360008301866139aa565b613bb060208301856139aa565b8181036040830152613bc28184613797565b9050949350505050565b6000604051905081810181811067ffffffffffffffff82111715613bef57600080fd5b8060405250919050565b600067ffffffffffffffff821115613c1057600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000613c9082613ca3565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613cd882613ca3565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613d2c578082015181840152602081019050613d11565b83811115613d3b576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058208756713ae2af6bddc6f397446214a758e36b52626191e2c7872aa6b63713787a6c6578706572696d656e74616cf50037"
  };

  public static final String BINARY =
      org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

  public static final String[] SM_BINARY_ARRAY = {
    "60806040527f6d616e61676572000000000000000000000000000000000000000000000000006003553480156200003557600080fd5b50604051602080620045418339810180604052620000579190810190620005bd565b8033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000f481620000fc640100000000026401000000009004565b5050620007a5565b62000115620002a2640100000000026401000000009004565b62000134816200033964010000000002620026c7176401000000009004565b6040805190810160405280600781526020017f53746f726167650000000000000000000000000000000000000000000000000081525060009080519060200190620001819291906200049a565b5062000265600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c22931696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156200020b57600080fd5b505afa15801562000220573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506200024b9190810190620005e9565b620004876401000000000262002801176401000000009004565b600381905550600060035414156200029f577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000337576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016200032e90620006be565b60405180910390fd5b565b62000352620002a2640100000000026401000000009004565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620003c7576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401620003be906200069c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004dd57805160ff19168380011785556200050e565b828001600101855582156200050e579182015b828111156200050d578251825591602001919060010190620004f0565b5b5090506200051d919062000521565b5090565b6200054691905b808211156200054257600081600090555060010162000528565b5090565b90565b60006200055782516200075b565b905092915050565b600082601f83011215156200057357600080fd5b81516200058a62000584826200070e565b620006e0565b91508082526020830160208301858383011115620005a757600080fd5b620005b48382846200076f565b50505092915050565b600060208284031215620005d057600080fd5b6000620005e08482850162000549565b91505092915050565b600060208284031215620005fc57600080fd5b600082015167ffffffffffffffff8111156200061757600080fd5b62000625848285016200055f565b91505092915050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b60006020820190508181036000830152620006b7816200062e565b9050919050565b60006020820190508181036000830152620006d98162000665565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156200070457600080fd5b8060405250919050565b600067ffffffffffffffff8211156200072657600080fd5b601f19601f8301169050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000768826200073b565b9050919050565b60005b838110156200078f57808201518184015260208101905062000772565b838111156200079f576000848401525b50505050565b613d8c80620007b56000396000f3fe608060405260043610610221576000357c01000000000000000000000000000000000000000000000000000000009004806380c2e0af11610135578063b1eb3c2e116100bd578063d0613a5f1161008c578063d0613a5f146107c8578063d149eb0814610805578063f13a596914610842578063fcdce0011461087f578063ff8945dd146108a857610221565b8063b1eb3c2e1461070c578063c116b3ba14610723578063c229316914610760578063d03249dd1461078b57610221565b8063977b659011610104578063977b6590146105ee5780639786acf214610617578063a0b5ad1e14610654578063aa89920d14610691578063ab3da81c146106cf57610221565b806380c2e0af1461054a5780638b6ceb4f1461057357806391726a991461059c57806391eb5180146105c557610221565b80634c2b1e2e116101b85780636bddd7ba116101875780636bddd7ba146104555780637279e3cd1461047e57806376e1fbb2146104bb5780637d072252146104f857806380a0f2c21461052157610221565b80634c2b1e2e1461039b5780635089e2c8146103c45780635a6a102a146103ef578063669025781461041857610221565b80633a52a796116101f45780633a52a796146102e15780633abae6e51461030a5780633eab5fba146103355780634b17e3bb1461037257610221565b806305282c70146102265780630ec991c21461024f5780632817fe6a1461027a5780632d23c39e146102a3575b600080fd5b34801561023257600080fd5b5061024d600480360361024891908101906130d5565b6108e7565b005b34801561025b57600080fd5b50610264610a21565b60405161027191906139b9565b60405180910390f35b34801561028657600080fd5b506102a1600480360361029c91908101906134c4565b610a47565b005b3480156102af57600080fd5b506102ca60048036036102c59190810190613674565b610aaa565b6040516102d89291906139d4565b60405180910390f35b3480156102ed57600080fd5b5061030860048036036103039190810190613334565b610bd0565b005b34801561031657600080fd5b5061031f610c69565b60405161032c9190613b73565b60405180910390f35b34801561034157600080fd5b5061035c600480360361035791908101906130d5565b610c7a565b6040516103699190613a71565b60405180910390f35b34801561037e57600080fd5b50610399600480360361039491908101906134c4565b610d5e565b005b3480156103a757600080fd5b506103c260048036036103bd9190810190613500565b610db7565b005b3480156103d057600080fd5b506103d9610e1d565b6040516103e691906139b9565b60405180910390f35b3480156103fb57600080fd5b50610416600480360361041191908101906131f5565b610e43565b005b34801561042457600080fd5b5061043f600480360361043a9190810190613275565b610f1e565b60405161044c9190613a34565b60405180910390f35b34801561046157600080fd5b5061047c600480360361047791908101906133bd565b610fd0565b005b34801561048a57600080fd5b506104a560048036036104a091908101906130d5565b61105d565b6040516104b29190613b73565b60405180910390f35b3480156104c757600080fd5b506104e260048036036104dd91908101906132dc565b6110ac565b6040516104ef9190613b73565b60405180910390f35b34801561050457600080fd5b5061051f600480360361051a91908101906132dc565b61112e565b005b34801561052d57600080fd5b506105486004803603610543919081019061313a565b61123a565b005b34801561055657600080fd5b50610571600480360361056c91908101906130d5565b6112de565b005b34801561057f57600080fd5b5061059a6004803603610595919081019061360a565b611388565b005b3480156105a857600080fd5b506105c360048036036105be91908101906130d5565b611504565b005b3480156105d157600080fd5b506105ec60048036036105e79190810190613429565b611666565b005b3480156105fa57600080fd5b50610615600480360361061091908101906132dc565b61183d565b005b34801561062357600080fd5b5061063e600480360361063991908101906132dc565b61189f565b60405161064b9190613a34565b60405180910390f35b34801561066057600080fd5b5061067b600480360361067691908101906130d5565b611921565b6040516106889190613b73565b60405180910390f35b34801561069d57600080fd5b506106b860048036036106b391908101906135bb565b611974565b6040516106c6929190613a04565b60405180910390f35b3480156106db57600080fd5b506106f660048036036106f191908101906132dc565b611ba0565b6040516107039190613a71565b60405180910390f35b34801561071857600080fd5b50610721611cbb565b005b34801561072f57600080fd5b5061074a600480360361074591908101906130d5565b611d4f565b6040516107579190613a34565b60405180910390f35b34801561076c57600080fd5b50610775611da0565b6040516107829190613a4f565b60405180910390f35b34801561079757600080fd5b506107b260048036036107ad91908101906130fe565b611e3e565b6040516107bf9190613a34565b60405180910390f35b3480156107d457600080fd5b506107ef60048036036107ea91908101906130d5565b611ed2565b6040516107fc9190613b73565b60405180910390f35b34801561081157600080fd5b5061082c60048036036108279190810190613189565b611f21565b6040516108399190613a34565b60405180910390f35b34801561084e5760",
    "0080fd5b50610869600480360361086491908101906130d5565b611fa5565b6040516108769190613b73565b60405180910390f35b34801561088b57600080fd5b506108a660048036036108a1919081019061354f565b611ff8565b005b3480156108b457600080fd5b506108cf60048036036108ca91908101906132dc565b61214d565b6040516108de93929190613b8e565b60405180910390f35b6108ef611cbb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610961576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161095890613af3565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a52600354611388565b610aa681600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000161228490919063ffffffff16565b5050565b60606000610ab6612caf565b610aca610ac360056122e3565b86866122f8565b90506000610afc8260600151610aee6001856080015161244890919063ffffffff16565b61249290919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015610b335781602001602082028038833980820191505090505b50905060008090505b8360400151811015610bb557610b5e818401600561250690919063ffffffff16565b8282815181101515610b6c57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610b3c565b50808360200151846080015114945094505050509250929050565b610bdb600354611388565b60008484604051808383808284378083019250505092505050604051809103902090508282600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206003019190610c60929190612cdf565b50505050505050565b6000610c7560056122e3565b905090565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d525780601f10610d2757610100808354040283529160200191610d52565b820191906000526020600020905b815481529060010190602001808311610d3557829003601f168201915b50505050509050919050565b610d69600354611388565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600101819055505050565b610dc2600354611388565b610e188282600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016125219092919063ffffffff16565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e4e600354611388565b600083836040518083838082843780830192505050925050506040518091039020905081600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff021916908315150217905550505050505050565b60008082805190602001209050600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff169150509392505050565b610fdb600354611388565b600083836040518083838082843780830192505050925050506040518091039020905081600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600201819055505050505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600101549050919050565b600080838360405180838380828437808301925050509250505060405180910390209050600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020600201549150509392505050565b611139600354611388565b6000828260405180838380828437808301925050509250505060405180910390209050600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020600080820160006111bd9190612d5f565b600182016000905560028201600090556003820160006111dd9190612d5f565b505061123381600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016125ab90919063ffffffff16565b5050505050565b611245600354611388565b80600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6112e9600354611388565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600080820160009055600182016000905550506002820160008082016000808201600061135a9190612da7565b5050505060048201600061136e9190612d5f565b50506113848160056125c290919063ffffffff16565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114bd6040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114a95780601f1061147e576101008083540402835291602001916114a9565b820191906000526020600020905b81548152906001019060200180831161148c57829003601f168201915b50505050506125f29092919063ffffffff16565b901515611500576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016114f79190613a71565b60405180910390fd5b5050565b61150c611cbb565b611515816126c7565b6040805190810160405280600781526020017f53746f726167650000000000000000000000000000000000000000000000000081525060009080519060200190611560929190612dc8565b5061162a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c22931696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156115e857600080fd5b505afa1580156115fc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506116259190810190613633565b612801565b60038190555060006003541415611663577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b611671600354611388565b600085856040518083838082843780830192505050925050506040518091039020905060806040519081016040528087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200142815260200185815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060008201518160000190805190602001906117aa929190612e48565b50602082015181600101556040820151816002015560608201518160030190805190602001906117db929190612e48565b5090505061183381600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020161281490919063ffffffff16565b5050505050505050565b611848600354611388565b8181",
    "600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004019190611899929190612cdf565b50505050565b60008083836040518083838082843780830192505050925050506040518091039020905061191781600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020161282b90919063ffffffff16565b9150509392505050565b600061196d600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001612842565b9050919050565b6060600080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190506119c5612caf565b6119d86119d183612880565b87876122f8565b90506000611a0a82606001516119fc6001856080015161244890919063ffffffff16565b61249290919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015611a4657816020015b6060815260200190600190039081611a315790505b50905060008090505b8360400151811015611b8357600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000611ab18386018861289590919063ffffffff16565b81526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b565780601f10611b2b57610100808354040283529160200191611b56565b820191906000526020600020905b815481529060010190602001808311611b3957829003601f168201915b50505050508282815181101515611b6957fe5b906020019060200201819052508080600101915050611a4f565b508083608001518460200151149550955050505050935093915050565b60606000838360405180838380828437808301925050509250505060405180910390209050600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cac5780601f10611c8157610100808354040283529160200191611cac565b820191906000526020600020905b815481529060010190602001808311611c8f57829003601f168201915b50505050509150509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d4d576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611d4490613b33565b60405180910390fd5b565b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160010154119050919050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e365780601f10611e0b57610100808354040283529160200191611e36565b820191906000526020600020905b815481529060010190602001808311611e1957829003601f168201915b505050505081565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600001549050919050565b6000611f2d8585611e3e565b15611f3b5760019050611f9d565b611f8a858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610f1e565b15611f985760019050611f9d565b600090505b949350505050565b6000611ff1600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612880565b9050919050565b612003600354611388565b61200b612ec8565b60606040519081016040528060408051908101604052806000815260200187815250815260200182815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160008201518160000155602082015181600101555050602082015181600201600082015181600001600082015181600001908051906020019061210c929190612ee2565b5050505050604082015181600401908051906020019061212d929190612e48565b509050506121458560056128ac90919063ffffffff16565b505050505050565b600080606060008585604051808383808284378083019250505092505050604051809103902090506000600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002090508060010154816002015482600301808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561226c5780601f106122415761010080835404028352916020019161226c565b820191906000526020600020905b81548152906001019060200180831161224f57829003601f168201915b50505050509050945094509450505093509350939050565b816000015481111515156122cd576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016122c490613b53565b60405180910390fd5b8082600001600082825403925050819055505050565b60006122f1826000016128dc565b9050919050565b612300612caf565b612308612caf565b60a0604051908101604052808681526020016000815260200160008152602001600081526020016001815250905060008514806123455750600084145b156123535780915050612441565b603284116123615783612364565b60325b81606001818152505080606001518160400181815250506123928160600151866128ed90919063ffffffff16565b81602001818152505060006123b482606001518761293790919063ffffffff16565b905060008111156123e1576123d76001836020015161298190919063ffffffff16565b8260200181815250505b60018411156123f557838260800181815250505b8160200151826080015111156124145781602001518260800181815250505b8160200151826080015114801561242b5750600081115b1561243b57808260400181815250505b81925050505b9392505050565b600061248a83836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506129d8565b905092915050565b6000808314156124a55760009050612500565b600082840290508284828115156124b857fe5b041415156124fb576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016124f290613a93565b60405180910390fd5b809150505b92915050565b60006125158360000183612a35565b60019004905092915050565b801561258757826001015461254383856000015461298190919063ffffffff16565b11151515612586576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161257d90613ab3565b60405180910390fd5b5b61259e82846000015461298190919063ffffffff16565b8360000181905550505050565b60006125ba8360000183612a5b565b905092915050565b60006125ea836000018373ffffffffffffffffffffffffffffffffffffffff16600102612a5b565b905092915050565b60608383836040516020018084805190602001908083835b60208310151561262f578051825260208201915060208101905060208303925061260a565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515612682578051825260208201915060208101905060208303925061265d565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b6126cf611cbb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612741576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161273890613b13565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b60006128238360000183612b52565b905092915050565b600061283a8360000183612bc7565b905092915050565b6000816001015482",
    "",
    "0000000000006040830152606082019050919050565b6000601d82527f53534d3a7573655370616365207370616365206e6f7420656e6f7567680000006020830152604082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000601d82527f6e6577206f776e657220697320746865207a65726f20616464726573730000006020830152604082019050919050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b6000601982527f53534d3a667265655370616365206f7574206f662075736564000000000000006020830152604082019050919050565b6139b381613cc3565b82525050565b60006020820190506139ce60008301846136b0565b92915050565b600060408201905081810360008301526139ee81856136bf565b90506139fd6020830184613788565b9392505050565b60006040820190508181036000830152613a1e818561371a565b9050613a2d6020830184613788565b9392505050565b6000602082019050613a496000830184613788565b92915050565b60006020820190508181036000830152613a6981846137cd565b905092915050565b60006020820190508181036000830152613a8b8184613797565b905092915050565b60006020820190508181036000830152613aac81613803565b9050919050565b60006020820190508181036000830152613acc81613860565b9050919050565b60006020820190508181036000830152613aec81613897565b9050919050565b60006020820190508181036000830152613b0c816138ce565b9050919050565b60006020820190508181036000830152613b2c81613905565b9050919050565b60006020820190508181036000830152613b4c8161393c565b9050919050565b60006020820190508181036000830152613b6c81613973565b9050919050565b6000602082019050613b8860008301846139aa565b92915050565b6000606082019050613ba360008301866139aa565b613bb060208301856139aa565b8181036040830152613bc28184613797565b9050949350505050565b6000604051905081810181811067ffffffffffffffff82111715613bef57600080fd5b8060405250919050565b600067ffffffffffffffff821115613c1057600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000613c9082613ca3565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613cd882613ca3565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613d2c578082015181840152602081019050613d11565b83811115613d3b576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058200add21072bade576c5491e8de8ed63f76453237363c85f05ed1a6f48729f0aca6c6578706572696d656e74616cf50037"
  };

  public static final String SM_BINARY =
      org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

  public static final String[] ABI_ARRAY = {
    "[{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getFileInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approveAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getStorageUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"isApproveFile\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"fileExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"deleteUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"storageTotal\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"newUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"isApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getStorageTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setFileExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"setStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approveFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setFileDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"isApproveAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getFileExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"freeStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"checkSpaceEnough\",\"type\":\"bool\"}],\"name\":\"useStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getFiles\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getFileDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getFileCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"availableSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getAllUserAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"
  };

  public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

  public static final String FUNC_GETFILEINFO = "getFileInfo";

  public static final String FUNC_APPROVEACCOUNT = "approveAccount";

  public static final String FUNC_DELETEFILE = "deleteFile";

  public static final String FUNC_SETOWNER = "setOwner";

  public static final String FUNC_MUSTOWNER = "mustOwner";

  public static final String FUNC_GETSTORAGEUSED = "getStorageUsed";

  public static final String FUNC_ISAPPROVEFILE = "isApproveFile";

  public static final String FUNC_FILEEXIST = "fileExist";

  public static final String FUNC_MANAGER = "manager";

  public static final String FUNC_EXIST = "exist";

  public static final String FUNC_DELETEUSER = "deleteUser";

  public static final String FUNC_NEWUSER = "newUser";

  public static final String FUNC_ISAPPROVE = "isApprove";

  public static final String FUNC_CONTRACTNAME = "contractName";

  public static final String FUNC_GETSTORAGETOTAL = "getStorageTotal";

  public static final String FUNC_OWNER = "owner";

  public static final String FUNC_SETFILEEXT = "setFileExt";

  public static final String FUNC_SETEXT = "setExt";

  public static final String FUNC_SETSTORAGETOTAL = "setStorageTotal";

  public static final String FUNC_APPROVEFILE = "approveFile";

  public static final String FUNC_SETFILEDURATION = "setFileDuration";

  public static final String FUNC_GETUSERCOUNT = "getUserCount";

  public static final String FUNC_ADDFILE = "addFile";

  public static final String FUNC_ISAPPROVEACCOUNT = "isApproveAccount";

  public static final String FUNC_MUSTMANAGER = "mustManager";

  public static final String FUNC_SETMANAGER = "setManager";

  public static final String FUNC_GETEXT = "getExt";

  public static final String FUNC_GETFILEEXT = "getFileExt";

  public static final String FUNC_FREESTORAGE = "freeStorage";

  public static final String FUNC_USESTORAGE = "useStorage";

  public static final String FUNC_GETFILES = "getFiles";

  public static final String FUNC_GETFILEDURATION = "getFileDuration";

  public static final String FUNC_GETFILECOUNT = "getFileCount";

  public static final String FUNC_AVAILABLESPACE = "availableSpace";

  public static final String FUNC_GETALLUSERADDRESSES = "getAllUserAddresses";

  public static final Event OWNERCHANGED_EVENT =
      new Event(
          "OwnerChanged",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
  ;

  public static final Event MANAGERCHANGED_EVENT =
      new Event(
          "ManagerChanged",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
  ;

  protected UserStorage(String contractAddress, Client client, CryptoKeyPair credential) {
    super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
  }

  public static String getBinary(CryptoSuite cryptoSuite) {
    return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
  }

  public Tuple3<BigInteger, BigInteger, String> getFileInfo(String userAddress, String cid)
      throws ContractException {
    final Function function =
        new Function(
            FUNC_GETFILEINFO,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Uint256>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Utf8String>() {}));
    List<Type> results = executeCallWithMultipleValueReturn(function);
    return new Tuple3<BigInteger, BigInteger, String>(
        (BigInteger) results.get(0).getValue(),
        (BigInteger) results.get(1).getValue(),
        (String) results.get(2).getValue());
  }

  public TransactionReceipt approveAccount(String from, String to, Boolean approved) {
    final Function function =
        new Function(
            FUNC_APPROVEACCOUNT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(from),
                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] approveAccount(
      String from, String to, Boolean approved, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_APPROVEACCOUNT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(from),
                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForApproveAccount(String from, String to, Boolean approved) {
    final Function function =
        new Function(
            FUNC_APPROVEACCOUNT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(from),
                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple3<String, String, Boolean> getApproveAccountInput(
      TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_APPROVEACCOUNT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {},
                new TypeReference<Address>() {},
                new TypeReference<Bool>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple3<String, String, Boolean>(
        (String) results.get(0).getValue(),
        (String) results.get(1).getValue(),
        (Boolean) results.get(2).getValue());
  }

  public TransactionReceipt deleteFile(String userAddress, String cid) {
    final Function function =
        new Function(
            FUNC_DELETEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] deleteFile(String userAddress, String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_DELETEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForDeleteFile(String userAddress, String cid) {
    final Function function =
        new Function(
            FUNC_DELETEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, String> getDeleteFileInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_DELETEFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, String>(
        (String) results.get(0).getValue(), (String) results.get(1).getValue());
  }

  public TransactionReceipt setOwner(String _owner) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setOwner(String _owner, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetOwner(String _owner) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt mustOwner() {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustOwner(TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustOwner() {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public BigInteger getStorageUsed(String userAddress) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETSTORAGEUSED,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public Boolean isApproveFile(String from, String to, String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_ISAPPROVEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(from),
                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeCallWithSingleValueReturn(function, Boolean.class);
  }

  public Boolean fileExist(String userAddress, String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_FILEEXIST,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeCallWithSingleValueReturn(function, Boolean.class);
  }

  public String manager() throws ContractException {
    final Function function =
        new Function(
            FUNC_MANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public Boolean exist(String userAddress) throws ContractException {
    final Function function =
        new Function(
            FUNC_EXIST,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeCallWithSingleValueReturn(function, Boolean.class);
  }

  public TransactionReceipt deleteUser(String userAddress) {
    final Function function =
        new Function(
            FUNC_DELETEUSER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] deleteUser(String userAddress, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_DELETEUSER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForDeleteUser(String userAddress) {
    final Function function =
        new Function(
            FUNC_DELETEUSER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getDeleteUserInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_DELETEUSER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt newUser(String userAddress, BigInteger storageTotal, String ext) {
    final Function function =
        new Function(
            FUNC_NEWUSER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] newUser(
      String userAddress, BigInteger storageTotal, String ext, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NEWUSER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNewUser(
      String userAddress, BigInteger storageTotal, String ext) {
    final Function function =
        new Function(
            FUNC_NEWUSER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple3<String, BigInteger, String> getNewUserInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NEWUSER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple3<String, BigInteger, String>(
        (String) results.get(0).getValue(),
        (BigInteger) results.get(1).getValue(),
        (String) results.get(2).getValue());
  }

  public Boolean isApprove(String from, String to, String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_ISAPPROVE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(from),
                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeCallWithSingleValueReturn(function, Boolean.class);
  }

  public String contractName() throws ContractException {
    final Function function =
        new Function(
            FUNC_CONTRACTNAME,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public BigInteger getStorageTotal(String userAddress) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETSTORAGETOTAL,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public String owner() throws ContractException {
    final Function function =
        new Function(
            FUNC_OWNER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt setFileExt(String userAddress, String cid, String ext) {
    final Function function =
        new Function(
            FUNC_SETFILEEXT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setFileExt(
      String userAddress, String cid, String ext, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETFILEEXT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetFileExt(String userAddress, String cid, String ext) {
    final Function function =
        new Function(
            FUNC_SETFILEEXT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple3<String, String, String> getSetFileExtInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETFILEEXT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {},
                new TypeReference<Utf8String>() {},
                new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple3<String, String, String>(
        (String) results.get(0).getValue(),
        (String) results.get(1).getValue(),
        (String) results.get(2).getValue());
  }

  public TransactionReceipt setExt(String userAddress, String ext) {
    final Function function =
        new Function(
            FUNC_SETEXT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setExt(String userAddress, String ext, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETEXT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetExt(String userAddress, String ext) {
    final Function function =
        new Function(
            FUNC_SETEXT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETEXT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, String>(
        (String) results.get(0).getValue(), (String) results.get(1).getValue());
  }

  public TransactionReceipt setStorageTotal(String userAddress, BigInteger size) {
    final Function function =
        new Function(
            FUNC_SETSTORAGETOTAL,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setStorageTotal(String userAddress, BigInteger size, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETSTORAGETOTAL,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetStorageTotal(String userAddress, BigInteger size) {
    final Function function =
        new Function(
            FUNC_SETSTORAGETOTAL,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, BigInteger> getSetStorageTotalInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETSTORAGETOTAL,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, BigInteger>(
        (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
  }

  public TransactionReceipt approveFile(String from, String to, String cid, Boolean approved) {
    final Function function =
        new Function(
            FUNC_APPROVEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(from),
                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] approveFile(
      String from, String to, String cid, Boolean approved, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_APPROVEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(from),
                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForApproveFile(
      String from, String to, String cid, Boolean approved) {
    final Function function =
        new Function(
            FUNC_APPROVEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(from),
                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple4<String, String, String, Boolean> getApproveFileInput(
      TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_APPROVEFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {},
                new TypeReference<Address>() {},
                new TypeReference<Utf8String>() {},
                new TypeReference<Bool>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple4<String, String, String, Boolean>(
        (String) results.get(0).getValue(),
        (String) results.get(1).getValue(),
        (String) results.get(2).getValue(),
        (Boolean) results.get(3).getValue());
  }

  public TransactionReceipt setFileDuration(String userAddress, String cid, BigInteger duration) {
    final Function function =
        new Function(
            FUNC_SETFILEDURATION,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setFileDuration(
      String userAddress, String cid, BigInteger duration, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETFILEDURATION,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetFileDuration(
      String userAddress, String cid, BigInteger duration) {
    final Function function =
        new Function(
            FUNC_SETFILEDURATION,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple3<String, String, BigInteger> getSetFileDurationInput(
      TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETFILEDURATION,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {},
                new TypeReference<Utf8String>() {},
                new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple3<String, String, BigInteger>(
        (String) results.get(0).getValue(),
        (String) results.get(1).getValue(),
        (BigInteger) results.get(2).getValue());
  }

  public BigInteger getUserCount() throws ContractException {
    final Function function =
        new Function(
            FUNC_GETUSERCOUNT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public TransactionReceipt addFile(
      String userAddress, String cid, BigInteger duration, String ext) {
    final Function function =
        new Function(
            FUNC_ADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] addFile(
      String userAddress,
      String cid,
      BigInteger duration,
      String ext,
      TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_ADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForAddFile(
      String userAddress, String cid, BigInteger duration, String ext) {
    final Function function =
        new Function(
            FUNC_ADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple4<String, String, BigInteger, String> getAddFileInput(
      TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_ADDFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {},
                new TypeReference<Utf8String>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple4<String, String, BigInteger, String>(
        (String) results.get(0).getValue(),
        (String) results.get(1).getValue(),
        (BigInteger) results.get(2).getValue(),
        (String) results.get(3).getValue());
  }

  public Boolean isApproveAccount(String from, String to) throws ContractException {
    final Function function =
        new Function(
            FUNC_ISAPPROVEACCOUNT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(from),
                new org.fisco.bcos.sdk.abi.datatypes.Address(to)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeCallWithSingleValueReturn(function, Boolean.class);
  }

  public TransactionReceipt mustManager(byte[] managerName) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustManager(byte[] managerName) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
  }

  public TransactionReceipt setManager(String _manager) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setManager(String _manager, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetManager(String _manager) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public String getExt(String userAddress) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETEXT,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public String getFileExt(String userAddress, String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETFILEEXT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt freeStorage(String userAddress, BigInteger size) {
    final Function function =
        new Function(
            FUNC_FREESTORAGE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] freeStorage(String userAddress, BigInteger size, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_FREESTORAGE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForFreeStorage(String userAddress, BigInteger size) {
    final Function function =
        new Function(
            FUNC_FREESTORAGE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, BigInteger> getFreeStorageInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_FREESTORAGE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, BigInteger>(
        (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
  }

  public TransactionReceipt useStorage(
      String userAddress, BigInteger size, Boolean checkSpaceEnough) {
    final Function function =
        new Function(
            FUNC_USESTORAGE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(checkSpaceEnough)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] useStorage(
      String userAddress, BigInteger size, Boolean checkSpaceEnough, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_USESTORAGE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(checkSpaceEnough)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForUseStorage(
      String userAddress, BigInteger size, Boolean checkSpaceEnough) {
    final Function function =
        new Function(
            FUNC_USESTORAGE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(checkSpaceEnough)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple3<String, BigInteger, Boolean> getUseStorageInput(
      TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_USESTORAGE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Bool>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple3<String, BigInteger, Boolean>(
        (String) results.get(0).getValue(),
        (BigInteger) results.get(1).getValue(),
        (Boolean) results.get(2).getValue());
  }

  public Tuple2<List<String>, Boolean> getFiles(
      String userAddress, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETFILES,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<Bool>() {}));
    List<Type> results = executeCallWithMultipleValueReturn(function);
    return new Tuple2<List<String>, Boolean>(
        convertToNative((List<Utf8String>) results.get(0).getValue()),
        (Boolean) results.get(1).getValue());
  }

  public BigInteger getFileDuration(String userAddress, String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETFILEDURATION,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public BigInteger getFileCount(String userAddress) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETFILECOUNT,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public BigInteger availableSpace(String userAddress) throws ContractException {
    final Function function =
        new Function(
            FUNC_AVAILABLESPACE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public Tuple2<List<String>, Boolean> getAllUserAddresses(
      BigInteger pageSize, BigInteger pageNumber) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETALLUSERADDRESSES,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
    List<Type> results = executeCallWithMultipleValueReturn(function);
    return new Tuple2<List<String>, Boolean>(
        convertToNative((List<Address>) results.get(0).getValue()),
        (Boolean) results.get(1).getValue());
  }

  public List<OwnerChangedEventResponse> getOwnerChangedEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
    ArrayList<OwnerChangedEventResponse> responses =
        new ArrayList<OwnerChangedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeOwnerChangedEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeOwnerChangedEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public List<ManagerChangedEventResponse> getManagerChangedEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
    ArrayList<ManagerChangedEventResponse> responses =
        new ArrayList<ManagerChangedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeManagerChangedEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeManagerChangedEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public static UserStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
    return new UserStorage(contractAddress, client, credential);
  }

  public static UserStorage deploy(Client client, CryptoKeyPair credential, String _manager)
      throws ContractException {
    String encodedConstructor =
        FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)));
    return deploy(
        UserStorage.class,
        client,
        credential,
        getBinary(client.getCryptoSuite()),
        encodedConstructor);
  }

  public static class OwnerChangedEventResponse {
    public TransactionReceipt.Logs log;

    public String previousValue;

    public String newValue;
  }

  public static class ManagerChangedEventResponse {
    public TransactionReceipt.Logs log;

    public String previousValue;

    public String newValue;
  }
}
