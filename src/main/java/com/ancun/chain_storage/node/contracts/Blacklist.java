package com.ancun.chain_storage.node.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Blacklist extends Contract {
  public static final String[] BINARY_ARRAY = {
    "",
    "60600151610d1a6001856080015161205290919063ffffffff16565b61209c90919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015610d5f5781602001602082028038833980820191505090505b50905060008090505b8360400151811015610de157610d8a818401600a61212690919063ffffffff16565b8282815181101515610d9857fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610d68565b50808360800151846020015114945094505050509250929050565b610e257f41646d696e0000000000000000000000000000000000000000000000000000006113a1565b6000828260405180838380828437808301925050509250505060405180910390209050610e5c81600661214190919063ffffffff16565b50505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610e946006612158565b905090565b60606004805480602002602001604051908101604052809291908181526020018280548015610ee757602002820191906000526020600020905b815481526020019060010190808311610ed3575b5050505050905090565b610ef961105e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610f9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611123576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b600061113b82600861216d90919063ffffffff16565b159050919050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6111a97f41646d696e0000000000000000000000000000000000000000000000000000006113a1565b6111bd81600a61219d90919063ffffffff16565b5050565b6000808383604051808383808284378083019250505092505050604051809103902090506111f98160066121cd90919063ffffffff16565b1591505092915050565b600061120f600a611eed565b905090565b61123d7f41646d696e0000000000000000000000000000000000000000000000000000006113a1565b6112518160086121e490919063ffffffff16565b5050565b6060600061126161284c565b61127561126e6008611eed565b8686611f02565b905060006112a782606001516112996001856080015161205290919063ffffffff16565b61209c90919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156112de5781602001602082028038833980820191505090505b50905060008090505b836040015181101561136057611309818401600861212690919063ffffffff16565b828281518110151561131757fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506112e7565b50808360800151846020015114945094505050509250929050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f77726f6e672063616c6c6572000000000000000000000000000000000000000081525060200191505060405180910390fd5b50565b6114a37f41646d696e0000000000000000000000000000000000000000000000000000006113a1565b6114b781600861219d90919063ffffffff16565b5050565b606060006114c761284c565b6114db6114d46006612158565b8686611f02565b9050600061150d82606001516114ff6001856080015161205290919063ffffffff16565b61209c90919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156115445781602001602082028038833980820191505090505b50905060008090505b83604001518110156115985761156f818401600661221490919063ffffffff16565b828281518110151561157d57fe5b9060200190602002018181525050808060010191505061154d565b50808360800151846020015114945094505050509250929050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116495780601f1061161e57610100808354040283529160200191611649565b820191906000526020600020905b81548152906001019060200180831161162c57829003601f168201915b505050505081565b61167a7f41646d696e0000000000000000000000000000000000000000000000000000006113a1565b60008282604051808383808284378083019250505092505050604051809103902090506116b181600661222b90919063ffffffff16565b50505050565b6116bf61105e565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561174e57600080fd5b505afa158015611762573d6000803e3d6000fd5b505050506040513d602081101561177857600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6118587f41646d696e0000000000000000000000000000000000000000000000000000006113a1565b61186c81600a6121e490919063ffffffff16565b5050565b600061188682600a61216d90919063ffffffff16565b159050919050565b600061189a6008611eed565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119d46040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119c05780601f10611995576101008083540402835291602001916119c0565b820191906000526020600020905b8154815290600101906020018083116119a357829003601f168201915b50505050506122429092919063ffffffff16565b901515611a7c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611a41578082015181840152602081019050611a26565b50505050905090810190601f168015611a6e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b60148151101515611af9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f63616e6e6f742068617665206d6f7265207468616e203230206974656d73000081525060200191505060405180910390fd5b600080905060008090505b8251811015611ba157600560008483815181101515611b1f57fe5b90602001906020020151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611b945760019150611ba1565b8080600101915050611b04565b50801515611c17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f63616c6c6572206973206e6f7420696e20636f6e7461696e730000000000000081525060200191505060405180910390fd5b5050565b611c2361105e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611cc8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffff",
    "ffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611d9061105e565b60008090505b600480549050811015611eea576000600482815481101515611db457fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611e5057600080fd5b505afa158015611e64573d6000803e3d6000fd5b505050506040513d6020811015611e7a57600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050611d96565b50565b6000611efb82600001612317565b9050919050565b611f0a61284c565b611f1261284c565b60a060405190810160405280868152602001600081526020016000815260200160008152602001600181525090506000851480611f4f5750600084145b15611f5d578091505061204b565b60328411611f6b5783611f6e565b60325b8160600181815250508060600151816040018181525050611f9c81606001518661232890919063ffffffff16565b8160200181815250506000611fbe82606001518761237290919063ffffffff16565b90506000811115611feb57611fe1600183602001516123bc90919063ffffffff16565b8260200181815250505b6001841115611fff57838260800181815250505b81602001518260800151111561201e5781602001518260800181815250505b816020015182608001511480156120355750600081115b1561204557808260400181815250505b81925050505b9392505050565b600061209483836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612446565b905092915050565b6000808314156120af5760009050612120565b600082840290508284828115156120c257fe5b0414151561211b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061287d6021913960400191505060405180910390fd5b809150505b92915050565b60006121358360000183612508565b60019004905092915050565b6000612150836000018361252e565b905092915050565b600061216682600001612317565b9050919050565b6000612195836000018373ffffffffffffffffffffffffffffffffffffffff16600102612625565b905092915050565b60006121c5836000018373ffffffffffffffffffffffffffffffffffffffff1660010261252e565b905092915050565b60006121dc8360000183612625565b905092915050565b600061220c836000018373ffffffffffffffffffffffffffffffffffffffff16600102612648565b905092915050565b60006122238360000183612508565b905092915050565b600061223a8360000183612648565b905092915050565b60608383836040516020018084805190602001908083835b60208310151561227f578051825260208201915060208101905060208303925061225a565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b6020831015156122d257805182526020820191506020810190506020830392506122ad565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b600081600001805490509050919050565b600061236a83836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506126bd565b905092915050565b60006123b483836040805190810160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250612787565b905092915050565b600080828401905083811015151561243c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600083831115829015156124f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124ba57808201518184015260208101905061249f565b50505050905090810190601f1680156124e75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6000826000018281548110151561251b57fe5b9060005260206000200154905092915050565b60008083600101600084815260200190815260200160002054905060008114151561261957600060018203905060006001866000018054905003905081811415156125cf576000866000018281548110151561258657fe5b906000526020600020015490508087600001848154811015156125a557fe5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548015156125de57fe5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061261f565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b60006126548383612625565b15156126b25782600001829080600181540180825580915050906001820390600052602060002001600090919290919091505550826000018054905083600101600084815260200190815260200160002081905550600190506126b7565b600090505b92915050565b60008083118290151561276b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612730578082015181840152602081019050612715565b50505050905090810190601f16801561275d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581151561277957fe5b049050809150509392505050565b60008083141582901515612836576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156127fb5780820151818401526020810190506127e0565b50505050905090810190601f1680156128285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50828481151561284257fe5b0690509392505050565b60a0604051908101604052806000815260200160008152602001600081526020016000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a72305820afa29973332f8f5761540d90cee6ddc3bcf4822df8341eedb75bba96065633b80029"
  };

  public static final String BINARY =
      org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

  public static final String[] SM_BINARY_ARRAY = {
    "",
    "ffffffffffffffffffffffffffff1614151515610d83576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606004805480602002602001604051908101604052809291908181526020018280548015610eb757602002820191906000526020600020905b815481526020019060010190808311610ea3575b5050505050905090565b6000610ecd6008611eed565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610f04600a611eed565b905090565b610f327f41646d696e00000000000000000000000000000000000000000000000000000061159a565b610f4681600a611f0290919063ffffffff16565b5050565b60606000610f5661284c565b610f6a610f636006611f32565b8686611f47565b90506000610f9c8260600151610f8e6001856080015161209790919063ffffffff16565b6120e190919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015610fd35781602001602082028038833980820191505090505b50905060008090505b836040015181101561102757610ffe818401600661216b90919063ffffffff16565b828281518110151561100c57fe5b90602001906020020181815250508080600101915050610fdc565b50808360800151846020015114945094505050509250929050565b61104a6118dd565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d602081101561110357600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b6111bd7f41646d696e00000000000000000000000000000000000000000000000000000061159a565b6111d1816008611f0290919063ffffffff16565b5050565b60006111e16006611f32565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461131b6040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113075780601f106112dc57610100808354040283529160200191611307565b820191906000526020600020905b8154815290600101906020018083116112ea57829003601f168201915b50505050506121829092919063ffffffff16565b9015156113c3576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561138857808201518184015260208101905061136d565b50505050905090810190601f1680156113b55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b6113cf6118dd565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611474576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61155d7f41646d696e00000000000000000000000000000000000000000000000000000061159a565b600082826040518083838082843780830192505050925050506040518091039020905061159481600661225790919063ffffffff16565b50505050565b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611670576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f77726f6e672063616c6c6572000000000000000000000000000000000000000081525060200191505060405180910390fd5b50565b6060600061167f61284c565b61169361168c6008611eed565b8686611f47565b905060006116c582606001516116b76001856080015161209790919063ffffffff16565b6120e190919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156116fc5781602001602082028038833980820191505090505b50905060008090505b836040015181101561177e57611727818401600861226e90919063ffffffff16565b828281518110151561173557fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050611705565b50808360800151846020015114945094505050509250929050565b606060006117a561284c565b6117b96117b2600a611eed565b8686611f47565b905060006117eb82606001516117dd6001856080015161209790919063ffffffff16565b6120e190919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156118225781602001602082028038833980820191505090505b50905060008090505b83604001518110156118a45761184d818401600a61226e90919063ffffffff16565b828281518110151561185b57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808060010191505061182b565b50808360800151846020015114945094505050509250929050565b60006118d582600861228990919063ffffffff16565b159050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119a2576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b60006119ba82600a61228990919063ffffffff16565b159050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611abb5780601f10611a9057610100808354040283529160200191611abb565b820191906000526020600020905b815481529060010190602001808311611a9e57829003601f168201915b505050505081565b600080838360405180838380828437808301925050509250505060405180910390209050611afb8160066122b990919063ffffffff16565b1591505092915050565b611b2e7f41646d696e00000000000000000000000000000000000000000000000000000061159a565b611b428160086122d090919063ffffffff16565b5050565b60148151101515611bbf576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f63616e6e6f742068617665206d6f7265207468616e203230206974656d73000081525060200191505060405180910390fd5b600080905060008090505b8251811015611c6757600560008483815181101515611be557fe5b90602001906020020151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611c5a5760019150611c67565b8080600101915050611bca565b50801515611cdd576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f63616c6c6572206973206e6f7420696e20636f6e7461696e730000000000000081525060200191505060405180910390fd5b5050565b611d0a7f41646d696e0000000000000000000000000000000000000000",
    "0000000000000061159a565b611d1e81600a6122d090919063ffffffff16565b5050565b611d2a6118dd565b60008090505b600480549050811015611e84576000600482815481101515611d4e57fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611dea57600080fd5b505afa158015611dfe573d6000803e3d6000fd5b505050506040513d6020811015611e1457600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050611d30565b50565b611eb07f41646d696e00000000000000000000000000000000000000000000000000000061159a565b6000828260405180838380828437808301925050509250505060405180910390209050611ee781600661230090919063ffffffff16565b50505050565b6000611efb82600001612317565b9050919050565b6000611f2a836000018373ffffffffffffffffffffffffffffffffffffffff16600102612328565b905092915050565b6000611f4082600001612317565b9050919050565b611f4f61284c565b611f5761284c565b60a060405190810160405280868152602001600081526020016000815260200160008152602001600181525090506000851480611f945750600084145b15611fa25780915050612090565b60328411611fb05783611fb3565b60325b8160600181815250508060600151816040018181525050611fe181606001518661241f90919063ffffffff16565b816020018181525050600061200382606001518761246990919063ffffffff16565b9050600081111561203057612026600183602001516124b390919063ffffffff16565b8260200181815250505b600184111561204457838260800181815250505b8160200151826080015111156120635781602001518260800181815250505b8160200151826080015114801561207a5750600081115b1561208a57808260400181815250505b81925050505b9392505050565b60006120d983836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061253d565b905092915050565b6000808314156120f45760009050612165565b6000828402905082848281151561210757fe5b04141515612160576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061287d6021913960400191505060405180910390fd5b809150505b92915050565b600061217a83600001836125ff565b905092915050565b60608383836040516020018084805190602001908083835b6020831015156121bf578051825260208201915060208101905060208303925061219a565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b60208310151561221257805182526020820191506020810190506020830392506121ed565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60006122668360000183612625565b905092915050565b600061227d83600001836125ff565b60019004905092915050565b60006122b1836000018373ffffffffffffffffffffffffffffffffffffffff1660010261269a565b905092915050565b60006122c8836000018361269a565b905092915050565b60006122f8836000018373ffffffffffffffffffffffffffffffffffffffff16600102612625565b905092915050565b600061230f8360000183612328565b905092915050565b600081600001805490509050919050565b60008083600101600084815260200190815260200160002054905060008114151561241357600060018203905060006001866000018054905003905081811415156123c9576000866000018281548110151561238057fe5b9060005260206000200154905080876000018481548110151561239f57fe5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548015156123d857fe5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612419565b60009150505b92915050565b600061246183836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506126bd565b905092915050565b60006124ab83836040805190810160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250612787565b905092915050565b6000808284019050838110151515612533576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600083831115829015156125ec576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156125b1578082015181840152602081019050612596565b50505050905090810190601f1680156125de5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6000826000018281548110151561261257fe5b9060005260206000200154905092915050565b6000612631838361269a565b151561268f578260000182908060018154018082558091505090600182039060005260206000200160009091929091909150555082600001805490508360010160008481526020019081526020016000208190555060019050612694565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b60008083118290151561276b576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612730578082015181840152602081019050612715565b50505050905090810190601f16801561275d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581151561277957fe5b049050809150509392505050565b60008083141582901515612836576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156127fb5780820151818401526020810190506127e0565b50505050905090810190601f1680156128285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50828481151561284257fe5b0690509392505050565b60a0604051908101604052806000815260200160008152602001600081526020016000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a723058208ac265f697fbbda98178e97c0fe48d547f5d170537356e3aa19972ea24c74d340029"
  };

  public static final String SM_BINARY =
      org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

  public static final String[] ABI_ARRAY = {
    "[{\"constant\":true,\"inputs\":[{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteCid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCidCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"checkUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"deleteNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"checkCid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNodeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"mustAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"deleteUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getCidHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"addCid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"checkNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"names\",\"type\":\"bytes32[]\"}],\"name\":\"mustContainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"
  };

  public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

  public static final String FUNC_GETNODES = "getNodes";

  public static final String FUNC_DELETECID = "deleteCid";

  public static final String FUNC_RESOLVER = "resolver";

  public static final String FUNC_GETCIDCOUNT = "getCidCount";

  public static final String FUNC_GETIMPORTS = "getImports";

  public static final String FUNC_SETOWNER = "setOwner";

  public static final String FUNC_MUSTOWNER = "mustOwner";

  public static final String FUNC_CHECKUSER = "checkUser";

  public static final String FUNC_GETADDRESS = "getAddress";

  public static final String FUNC_DELETENODE = "deleteNode";

  public static final String FUNC_CHECKCID = "checkCid";

  public static final String FUNC_GETNODECOUNT = "getNodeCount";

  public static final String FUNC_ADDUSER = "addUser";

  public static final String FUNC_GETUSERS = "getUsers";

  public static final String FUNC_MANAGER = "manager";

  public static final String FUNC_MUSTADDRESS = "mustAddress";

  public static final String FUNC_DELETEUSER = "deleteUser";

  public static final String FUNC_GETCIDHASHES = "getCidHashes";

  public static final String FUNC_CONTRACTNAME = "contractName";

  public static final String FUNC_ADDCID = "addCid";

  public static final String FUNC_ADDADDRESS = "addAddress";

  public static final String FUNC_OWNER = "owner";

  public static final String FUNC_ADDNODE = "addNode";

  public static final String FUNC_CHECKNODE = "checkNode";

  public static final String FUNC_GETUSERCOUNT = "getUserCount";

  public static final String FUNC_MUSTMANAGER = "mustManager";

  public static final String FUNC_MUSTCONTAINADDRESS = "mustContainAddress";

  public static final String FUNC_SETMANAGER = "setManager";

  public static final String FUNC_REFRESHCACHE = "refreshCache";

  public static final Event OWNERCHANGED_EVENT =
      new Event(
          "OwnerChanged",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
  ;

  public static final Event MANAGERCHANGED_EVENT =
      new Event(
          "ManagerChanged",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
  ;

  protected Blacklist(String contractAddress, Client client, CryptoKeyPair credential) {
    super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
  }

  public static String getBinary(CryptoSuite cryptoSuite) {
    return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
  }

  public Tuple2<List<String>, Boolean> getNodes(BigInteger pageSize, BigInteger pageNumber)
      throws ContractException {
    final Function function =
        new Function(
            FUNC_GETNODES,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
    List<Type> results = executeCallWithMultipleValueReturn(function);
    return new Tuple2<List<String>, Boolean>(
        convertToNative((List<Address>) results.get(0).getValue()),
        (Boolean) results.get(1).getValue());
  }

  public TransactionReceipt deleteCid(String cid) {
    final Function function =
        new Function(
            FUNC_DELETECID,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] deleteCid(String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_DELETECID,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForDeleteCid(String cid) {
    final Function function =
        new Function(
            FUNC_DELETECID,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getDeleteCidInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_DELETECID,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public String resolver() throws ContractException {
    final Function function =
        new Function(
            FUNC_RESOLVER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public BigInteger getCidCount() throws ContractException {
    final Function function =
        new Function(
            FUNC_GETCIDCOUNT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public List getImports() throws ContractException {
    final Function function =
        new Function(
            FUNC_GETIMPORTS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
    List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
    return convertToNative(result);
  }

  public TransactionReceipt setOwner(String _owner) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setOwner(String _owner, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetOwner(String _owner) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt mustOwner() {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustOwner(TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustOwner() {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Boolean checkUser(String userAddress) throws ContractException {
    final Function function =
        new Function(
            FUNC_CHECKUSER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeCallWithSingleValueReturn(function, Boolean.class);
  }

  public String getAddress(byte[] name) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt deleteNode(String nodeAddress) {
    final Function function =
        new Function(
            FUNC_DELETENODE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] deleteNode(String nodeAddress, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_DELETENODE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForDeleteNode(String nodeAddress) {
    final Function function =
        new Function(
            FUNC_DELETENODE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getDeleteNodeInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_DELETENODE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public Boolean checkCid(String cid) throws ContractException {
    final Function function =
        new Function(
            FUNC_CHECKCID,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeCallWithSingleValueReturn(function, Boolean.class);
  }

  public BigInteger getNodeCount() throws ContractException {
    final Function function =
        new Function(
            FUNC_GETNODECOUNT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public TransactionReceipt addUser(String userAddress) {
    final Function function =
        new Function(
            FUNC_ADDUSER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] addUser(String userAddress, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_ADDUSER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForAddUser(String userAddress) {
    final Function function =
        new Function(
            FUNC_ADDUSER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getAddUserInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_ADDUSER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public Tuple2<List<String>, Boolean> getUsers(BigInteger pageSize, BigInteger pageNumber)
      throws ContractException {
    final Function function =
        new Function(
            FUNC_GETUSERS,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
    List<Type> results = executeCallWithMultipleValueReturn(function);
    return new Tuple2<List<String>, Boolean>(
        convertToNative((List<Address>) results.get(0).getValue()),
        (Boolean) results.get(1).getValue());
  }

  public String manager() throws ContractException {
    final Function function =
        new Function(
            FUNC_MANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt mustAddress(byte[] name) {
    final Function function =
        new Function(
            FUNC_MUSTADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustAddress(byte[] name, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustAddress(byte[] name) {
    final Function function =
        new Function(
            FUNC_MUSTADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<byte[]> getMustAddressInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_MUSTADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
  }

  public TransactionReceipt deleteUser(String userAddress) {
    final Function function =
        new Function(
            FUNC_DELETEUSER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] deleteUser(String userAddress, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_DELETEUSER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForDeleteUser(String userAddress) {
    final Function function =
        new Function(
            FUNC_DELETEUSER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getDeleteUserInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_DELETEUSER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public Tuple2<List<byte[]>, Boolean> getCidHashes(BigInteger pageSize, BigInteger pageNumber)
      throws ContractException {
    final Function function =
        new Function(
            FUNC_GETCIDHASHES,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Bool>() {}));
    List<Type> results = executeCallWithMultipleValueReturn(function);
    return new Tuple2<List<byte[]>, Boolean>(
        convertToNative((List<Bytes32>) results.get(0).getValue()),
        (Boolean) results.get(1).getValue());
  }

  public String contractName() throws ContractException {
    final Function function =
        new Function(
            FUNC_CONTRACTNAME,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt addCid(String cid) {
    final Function function =
        new Function(
            FUNC_ADDCID,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] addCid(String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_ADDCID,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForAddCid(String cid) {
    final Function function =
        new Function(
            FUNC_ADDCID,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getAddCidInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_ADDCID,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt addAddress(byte[] name) {
    final Function function =
        new Function(
            FUNC_ADDADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] addAddress(byte[] name, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_ADDADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForAddAddress(byte[] name) {
    final Function function =
        new Function(
            FUNC_ADDADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_ADDADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
  }

  public String owner() throws ContractException {
    final Function function =
        new Function(
            FUNC_OWNER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt addNode(String nodeAddress) {
    final Function function =
        new Function(
            FUNC_ADDNODE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] addNode(String nodeAddress, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_ADDNODE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForAddNode(String nodeAddress) {
    final Function function =
        new Function(
            FUNC_ADDNODE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getAddNodeInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_ADDNODE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public Boolean checkNode(String nodeAddress) throws ContractException {
    final Function function =
        new Function(
            FUNC_CHECKNODE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeCallWithSingleValueReturn(function, Boolean.class);
  }

  public BigInteger getUserCount() throws ContractException {
    final Function function =
        new Function(
            FUNC_GETUSERCOUNT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeCallWithSingleValueReturn(function, BigInteger.class);
  }

  public TransactionReceipt mustManager(byte[] managerName) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustManager(byte[] managerName) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
  }

  public TransactionReceipt mustContainAddress(List<byte[]> names) {
    final Function function =
        new Function(
            FUNC_MUSTCONTAINADDRESS,
            Arrays.<Type>asList(
                names.isEmpty()
                    ? org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]")
                    : new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<
                        org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(
                            names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustContainAddress(List<byte[]> names, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTCONTAINADDRESS,
            Arrays.<Type>asList(
                names.isEmpty()
                    ? org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]")
                    : new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<
                        org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(
                            names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustContainAddress(List<byte[]> names) {
    final Function function =
        new Function(
            FUNC_MUSTCONTAINADDRESS,
            Arrays.<Type>asList(
                names.isEmpty()
                    ? org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]")
                    : new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<
                        org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(
                            names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<List<byte[]>> getMustContainAddressInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_MUSTCONTAINADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<List<byte[]>>(convertToNative((List<Bytes32>) results.get(0).getValue()));
  }

  public TransactionReceipt setManager(String _manager) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setManager(String _manager, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetManager(String _manager) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt refreshCache() {
    final Function function =
        new Function(
            FUNC_REFRESHCACHE, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] refreshCache(TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_REFRESHCACHE, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForRefreshCache() {
    final Function function =
        new Function(
            FUNC_REFRESHCACHE, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public List<OwnerChangedEventResponse> getOwnerChangedEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
    ArrayList<OwnerChangedEventResponse> responses =
        new ArrayList<OwnerChangedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeOwnerChangedEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeOwnerChangedEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public List<ManagerChangedEventResponse> getManagerChangedEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
    ArrayList<ManagerChangedEventResponse> responses =
        new ArrayList<ManagerChangedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeManagerChangedEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeManagerChangedEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public static Blacklist load(String contractAddress, Client client, CryptoKeyPair credential) {
    return new Blacklist(contractAddress, client, credential);
  }

  public static Blacklist deploy(Client client, CryptoKeyPair credential, String _resolver)
      throws ContractException {
    String encodedConstructor =
        FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)));
    return deploy(
        Blacklist.class,
        client,
        credential,
        getBinary(client.getCryptoSuite()),
        encodedConstructor);
  }

  public static class OwnerChangedEventResponse {
    public TransactionReceipt.Logs log;

    public String previousValue;

    public String newValue;
  }

  public static class ManagerChangedEventResponse {
    public TransactionReceipt.Logs log;

    public String previousValue;

    public String newValue;
  }
}
