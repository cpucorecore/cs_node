package com.ancun.chain_storage.node.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class NodeManager extends Contract {
  public static final String[] BINARY_ARRAY = {
    "",
    "",
    "",
    "60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612c82610a6c565b60008090505b600480549050811015612dd9576000600482815481101515612ca657fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612d2a91906144cd565b60206040518083038186803b158015612d4257600080fd5b505afa158015612d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d7a9190810190613b41565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050612c88565b50565b612e057f436861696e53746f726167650000000000000000000000000000000000000000611286565b612e0d6134b2565b73ffffffffffffffffffffffffffffffffffffffff16630e1a4a388484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e65939291906143d0565b60206040518083038186803b158015612e7d57600080fd5b505afa158015612e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612eb59190810190613d58565b1515612ef6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eed906147f6565b60405180910390fd5b612efe6134b2565b73ffffffffffffffffffffffffffffffffffffffff1663e82cd9ca84612f22613482565b73ffffffffffffffffffffffffffffffffffffffff1663deda606686866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612f78929190614503565b60206040518083038186803b158015612f9057600080fd5b505afa158015612fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612fc89190810190613def565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613001929190614442565b600060405180830381600087803b15801561301b57600080fd5b505af115801561302f573d6000803e3d6000fd5b50505050600061303d6134b2565b73ffffffffffffffffffffffffffffffffffffffff1663e7d99f2e8585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613095939291906143d0565b602060405180830381600087803b1580156130af57600080fd5b505af11580156130c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506130e79190810190613d58565b90506130f1613482565b73ffffffffffffffffffffffffffffffffffffffff166338c2cc568585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613149939291906143d0565b600060405180830381600087803b15801561316357600080fd5b505af1158015613177573d6000803e3d6000fd5b50505050801561321257613189613482565b73ffffffffffffffffffffffffffffffffffffffff1663a1fc2f9a84846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016131df929190614503565b600060405180830381600087803b1580156131f957600080fd5b505af115801561320d573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff167f10e094aa21d9f44a0c9b2d59ccd05b2817f254cb856b57ef2b50d53def8559a56001858560405161325d93929190614836565b60405180910390a250505050565b6132947f46696c654d616e61676572000000000000000000000000000000000000000000611286565b7f218ceee9970f98b43fce51e55aba4deacf84f46d71d44a43a8d119bf699700de82826040516132c5929190614503565b60405180910390a15050565b6132fa7f436861696e53746f726167650000000000000000000000000000000000000000611286565b6133026134b2565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161335691906143b5565b60206040518083038186803b15801561336e57600080fd5b505afa158015613382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133a69190810190613d58565b1515156133e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133df90614636565b60405180910390fd5b6133f06134b2565b73ffffffffffffffffffffffffffffffffffffffff16633fbbd75e858585856040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161344a949392919061446b565b600060405180830381600087803b15801561346457600080fd5b505af1158015613478573d6000803e3d6000fd5b5050505050505050565b60006134ad7f46696c654d616e61676572000000000000000000000000000000000000000000613782565b905090565b60006134bc6110be565b905090565b606082826040516020018083805190602001908083835b6020831015156134fd57805182526020820191506020810190506020830392506134d8565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515613550578051825260208201915060208101905060208303925061352b565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b6135956134b2565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016135e991906143b5565b60206040518083038186803b15801561360157600080fd5b505afa158015613615573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506136399190810190613d58565b151561367a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161367190614796565b60405180910390fd5b50565b60006136a87f53657474696e6700000000000000000000000000000000000000000000000000613782565b905090565b60608383836040516020018084805190602001908083835b6020831015156136ea57805182526020820191506020810190506020830392506136c5565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b60208310151561373d5780518252602082019150602081019050602083039250613718565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156138cb6040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156138b75780601f1061388c576101008083540402835291602001916138b7565b820191906000526020600020905b81548152906001019060200180831161389a57829003601f168201915b50505050506136ad9092919063ffffffff16565b90151561390e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161390591906145b4565b60405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000613956823561498b565b905092915050565b600061396a825161498b565b905092915050565b600082601f830112151561398557600080fd5b815161399861399382614895565b614868565b915081818352602084019350602081019050838560208402820111156139bd57600080fd5b60005b838110156139ed57816139d3888261395e565b8452602084019350602083019250506001810190506139c0565b5050505092915050565b600082601f8301121515613a0a57600080fd5b8135613a1d613a18826148bd565b614868565b91508181835260208401935060208101905083856020840282011115613a4257600080fd5b60005b83811015613a725781613a588882613a90565b845260208401935060208301925050600181019050613a45565b5050505092915050565b6000613a88825161499d565b905092915050565b6000613a9c82356149a9565b905092915050565b60008083601f8401121515613ab857600080fd5b8235905067ffffffffffffffff811115613ad157600080fd5b602083019150836001820283011115613ae957600080fd5b9250929050565b6000613afc82356149b3565b905092915050565b6000613b1082516149b3565b905092915050565b600060208284031215613b2a57600080fd5b6000613b388482850161394a565b91505092915050565b600060208284031215613b5357600080fd5b6000613b618482850161395e565b91505092915050565b600080600060408486031215613b7f57600080fd5b6000613b8d8682870161394a565b935050602084013567ffffffffffffffff811115613baa57600080fd5b613bb686828701613aa4565b92509250509250925092565b60008060008060608587031215613bd857600080fd5b6000613be68782880161394a565b945050602085013567ffffffffffffffff811115613c0357600080fd5b613c0f87828801613aa4565b93509350506040613c2287828801613af0565b91505092959194509250565b6000806040838503121561",
    "3c4157600080fd5b6000613c4f8582860161394a565b9250506020613c6085828601613af0565b9150509250929050565b60008060008060608587031215613c8057600080fd5b6000613c8e8782880161394a565b9450506020613c9f87828801613af0565b935050604085013567ffffffffffffffff811115613cbc57600080fd5b613cc887828801613aa4565b925092505092959194509250565b600060208284031215613ce857600080fd5b600082015167ffffffffffffffff811115613d0257600080fd5b613d0e84828501613972565b91505092915050565b600060208284031215613d2957600080fd5b600082013567ffffffffffffffff811115613d4357600080fd5b613d4f848285016139f7565b91505092915050565b600060208284031215613d6a57600080fd5b6000613d7884828501613a7c565b91505092915050565b600060208284031215613d9357600080fd5b6000613da184828501613a90565b91505092915050565b60008060208385031215613dbd57600080fd5b600083013567ffffffffffffffff811115613dd757600080fd5b613de385828601613aa4565b92509250509250929050565b600060208284031215613e0157600080fd5b6000613e0f84828501613b04565b91505092915050565b613e2181614945565b82525050565b6000613e32826148ff565b808452602084019350613e44836148e5565b60005b82811015613e7657613e5a868351613e18565b613e638261492b565b9150602086019550600181019050613e47565b50849250505092915050565b6000613e8d8261490a565b808452602084019350613e9f836148f2565b60005b82811015613ed157613eb5868351613edd565b613ebe82614938565b9150602086019550600181019050613ea2565b50849250505092915050565b613ee681614957565b82525050565b613ef5816149bd565b82525050565b6000828452602084019350613f118385846149e1565b613f1a83614a23565b840190509392505050565b6000613f3082614920565b808452613f448160208601602086016149f0565b613f4d81614a23565b602085010191505092915050565b6000613f6682614915565b808452613f7a8160208601602086016149f0565b613f8381614a23565b602085010191505092915050565b6000601882527f4e3a6d7573742066696e6973682064656c65746546696c6500000000000000006020830152604082019050919050565b6000601e82527f63616e6e6f742068617665206d6f7265207468616e203230206974656d7300006020830152604082019050919050565b6000601d82527f6e6577206f776e657220697320746865207a65726f20616464726573730000006020830152604082019050919050565b6000600c82527f4e3a6e6f646520657869737400000000000000000000000000000000000000006020830152604082019050919050565b6000601082527f4e3a63616e2774206164642066696c65000000000000000000000000000000006020830152604082019050919050565b6000601882527f4e3a737461747573206d7573742046696c6554727941646400000000000000006020830152604082019050919050565b6000601882527f4e3a6e6f64652068617665206e6f74207468652066696c6500000000000000006020830152604082019050919050565b6000601582527f4e3a6d7573742066696e6973682061646446696c6500000000000000000000006020830152604082019050919050565b6000600f82527f4e3a636964206e6f7420656d70747900000000000000000000000000000000006020830152604082019050919050565b6000601982527f63616c6c6572206973206e6f7420696e20636f6e7461696e73000000000000006020830152604082019050919050565b6000601b82527f4e3a63616e2774206164642066696c65206475706c69636174656400000000006020830152604082019050919050565b6000601082527f4e3a66696c65206e6f74206578697374000000000000000000000000000000006020830152604082019050919050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b6000601082527f4e3a6e6f6465206e6f74206578697374000000000000000000000000000000006020830152604082019050919050565b6000601982527f4e3a63616e2061646446696c65206e6f646520656e6f756768000000000000006020830152604082019050919050565b6000600b82527f4e3a746f6f20736d616c6c0000000000000000000000000000000000000000006020830152604082019050919050565b6000601d82527f4e3a63616e27742064656c6574652066696c65206e6f742061646465640000006020830152604082019050919050565b6000600c82527f77726f6e672063616c6c657200000000000000000000000000000000000000006020830152604082019050919050565b6143af81614981565b82525050565b60006020820190506143ca6000830184613e18565b92915050565b60006040820190506143e56000830186613e18565b81810360208301526143f8818486613efb565b9050949350505050565b60006060820190506144176000830187613e18565b818103602083015261442a818587613efb565b905061443960408301846143a6565b95945050505050565b60006040820190506144576000830185613e18565b61446460208301846143a6565b9392505050565b60006060820190506144806000830187613e18565b61448d60208301866143a6565b81810360408301526144a0818486613efb565b905095945050505050565b600060208201905081810360008301526144c58184613e82565b905092915050565b60006020820190506144e26000830184613edd565b92915050565b60006020820190506144fd6000830184613eec565b92915050565b6000602082019050818103600083015261451e818486613efb565b90509392505050565b60006040820190508181036000830152614542818587613efb565b905081810360208301526145568184613e27565b9050949350505050565b6000604082019050818103600083015261457b818587613efb565b905061458a60208301846143a6565b949350505050565b600060208201905081810360008301526145ac8184613f5b565b905092915050565b600060208201905081810360008301526145ce8184613f25565b905092915050565b600060208201905081810360008301526145ef81613f91565b9050919050565b6000602082019050818103600083015261460f81613fc8565b9050919050565b6000602082019050818103600083015261462f81613fff565b9050919050565b6000602082019050818103600083015261464f81614036565b9050919050565b6000602082019050818103600083015261466f8161406d565b9050919050565b6000602082019050818103600083015261468f816140a4565b9050919050565b600060208201905081810360008301526146af816140db565b9050919050565b600060208201905081810360008301526146cf81614112565b9050919050565b600060208201905081810360008301526146ef81614149565b9050919050565b6000602082019050818103600083015261470f81614180565b9050919050565b6000602082019050818103600083015261472f816141b7565b9050919050565b6000602082019050818103600083015261474f816141ee565b9050919050565b6000602082019050818103600083015261476f81614225565b9050919050565b6000602082019050818103600083015261478f8161425c565b9050919050565b600060208201905081810360008301526147af81614293565b9050919050565b600060208201905081810360008301526147cf816142ca565b9050919050565b600060208201905081810360008301526147ef81614301565b9050919050565b6000602082019050818103600083015261480f81614338565b9050919050565b6000602082019050818103600083015261482f8161436f565b9050919050565b600060408201905061484b60008301866143a6565b818103602083015261485e818486613efb565b9050949350505050565b6000604051905081810181811067ffffffffffffffff8211171561488b57600080fd5b8060405250919050565b600067ffffffffffffffff8211156148ac57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156148d457600080fd5b602082029050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600061495082614961565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061499682614961565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b60006149c8826149cf565b9050919050565b60006149da82614961565b9050919050565b82818337600083830152505050565b60005b83811015614a0e5780820151818401526020810190506149f3565b83811115614a1d576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820673a8ae3bab6b2e20833f31065f811d2b4f1880b348ced2f98a2185c2707c0df6c6578706572696d656e74616cf50037"
  };

  public static final String BINARY =
      org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

  public static final String[] SM_BINARY_ARRAY = {
    "",
    "",
    "5780601f10611c5657610100808354040283529160200191611c81565b820191906000526020600020905b815481529060010190602001808311611c6457829003601f168201915b505050505061367d9092919063ffffffff16565b901515611cd8576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611ccf91906145b4565b60405180910390fd5b5050565b611ce46127f7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611d56576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611d4d906146d6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611e3f7f436861696e53746f726167650000000000000000000000000000000000000000611edf565b611e48836134c1565b611e50613482565b73ffffffffffffffffffffffffffffffffffffffff1663977b65908484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611ea8939291906143d0565b600060405180830381600087803b158015611ec257600080fd5b505af1158015611ed6573d6000803e3d6000fd5b50505050505050565b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f82576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611f7990614816565b60405180910390fd5b50565b611fae7f436861696e53746f726167650000000000000000000000000000000000000000611edf565b611fb6613491565b73ffffffffffffffffffffffffffffffffffffffff1663b213a41884846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161200c929190614503565b60206040518083038186803b15801561202457600080fd5b505afa158015612038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061205c9190810190613d58565b151561209d576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612094906145f6565b60405180910390fd5b60006120a7613752565b73ffffffffffffffffffffffffffffffffffffffff1663345640c76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561210857600080fd5b505afa15801561211c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121409190810190613def565b90508061214b613482565b73ffffffffffffffffffffffffffffffffffffffff16635fe90693876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161219f91906143b5565b60206040518083038186803b1580156121b757600080fd5b505afa1580156121cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121ef9190810190613def565b101515612231576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612228906146f6565b60405180910390fd5b600061223b613491565b73ffffffffffffffffffffffffffffffffffffffff1663bdf2723c86866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612291929190614503565b60206040518083038186803b1580156122a957600080fd5b505afa1580156122bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122e19190810190613def565b9050806122ec613482565b73ffffffffffffffffffffffffffffffffffffffff1663367c5c6b87876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612342929190614503565b60206040518083038186803b15801561235a57600080fd5b505afa15801561236e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123929190810190613def565b1015156123d4576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016123cb90614656565b60405180910390fd5b60006123de613482565b73ffffffffffffffffffffffffffffffffffffffff1663ae6cb4c1888888886040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124389493929190614402565b602060405180830381600087803b15801561245257600080fd5b505af1158015612466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061248a9190810190613def565b9050818114156126ce5761249c613482565b73ffffffffffffffffffffffffffffffffffffffff166366e1bd7f87876040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124f2929190614503565b60206040518083038186803b15801561250a57600080fd5b505afa15801561251e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125429190810190613d58565b156126cd5761254f613491565b73ffffffffffffffffffffffffffffffffffffffff1663e1b367068787876040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125a793929190614560565b600060405180830381600087803b1580156125c157600080fd5b505af11580156125d5573d6000803e3d6000fd5b5050505060606125e3613482565b73ffffffffffffffffffffffffffffffffffffffff16634a47ceb788886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612639929190614503565b60006040518083038186803b15801561265157600080fd5b505afa158015612665573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061268e9190810190613cd6565b90507f89c5690493a156f96895770d51407c47dfae371a837e1cd62e2bdafc87d2795d8787836040516126c393929190614527565b60405180910390a1505b5b50505050505050565b6127007f46696c654d616e61676572000000000000000000000000000000000000000000611edf565b606061270a613482565b73ffffffffffffffffffffffffffffffffffffffff1663cdd32d7784846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612760929190614503565b60006040518083038186803b15801561277857600080fd5b505afa15801561278c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506127b59190810190613cd6565b90507f46b8c31c9d2902b4868857fa87454f7311a9ba5e890fec3fb55b5beb7842cf578383836040516127ea93929190614527565b60405180910390a1505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612889576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612880906147d6565b60405180910390fd5b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6128da7f436861696e53746f726167650000000000000000000000000000000000000000611edf565b6128e3816134c1565b6128eb613482565b73ffffffffffffffffffffffffffffffffffffffff16636874ba70826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161293f91906143b5565b60206040518083038186803b15801561295757600080fd5b505afa15801561296b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061298f9190810190613def565b60001415156129d3576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016129ca90614636565b60405180910390fd5b6129db613482565b73ffffffffffffffffffffffffffffffffffffffff166352fa65f4826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a2f91906143b5565b600060405180830381600087803b158015612a4957600080fd5b505af1158015612a5d573d6000803e3d6000fd5b5050505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b375780601f10612b0c57610100808354040283529160200191612b37565b820191906000526020600020905b815481529060010190602001808311612b1a57829003601f168201915b505050505081565b60148151101515612b85576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612b7c90614736565b60405180910390fd5b600080905060008090505b8251811015612c2d57600560008483815181101515612bab57fe5b90602001906020020151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415612c205760019150612c2d565b8080600101915050612b90565b50801515612c70576040517f",
    "c703cb12000000000000000000000000000000000000000000000000000000008152600401612c6790614676565b60405180910390fd5b5050565b612c9d7f436861696e53746f726167650000000000000000000000000000000000000000611edf565b612ca5613491565b73ffffffffffffffffffffffffffffffffffffffff1663b213a41883836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612cfb929190614503565b60206040518083038186803b158015612d1357600080fd5b505afa158015612d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d4b9190810190613d58565b1515612d8c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612d83906145f6565b60405180910390fd5b612d94613482565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612dec939291906143d0565b60206040518083038186803b158015612e0457600080fd5b505afa158015612e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612e3c9190810190613d58565b1515612e7d576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612e7490614756565b60405180910390fd5b6000612e87613752565b73ffffffffffffffffffffffffffffffffffffffff1663036a87956040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612ee857600080fd5b505afa158015612efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612f209190810190613def565b905080612f2b613482565b73ffffffffffffffffffffffffffffffffffffffff166380d52989866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612f7f91906143b5565b60206040518083038186803b158015612f9757600080fd5b505afa158015612fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612fcf9190810190613def565b101515613011576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161300890614616565b60405180910390fd5b600061301b613482565b73ffffffffffffffffffffffffffffffffffffffff1663ea36ac4a8686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613073939291906143d0565b602060405180830381600087803b15801561308d57600080fd5b505af11580156130a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506130c59190810190613d58565b90508015613251576130d5613491565b73ffffffffffffffffffffffffffffffffffffffff16638e6fb74085856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161312b929190614503565b600060405180830381600087803b15801561314557600080fd5b505af1158015613159573d6000803e3d6000fd5b505050506060613167613482565b73ffffffffffffffffffffffffffffffffffffffff1663cdd32d7786866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016131bd929190614503565b60006040518083038186803b1580156131d557600080fd5b505afa1580156131e9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506132129190810190613cd6565b90507f39d589b179af3c8d45ed41aba599cd0684ab5546b45c3274a37d4d939d94ccb785858360405161324793929190614527565b60405180910390a1505b5050505050565b6132606127f7565b60008090505b6004805490508110156133b757600060048281548110151561328457fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161330891906144cd565b60206040518083038186803b15801561332057600080fd5b505afa158015613334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133589190810190613b41565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050613266565b50565b6133c26127f7565b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f52aff5fa0f806e34ba57f9c78d4798c2aee3581f8b3f300dd69a30570494843260405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061348c6119be565b905090565b60006134bc7f46696c654d616e61676572000000000000000000000000000000000000000000613782565b905090565b6134c9613482565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161351d91906143b5565b60206040518083038186803b15801561353557600080fd5b505afa158015613549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061356d9190810190613d58565b15156135ae576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016135a5906147b6565b60405180910390fd5b50565b606082826040516020018083805190602001908083835b6020831015156135ed57805182526020820191506020810190506020830392506135c8565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515613640578051825260208201915060208101905060208303925061361b565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60608383836040516020018084805190602001908083835b6020831015156136ba5780518252602082019150602081019050602083039250613695565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b60208310151561370d57805182526020820191506020810190506020830392506136e8565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b600061377d7f53657474696e6700000000000000000000000000000000000000000000000000613782565b905090565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156138cb6040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156138b75780601f1061388c576101008083540402835291602001916138b7565b820191906000526020600020905b81548152906001019060200180831161389a57829003601f168201915b505050505061367d9092919063ffffffff16565b90151561390e576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161390591906145b4565b60405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000613956823561498b565b905092915050565b600061396a825161498b565b905092915050565b600082601f830112151561398557600080fd5b815161399861399382614895565b614868565b915081818352602084019350602081019050838560208402820111156139bd57600080fd5b60005b838110156139ed57816139d3888261395e565b8452602084019350602083019250506001810190506139c0565b5050505092915050565b600082601f8301121515613a0a57600080fd5b8135613a1d613a18826148bd565b614868565b91508181835260208401935060208101905083856020840282011115613a4257600080fd5b60005b83811015613a725781613a588882613a90565b845260208401935060208301925050600181019050613a45565b5050505092915050565b6000613a88825161499d565b905092915050565b6000613a9c82356149a9565b905092915050565b60008083601f8401121515613ab857600080fd5b8235905067ffffffffffffffff811115613ad157600080fd5b602083019150836001820283011115613ae957600080fd5b9250929050565b6000613afc82356149b3565b905092915050565b6000613b1082516149b3565b905092915050565b600060208284031215613b2a57600080fd5b6000613b388482850161394a565b91505092915050565b600060208284031215613b5357600080fd5b6000613b618482850161395e565b91505092915050565b600080600060408486031215613b7f57600080fd5b6000613b8d8682870161394a565b935050602084013567ffffffffffffffff811115613baa57600080fd5b613bb686828701613aa4565b92509250509250925092565b60008060008060608587031215613bd857600080fd5b6000613be68782880161394a565b945050602085013567ffffffffffffffff811115613c0357600080fd5b613c0f87828801613aa4565b93509350506040613c2287828801613af0565b91505092959194509250565b6000806040838503121561",
    "3c4157600080fd5b6000613c4f8582860161394a565b9250506020613c6085828601613af0565b9150509250929050565b60008060008060608587031215613c8057600080fd5b6000613c8e8782880161394a565b9450506020613c9f87828801613af0565b935050604085013567ffffffffffffffff811115613cbc57600080fd5b613cc887828801613aa4565b925092505092959194509250565b600060208284031215613ce857600080fd5b600082015167ffffffffffffffff811115613d0257600080fd5b613d0e84828501613972565b91505092915050565b600060208284031215613d2957600080fd5b600082013567ffffffffffffffff811115613d4357600080fd5b613d4f848285016139f7565b91505092915050565b600060208284031215613d6a57600080fd5b6000613d7884828501613a7c565b91505092915050565b600060208284031215613d9357600080fd5b6000613da184828501613a90565b91505092915050565b60008060208385031215613dbd57600080fd5b600083013567ffffffffffffffff811115613dd757600080fd5b613de385828601613aa4565b92509250509250929050565b600060208284031215613e0157600080fd5b6000613e0f84828501613b04565b91505092915050565b613e2181614945565b82525050565b6000613e32826148ff565b808452602084019350613e44836148e5565b60005b82811015613e7657613e5a868351613e18565b613e638261492b565b9150602086019550600181019050613e47565b50849250505092915050565b6000613e8d8261490a565b808452602084019350613e9f836148f2565b60005b82811015613ed157613eb5868351613edd565b613ebe82614938565b9150602086019550600181019050613ea2565b50849250505092915050565b613ee681614957565b82525050565b613ef5816149bd565b82525050565b6000828452602084019350613f118385846149e1565b613f1a83614a23565b840190509392505050565b6000613f3082614920565b808452613f448160208601602086016149f0565b613f4d81614a23565b602085010191505092915050565b6000613f6682614915565b808452613f7a8160208601602086016149f0565b613f8381614a23565b602085010191505092915050565b6000600b82527f4e3a746f6f20736d616c6c0000000000000000000000000000000000000000006020830152604082019050919050565b6000601082527f4e3a66696c65206e6f74206578697374000000000000000000000000000000006020830152604082019050919050565b6000601882527f4e3a6d7573742066696e6973682064656c65746546696c6500000000000000006020830152604082019050919050565b6000600f82527f4e3a636964206e6f7420656d70747900000000000000000000000000000000006020830152604082019050919050565b6000601982527f4e3a63616e2061646446696c65206e6f646520656e6f756768000000000000006020830152604082019050919050565b6000601982527f63616c6c6572206973206e6f7420696e20636f6e7461696e73000000000000006020830152604082019050919050565b6000601082527f4e3a63616e2774206164642066696c65000000000000000000000000000000006020830152604082019050919050565b6000601d82527f6e6577206f776e657220697320746865207a65726f20616464726573730000006020830152604082019050919050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000601582527f4e3a6d7573742066696e6973682061646446696c6500000000000000000000006020830152604082019050919050565b6000601882527f4e3a737461747573206d7573742046696c6554727941646400000000000000006020830152604082019050919050565b6000601e82527f63616e6e6f742068617665206d6f7265207468616e203230206974656d7300006020830152604082019050919050565b6000601882527f4e3a6e6f64652068617665206e6f74207468652066696c6500000000000000006020830152604082019050919050565b6000600c82527f4e3a6e6f646520657869737400000000000000000000000000000000000000006020830152604082019050919050565b6000601b82527f4e3a63616e2774206164642066696c65206475706c69636174656400000000006020830152604082019050919050565b6000601082527f4e3a6e6f6465206e6f74206578697374000000000000000000000000000000006020830152604082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b6000601d82527f4e3a63616e27742064656c6574652066696c65206e6f742061646465640000006020830152604082019050919050565b6000600c82527f77726f6e672063616c6c657200000000000000000000000000000000000000006020830152604082019050919050565b6143af81614981565b82525050565b60006020820190506143ca6000830184613e18565b92915050565b60006040820190506143e56000830186613e18565b81810360208301526143f8818486613efb565b9050949350505050565b60006060820190506144176000830187613e18565b818103602083015261442a818587613efb565b905061443960408301846143a6565b95945050505050565b60006040820190506144576000830185613e18565b61446460208301846143a6565b9392505050565b60006060820190506144806000830187613e18565b61448d60208301866143a6565b81810360408301526144a0818486613efb565b905095945050505050565b600060208201905081810360008301526144c58184613e82565b905092915050565b60006020820190506144e26000830184613edd565b92915050565b60006020820190506144fd6000830184613eec565b92915050565b6000602082019050818103600083015261451e818486613efb565b90509392505050565b60006040820190508181036000830152614542818587613efb565b905081810360208301526145568184613e27565b9050949350505050565b6000604082019050818103600083015261457b818587613efb565b905061458a60208301846143a6565b949350505050565b600060208201905081810360008301526145ac8184613f5b565b905092915050565b600060208201905081810360008301526145ce8184613f25565b905092915050565b600060208201905081810360008301526145ef81613f91565b9050919050565b6000602082019050818103600083015261460f81613fc8565b9050919050565b6000602082019050818103600083015261462f81613fff565b9050919050565b6000602082019050818103600083015261464f81614036565b9050919050565b6000602082019050818103600083015261466f8161406d565b9050919050565b6000602082019050818103600083015261468f816140a4565b9050919050565b600060208201905081810360008301526146af816140db565b9050919050565b600060208201905081810360008301526146cf81614112565b9050919050565b600060208201905081810360008301526146ef81614149565b9050919050565b6000602082019050818103600083015261470f81614180565b9050919050565b6000602082019050818103600083015261472f816141b7565b9050919050565b6000602082019050818103600083015261474f816141ee565b9050919050565b6000602082019050818103600083015261476f81614225565b9050919050565b6000602082019050818103600083015261478f8161425c565b9050919050565b600060208201905081810360008301526147af81614293565b9050919050565b600060208201905081810360008301526147cf816142ca565b9050919050565b600060208201905081810360008301526147ef81614301565b9050919050565b6000602082019050818103600083015261480f81614338565b9050919050565b6000602082019050818103600083015261482f8161436f565b9050919050565b600060408201905061484b60008301866143a6565b818103602083015261485e818486613efb565b9050949350505050565b6000604051905081810181811067ffffffffffffffff8211171561488b57600080fd5b8060405250919050565b600067ffffffffffffffff8211156148ac57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156148d457600080fd5b602082029050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600061495082614961565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061499682614961565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b60006149c8826149cf565b9050919050565b60006149da82614961565b9050919050565b82818337600083830152505050565b60005b83811015614a0e5780820151818401526020810190506149f3565b83811115614a1d576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a7230582025f8ffc23846ed1f6c858931ba479afddeb28f0651bfef90f935cfe410fa48926c6578706572696d656e74616cf50037"
  };

  public static final String SM_BINARY =
      org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

  public static final String[] ABI_ARRAY = {
    "[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeCancelCanAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"mustAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"deRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"nodeCanAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"storageTotal\",\"type\":\"uint256\"}],\"name\":\"setStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"names\",\"type\":\"bytes32[]\"}],\"name\":\"mustContainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeCanDeleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeDeleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"storageTotal\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"TryRequestAddFile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"nodeAddresses\",\"type\":\"address[]\"}],\"name\":\"RequestAddFile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"nodeAddresses\",\"type\":\"address[]\"}],\"name\":\"TryRequestDeleteFile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"nodeAddresses\",\"type\":\"address[]\"}],\"name\":\"RequestDeleteFile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nodeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"NodeAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"
  };

  public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

  public static final String FUNC_RESOLVER = "resolver";

  public static final String FUNC_NODECANCELCANADDFILE = "nodeCancelCanAddFile";

  public static final String FUNC_GETIMPORTS = "getImports";

  public static final String FUNC_SETOWNER = "setOwner";

  public static final String FUNC_MUSTOWNER = "mustOwner";

  public static final String FUNC_GETADDRESS = "getAddress";

  public static final String FUNC_NODEADDFILE = "nodeAddFile";

  public static final String FUNC_GETSTORAGE = "getStorage";

  public static final String FUNC_MANAGER = "manager";

  public static final String FUNC_MUSTADDRESS = "mustAddress";

  public static final String FUNC_DEREGISTER = "deRegister";

  public static final String FUNC_CONTRACTNAME = "contractName";

  public static final String FUNC_NODECANADDFILE = "nodeCanAddFile";

  public static final String FUNC_ADDADDRESS = "addAddress";

  public static final String FUNC_OWNER = "owner";

  public static final String FUNC_SETSTORAGE = "setStorage";

  public static final String FUNC_SETEXT = "setExt";

  public static final String FUNC_SETSTORAGETOTAL = "setStorageTotal";

  public static final String FUNC_DELETEFILE = "deleteFile";

  public static final String FUNC_MUSTMANAGER = "mustManager";

  public static final String FUNC_MUSTCONTAINADDRESS = "mustContainAddress";

  public static final String FUNC_NODECANDELETEFILE = "nodeCanDeleteFile";

  public static final String FUNC_SETMANAGER = "setManager";

  public static final String FUNC_REFRESHCACHE = "refreshCache";

  public static final String FUNC_NODEDELETEFILE = "nodeDeleteFile";

  public static final String FUNC_ADDFILE = "addFile";

  public static final String FUNC_REGISTER = "register";

  public static final Event TRYREQUESTADDFILE_EVENT =
      new Event(
          "TryRequestAddFile", Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
  ;

  public static final Event REQUESTADDFILE_EVENT =
      new Event(
          "RequestAddFile",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Address>>() {}));
  ;

  public static final Event TRYREQUESTDELETEFILE_EVENT =
      new Event(
          "TryRequestDeleteFile",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Address>>() {}));
  ;

  public static final Event REQUESTDELETEFILE_EVENT =
      new Event(
          "RequestDeleteFile",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Address>>() {}));
  ;

  public static final Event NODEACTION_EVENT =
      new Event(
          "NodeAction",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(true) {},
              new TypeReference<Uint256>() {},
              new TypeReference<Utf8String>() {}));
  ;

  public static final Event STORAGECHANGED_EVENT =
      new Event(
          "StorageChanged",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
  ;

  public static final Event OWNERCHANGED_EVENT =
      new Event(
          "OwnerChanged",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
  ;

  public static final Event MANAGERCHANGED_EVENT =
      new Event(
          "ManagerChanged",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
  ;

  protected NodeManager(String contractAddress, Client client, CryptoKeyPair credential) {
    super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
  }

  public static String getBinary(CryptoSuite cryptoSuite) {
    return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
  }

  public String resolver() throws ContractException {
    final Function function =
        new Function(
            FUNC_RESOLVER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt nodeCancelCanAddFile(String nodeAddress, String cid) {
    final Function function =
        new Function(
            FUNC_NODECANCELCANADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] nodeCancelCanAddFile(String nodeAddress, String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NODECANCELCANADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNodeCancelCanAddFile(String nodeAddress, String cid) {
    final Function function =
        new Function(
            FUNC_NODECANCELCANADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, String> getNodeCancelCanAddFileInput(
      TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NODECANCELCANADDFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, String>(
        (String) results.get(0).getValue(), (String) results.get(1).getValue());
  }

  public List getImports() throws ContractException {
    final Function function =
        new Function(
            FUNC_GETIMPORTS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
    List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
    return convertToNative(result);
  }

  public TransactionReceipt setOwner(String _owner) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setOwner(String _owner, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetOwner(String _owner) {
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETOWNER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt mustOwner() {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustOwner(TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustOwner() {
    final Function function =
        new Function(
            FUNC_MUSTOWNER, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public String getAddress(byte[] name) throws ContractException {
    final Function function =
        new Function(
            FUNC_GETADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt nodeAddFile(String nodeAddress, String cid) {
    final Function function =
        new Function(
            FUNC_NODEADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] nodeAddFile(String nodeAddress, String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NODEADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNodeAddFile(String nodeAddress, String cid) {
    final Function function =
        new Function(
            FUNC_NODEADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, String> getNodeAddFileInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NODEADDFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, String>(
        (String) results.get(0).getValue(), (String) results.get(1).getValue());
  }

  public String getStorage() throws ContractException {
    final Function function =
        new Function(
            FUNC_GETSTORAGE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public String manager() throws ContractException {
    final Function function =
        new Function(
            FUNC_MANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt mustAddress(byte[] name) {
    final Function function =
        new Function(
            FUNC_MUSTADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustAddress(byte[] name, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustAddress(byte[] name) {
    final Function function =
        new Function(
            FUNC_MUSTADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<byte[]> getMustAddressInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_MUSTADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
  }

  public TransactionReceipt deRegister(String nodeAddress) {
    final Function function =
        new Function(
            FUNC_DEREGISTER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] deRegister(String nodeAddress, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_DEREGISTER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForDeRegister(String nodeAddress) {
    final Function function =
        new Function(
            FUNC_DEREGISTER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getDeRegisterInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_DEREGISTER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public String contractName() throws ContractException {
    final Function function =
        new Function(
            FUNC_CONTRACTNAME,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt nodeCanAddFile(String nodeAddress, String cid, BigInteger size) {
    final Function function =
        new Function(
            FUNC_NODECANADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] nodeCanAddFile(
      String nodeAddress, String cid, BigInteger size, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NODECANADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNodeCanAddFile(
      String nodeAddress, String cid, BigInteger size) {
    final Function function =
        new Function(
            FUNC_NODECANADDFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple3<String, String, BigInteger> getNodeCanAddFileInput(
      TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NODECANADDFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {},
                new TypeReference<Utf8String>() {},
                new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple3<String, String, BigInteger>(
        (String) results.get(0).getValue(),
        (String) results.get(1).getValue(),
        (BigInteger) results.get(2).getValue());
  }

  public TransactionReceipt addAddress(byte[] name) {
    final Function function =
        new Function(
            FUNC_ADDADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] addAddress(byte[] name, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_ADDADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForAddAddress(byte[] name) {
    final Function function =
        new Function(
            FUNC_ADDADDRESS,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_ADDADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
  }

  public String owner() throws ContractException {
    final Function function =
        new Function(
            FUNC_OWNER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeCallWithSingleValueReturn(function, String.class);
  }

  public TransactionReceipt setStorage(String value) {
    final Function function =
        new Function(
            FUNC_SETSTORAGE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setStorage(String value, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETSTORAGE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetStorage(String value) {
    final Function function =
        new Function(
            FUNC_SETSTORAGE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getSetStorageInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETSTORAGE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt setExt(String nodeAddress, String ext) {
    final Function function =
        new Function(
            FUNC_SETEXT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setExt(String nodeAddress, String ext, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETEXT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetExt(String nodeAddress, String ext) {
    final Function function =
        new Function(
            FUNC_SETEXT,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETEXT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, String>(
        (String) results.get(0).getValue(), (String) results.get(1).getValue());
  }

  public TransactionReceipt setStorageTotal(String nodeAddress, BigInteger storageTotal) {
    final Function function =
        new Function(
            FUNC_SETSTORAGETOTAL,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setStorageTotal(
      String nodeAddress, BigInteger storageTotal, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETSTORAGETOTAL,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetStorageTotal(
      String nodeAddress, BigInteger storageTotal) {
    final Function function =
        new Function(
            FUNC_SETSTORAGETOTAL,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, BigInteger> getSetStorageTotalInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETSTORAGETOTAL,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, BigInteger>(
        (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
  }

  public TransactionReceipt deleteFile(String cid) {
    final Function function =
        new Function(
            FUNC_DELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] deleteFile(String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_DELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForDeleteFile(String cid) {
    final Function function =
        new Function(
            FUNC_DELETEFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getDeleteFileInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_DELETEFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt mustManager(byte[] managerName) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustManager(byte[] managerName) {
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_MUSTMANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
  }

  public TransactionReceipt mustContainAddress(List<byte[]> names) {
    final Function function =
        new Function(
            FUNC_MUSTCONTAINADDRESS,
            Arrays.<Type>asList(
                names.isEmpty()
                    ? org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]")
                    : new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<
                        org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(
                            names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] mustContainAddress(List<byte[]> names, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_MUSTCONTAINADDRESS,
            Arrays.<Type>asList(
                names.isEmpty()
                    ? org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]")
                    : new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<
                        org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(
                            names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForMustContainAddress(List<byte[]> names) {
    final Function function =
        new Function(
            FUNC_MUSTCONTAINADDRESS,
            Arrays.<Type>asList(
                names.isEmpty()
                    ? org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]")
                    : new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<
                        org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(
                            names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<List<byte[]>> getMustContainAddressInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_MUSTCONTAINADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<List<byte[]>>(convertToNative((List<Bytes32>) results.get(0).getValue()));
  }

  public TransactionReceipt nodeCanDeleteFile(String nodeAddress, String cid) {
    final Function function =
        new Function(
            FUNC_NODECANDELETEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] nodeCanDeleteFile(String nodeAddress, String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NODECANDELETEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNodeCanDeleteFile(String nodeAddress, String cid) {
    final Function function =
        new Function(
            FUNC_NODECANDELETEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, String> getNodeCanDeleteFileInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NODECANDELETEFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, String>(
        (String) results.get(0).getValue(), (String) results.get(1).getValue());
  }

  public TransactionReceipt setManager(String _manager) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] setManager(String _manager, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForSetManager(String _manager) {
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_SETMANAGER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt refreshCache() {
    final Function function =
        new Function(
            FUNC_REFRESHCACHE, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] refreshCache(TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_REFRESHCACHE, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForRefreshCache() {
    final Function function =
        new Function(
            FUNC_REFRESHCACHE, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public TransactionReceipt nodeDeleteFile(String nodeAddress, String cid) {
    final Function function =
        new Function(
            FUNC_NODEDELETEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] nodeDeleteFile(String nodeAddress, String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_NODEDELETEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForNodeDeleteFile(String nodeAddress, String cid) {
    final Function function =
        new Function(
            FUNC_NODEDELETEFILE,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple2<String, String> getNodeDeleteFileInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_NODEDELETEFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<String, String>(
        (String) results.get(0).getValue(), (String) results.get(1).getValue());
  }

  public TransactionReceipt addFile(String cid) {
    final Function function =
        new Function(
            FUNC_ADDFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] addFile(String cid, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_ADDFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForAddFile(String cid) {
    final Function function =
        new Function(
            FUNC_ADDFILE,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple1<String> getAddFileInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_ADDFILE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple1<String>((String) results.get(0).getValue());
  }

  public TransactionReceipt register(String nodeAddress, BigInteger storageTotal, String ext) {
    final Function function =
        new Function(
            FUNC_REGISTER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return executeTransaction(function);
  }

  public byte[] register(
      String nodeAddress, BigInteger storageTotal, String ext, TransactionCallback callback) {
    final Function function =
        new Function(
            FUNC_REGISTER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return asyncExecuteTransaction(function, callback);
  }

  public String getSignedTransactionForRegister(
      String nodeAddress, BigInteger storageTotal, String ext) {
    final Function function =
        new Function(
            FUNC_REGISTER,
            Arrays.<Type>asList(
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)),
            Collections.<TypeReference<?>>emptyList());
    return createSignedTransaction(function);
  }

  public Tuple3<String, BigInteger, String> getRegisterInput(
      TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function =
        new Function(
            FUNC_REGISTER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Address>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Utf8String>() {}));
    List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple3<String, BigInteger, String>(
        (String) results.get(0).getValue(),
        (BigInteger) results.get(1).getValue(),
        (String) results.get(2).getValue());
  }

  public List<TryRequestAddFileEventResponse> getTryRequestAddFileEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(TRYREQUESTADDFILE_EVENT, transactionReceipt);
    ArrayList<TryRequestAddFileEventResponse> responses =
        new ArrayList<TryRequestAddFileEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      TryRequestAddFileEventResponse typedResponse = new TryRequestAddFileEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeTryRequestAddFileEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(TRYREQUESTADDFILE_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeTryRequestAddFileEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(TRYREQUESTADDFILE_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public List<RequestAddFileEventResponse> getRequestAddFileEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(REQUESTADDFILE_EVENT, transactionReceipt);
    ArrayList<RequestAddFileEventResponse> responses =
        new ArrayList<RequestAddFileEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      RequestAddFileEventResponse typedResponse = new RequestAddFileEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.nodeAddresses =
          (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeRequestAddFileEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(REQUESTADDFILE_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeRequestAddFileEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(REQUESTADDFILE_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public List<TryRequestDeleteFileEventResponse> getTryRequestDeleteFileEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(TRYREQUESTDELETEFILE_EVENT, transactionReceipt);
    ArrayList<TryRequestDeleteFileEventResponse> responses =
        new ArrayList<TryRequestDeleteFileEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      TryRequestDeleteFileEventResponse typedResponse = new TryRequestDeleteFileEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.nodeAddresses =
          (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeTryRequestDeleteFileEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(TRYREQUESTDELETEFILE_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeTryRequestDeleteFileEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(TRYREQUESTDELETEFILE_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public List<RequestDeleteFileEventResponse> getRequestDeleteFileEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(REQUESTDELETEFILE_EVENT, transactionReceipt);
    ArrayList<RequestDeleteFileEventResponse> responses =
        new ArrayList<RequestDeleteFileEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      RequestDeleteFileEventResponse typedResponse = new RequestDeleteFileEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.nodeAddresses =
          (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeRequestDeleteFileEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(REQUESTDELETEFILE_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeRequestDeleteFileEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(REQUESTDELETEFILE_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public List<NodeActionEventResponse> getNodeActionEvents(TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(NODEACTION_EVENT, transactionReceipt);
    ArrayList<NodeActionEventResponse> responses =
        new ArrayList<NodeActionEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      NodeActionEventResponse typedResponse = new NodeActionEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.nodeAddress = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.cid = (String) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeNodeActionEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(NODEACTION_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeNodeActionEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(NODEACTION_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public List<StorageChangedEventResponse> getStorageChangedEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(STORAGECHANGED_EVENT, transactionReceipt);
    ArrayList<StorageChangedEventResponse> responses =
        new ArrayList<StorageChangedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      StorageChangedEventResponse typedResponse = new StorageChangedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeStorageChangedEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeStorageChangedEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public List<OwnerChangedEventResponse> getOwnerChangedEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
    ArrayList<OwnerChangedEventResponse> responses =
        new ArrayList<OwnerChangedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeOwnerChangedEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeOwnerChangedEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public List<ManagerChangedEventResponse> getManagerChangedEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
    ArrayList<ManagerChangedEventResponse> responses =
        new ArrayList<ManagerChangedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public void subscribeManagerChangedEvent(
      String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
    String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
  }

  public void subscribeManagerChangedEvent(EventCallback callback) {
    String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
    subscribeEvent(ABI, BINARY, topic0, callback);
  }

  public static NodeManager load(String contractAddress, Client client, CryptoKeyPair credential) {
    return new NodeManager(contractAddress, client, credential);
  }

  public static NodeManager deploy(Client client, CryptoKeyPair credential, String _resolver)
      throws ContractException {
    String encodedConstructor =
        FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)));
    return deploy(
        NodeManager.class,
        client,
        credential,
        getBinary(client.getCryptoSuite()),
        encodedConstructor);
  }

  public static class TryRequestAddFileEventResponse {
    public TransactionReceipt.Logs log;

    public String cid;
  }

  public static class RequestAddFileEventResponse {
    public TransactionReceipt.Logs log;

    public String cid;

    public List<String> nodeAddresses;
  }

  public static class TryRequestDeleteFileEventResponse {
    public TransactionReceipt.Logs log;

    public String cid;

    public List<String> nodeAddresses;
  }

  public static class RequestDeleteFileEventResponse {
    public TransactionReceipt.Logs log;

    public String cid;

    public List<String> nodeAddresses;
  }

  public static class NodeActionEventResponse {
    public TransactionReceipt.Logs log;

    public String nodeAddress;

    public BigInteger action;

    public String cid;
  }

  public static class StorageChangedEventResponse {
    public TransactionReceipt.Logs log;

    public String previousValue;

    public String newValue;
  }

  public static class OwnerChangedEventResponse {
    public TransactionReceipt.Logs log;

    public String previousValue;

    public String newValue;
  }

  public static class ManagerChangedEventResponse {
    public TransactionReceipt.Logs log;

    public String previousValue;

    public String newValue;
  }
}
