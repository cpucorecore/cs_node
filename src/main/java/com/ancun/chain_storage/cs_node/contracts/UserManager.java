package com.ancun.chain_storage.cs_node.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class UserManager extends Contract {
    public static final String[] BINARY_ARRAY = {"","40518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c72939291906146d8565b60206040518083038186803b158015610c8a57600080fd5b505afa158015610c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cc291908101906141b6565b1515610d03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfa90614b44565b60405180910390fd5b6000610d0d613835565b73ffffffffffffffffffffffffffffffffffffffff1663ec18665d8484876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d6593929190614921565b602060405180830381600087803b158015610d7f57600080fd5b505af1158015610d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610db791908101906141b6565b90508373ffffffffffffffffffffffffffffffffffffffff167f7ff856ebdfb707d61def85870f1d5ec936227ea11ff8064c01f211a7f018361560018585604051610e0493929190614ba4565b60405180910390a280151561103357610e1b613826565b73ffffffffffffffffffffffffffffffffffffffff1663101f51068585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e73939291906146d8565b600060405180830381600087803b158015610e8d57600080fd5b505af1158015610ea1573d6000803e3d6000fd5b50505050610ead613826565b73ffffffffffffffffffffffffffffffffffffffff1663e82cd9ca85610ed1613835565b73ffffffffffffffffffffffffffffffffffffffff1663deda606687876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f279291906148fd565b60206040518083038186803b158015610f3f57600080fd5b505afa158015610f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f779190810190614208565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fb09291906147ea565b600060405180830381600087803b158015610fca57600080fd5b505af1158015610fde573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167fc759741c7ed64c1d8fd2a48eaacfc129c1d3a617e1d1cb50fb359b3e1d3e2315848460405161102a9291906148fd565b60405180910390a25b50505050565b6060600480548060200260200160405190810160405280929190818152602001828054801561108757602002820191906000526020600020905b815481526020019060010190808311611073575b5050505050905090565b6110996111cb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561110b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110290614a24565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561125d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125490614b24565b60405180910390fd5b565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6112c57f436861696e53746f7261676500000000000000000000000000000000000000006116b4565b6112cd613826565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113219190614638565b60206040518083038186803b15801561133957600080fd5b505afa15801561134d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061137191908101906141b6565b1515156113b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113aa90614a64565b60405180910390fd5b6113bb613826565b73ffffffffffffffffffffffffffffffffffffffff16635f4cfd59846113df613865565b73ffffffffffffffffffffffffffffffffffffffff16635406cbe96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561144057600080fd5b505afa158015611454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114789190810190614208565b85856040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114b5949392919061484a565b600060405180830381600087803b1580156114cf57600080fd5b505af11580156114e3573d6000803e3d6000fd5b50505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156116226040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561160f5780601f106115e45761010080835404028352916020019161160f565b820191906000526020600020905b8154815290600101906020018083116115f257829003601f168201915b505050505061389590919063ffffffff16565b901515611665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165c91906149e2565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174e90614b84565b60405180910390fd5b50565b6117837f436861696e53746f7261676500000000000000000000000000000000000000006116b4565b61178b613826565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117df9190614638565b60206040518083038186803b1580156117f757600080fd5b505afa15801561180b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061182f91908101906141b6565b1515611870576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186790614ae4565b60405180910390fd5b611878613826565b73ffffffffffffffffffffffffffffffffffffffff1663fa001d7b826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118cc9190614638565b60206040518083038186803b1580156118e457600080fd5b505afa1580156118f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061191c9190810190614208565b6000141515611960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195790614ac4565b60405180910390fd5b611968613826565b73ffffffffffffffffffffffffffffffffffffffff16635c60f226826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119bc9190614638565b600060405180830381600087803b1580156119d657600080fd5b505af11580156119ea573d6000803e3d6000fd5b5050505050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a875780601f10611a5c57610100808354040283529160200191611a87565b820191906000526020600020905b815481529060010190602001808311611a6a57829003601f168201915b505050505081565b611a976111cb565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b0e91906148c7565b60206040518083038186803b158015611b2657600080fd5b505afa158015611b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b5e9190810190613dd0565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611c2d7f436861696e53746f7261676500000000000000000000000000000000000000006116b4565b611c35613826565b73ffffff","ffffffffffffffffffffffffffffffffff16634dfefc4b866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c899190614638565b60206040518083038186803b158015611ca157600080fd5b505afa158015611cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611cd991908101906141b6565b1515611d1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1190614ae4565b60405180910390fd5b611d22613826565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d7a939291906146d8565b60206040518083038186803b158015611d9257600080fd5b505afa158015611da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611dca91908101906141b6565b1515611e0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0290614b44565b60405180910390fd5b611e13613826565b73ffffffffffffffffffffffffffffffffffffffff16638e04d4f986868686866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e6f95949392919061470a565b600060405180830381600087803b158015611e8957600080fd5b505af1158015611e9d573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167f993607c8002ff747ed4a5ec1c6e311aa5e7a3cb785d8b9f60573fb25130a4ef485858585604051611eed9493929190614985565b60405180910390a25050505050565b611f046111cb565b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f85a70e3ed8a3924b3769cbe4e925987bbd40e8cea31487cbe13bee7b727310a460405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611fed7f46696c654d616e616765720000000000000000000000000000000000000000006116b4565b611ff5613826565b73ffffffffffffffffffffffffffffffffffffffff1663101f51068585856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161204d939291906146d8565b600060405180830381600087803b15801561206757600080fd5b505af115801561207b573d6000803e3d6000fd5b50505050612087613826565b73ffffffffffffffffffffffffffffffffffffffff1663e82cd9ca85836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120dd9291906147ea565b600060405180830381600087803b1580156120f757600080fd5b505af115801561210b573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167fc759741c7ed64c1d8fd2a48eaacfc129c1d3a617e1d1cb50fb359b3e1d3e231584846040516121579291906148fd565b60405180910390a250505050565b61218e7f436861696e53746f7261676500000000000000000000000000000000000000006116b4565b612196613826565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121ea9190614638565b60206040518083038186803b15801561220257600080fd5b505afa158015612216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061223a91908101906141b6565b151561227b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227290614ae4565b60405180910390fd5b612283613826565b73ffffffffffffffffffffffffffffffffffffffff166394fc2a4e8484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122db939291906146d8565b600060405180830381600087803b1580156122f557600080fd5b505af1158015612309573d6000803e3d6000fd5b50505050505050565b61233b7f436861696e53746f7261676500000000000000000000000000000000000000006116b4565b612343613826565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123979190614638565b60206040518083038186803b1580156123af57600080fd5b505afa1580156123c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123e791908101906141b6565b1515612428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161241f90614ae4565b60405180910390fd5b612430613826565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124849190614638565b60206040518083038186803b15801561249c57600080fd5b505afa1580156124b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124d49190810190614208565b8110151515612518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250f90614aa4565b60405180910390fd5b612520613826565b73ffffffffffffffffffffffffffffffffffffffff1663a19eaf7383836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125769291906147ea565b600060405180830381600087803b15801561259057600080fd5b505af11580156125a4573d6000803e3d6000fd5b505050505050565b6125d57f436861696e53746f7261676500000000000000000000000000000000000000006116b4565b6125dd613826565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016126319190614638565b60206040518083038186803b15801561264957600080fd5b505afa15801561265d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061268191908101906141b6565b15156126c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126b990614ae4565b60405180910390fd5b6126ca613826565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161271e9190614638565b60206040518083038186803b15801561273657600080fd5b505afa15801561274a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061276e91908101906141b6565b15156127af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a690614ae4565b60405180910390fd5b6127b7613835565b73ffffffffffffffffffffffffffffffffffffffff1663057af1c484846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161280d9291906148fd565b60206040518083038186803b15801561282557600080fd5b505afa158015612839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061285d91908101906141b6565b151561289e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289590614b44565b60405180910390fd5b6128a6613826565b73ffffffffffffffffffffffffffffffffffffffff1663a95d5fb286868686866040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161290295949392919061468a565b600060405180830381600087803b15801561291c57600080fd5b505af1158015612930573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f590efacc466a4b5d7ef913b61a490eebdad69040b0792c39bb6095d74315d67185858560405161299593929190614953565b60405180910390a35050505050565b6129cd7f436861696e53746f7261676500000000000000000000000000000000000000006116b4565b6129d5613826565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a299190614638565b60206040518083038186803b158015612a4157600080fd5b505afa158015612a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a7991908101906141b6565b1515612aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ab190614ae4565b60405180910390fd5b612ac2613826565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b1a939291906146d8565b60206040518083038186803b158015612b3257600080fd5b505afa158015612b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b6a91908101906141b6565b1515612bab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ba290614b44565b60405180910390fd5b612bb3613826565b73ffffffffffffffffffffffffffffffffffffffff1663af7cdcaf858585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612c0d9493929190614753565b600060405180830381600087803b158015612c2757600080fd5b505af1158015612c3b573d6000803e3d6000","fd5b5050505050505050565b612c6e7f436861696e53746f7261676500000000000000000000000000000000000000006116b4565b612c76613826565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612cca9190614638565b60206040518083038186803b158015612ce257600080fd5b505afa158015612cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d1a91908101906141b6565b1515612d5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5290614ae4565b60405180910390fd5b612d63613826565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48787876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612dbb939291906146d8565b60206040518083038186803b158015612dd357600080fd5b505afa158015612de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612e0b91908101906141b6565b151515612e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e4490614b64565b60405180910390fd5b6000612e57613826565b73ffffffffffffffffffffffffffffffffffffffff1663fa61c545886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612eab9190614638565b60206040518083038186803b158015612ec357600080fd5b505afa158015612ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612efb9190810190614208565b111515612f3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f3490614a44565b60405180910390fd5b6000612f47613835565b73ffffffffffffffffffffffffffffffffffffffff1663c0a715d087878a6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612f9f93929190614921565b602060405180830381600087803b158015612fb957600080fd5b505af1158015612fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ff191908101906141b6565b9050801515613191576000613004613835565b73ffffffffffffffffffffffffffffffffffffffff1663deda606688886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161305a9291906148fd565b60206040518083038186803b15801561307257600080fd5b505afa158015613086573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506130aa9190810190614208565b90506130b4613826565b73ffffffffffffffffffffffffffffffffffffffff1663ea80775d898360016040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161310d93929190614813565b600060405180830381600087803b15801561312757600080fd5b505af115801561313b573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff167fca2f17e4ee68505f582c6ef18a1ca39743f528cf4f7827ea8efd21803bc3039b88886040516131879291906148fd565b60405180910390a2505b613199613826565b73ffffffffffffffffffffffffffffffffffffffff1663b6bbd1508888888888886040518763ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016131f796959493929190614793565b600060405180830381600087803b15801561321157600080fd5b505af1158015613225573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff167f993607c8002ff747ed4a5ec1c6e311aa5e7a3cb785d8b9f60573fb25130a4ef4878786866040516132759493929190614985565b60405180910390a28673ffffffffffffffffffffffffffffffffffffffff167f7ff856ebdfb707d61def85870f1d5ec936227ea11ff8064c01f211a7f0183615600088886040516132c893929190614ba4565b60405180910390a250505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461340e6040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133fa5780601f106133cf576101008083540402835291602001916133fa565b820191906000526020600020905b8154815290600101906020018083116133dd57829003601f168201915b50505050506139619092919063ffffffff16565b901515613451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161344891906149e2565b60405180910390fd5b5050565b6014815110151561349b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161349290614a04565b60405180910390fd5b600080905060008090505b8251811015613543576005600084838151811015156134c157fe5b90602001906020020151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156135365760019150613543565b80806001019150506134a6565b50801515613586576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161357d90614a84565b60405180910390fd5b5050565b6135926111cb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135fb90614b04565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6136cc6111cb565b60008090505b6004805490508110156138235760006004828154811015156136f057fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161377491906148c7565b60206040518083038186803b15801561378c57600080fd5b505afa1580156137a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506137c49190810190613dd0565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080806001019150506136d2565b50565b60006138306114ec565b905090565b60006138607f46696c654d616e61676572000000000000000000000000000000000000000000613a36565b905090565b60006138907f53657474696e6700000000000000000000000000000000000000000000000000613a36565b905090565b606082826040516020018083805190602001908083835b6020831015156138d157805182526020820191506020810190506020830392506138ac565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310151561392457805182526020820191506020810190506020830392506138ff565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60608383836040516020018084805190602001908083835b60208310151561399e5780518252602082019150602081019050602083039250613979565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b6020831015156139f157805182526020820191506020810190506020830392506139cc565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613b7f6040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613b6b5780601f10613b4057610100808354040283529160200191613b6b565b820191906000526020600020905b815481529060010190602001808311613b4e57829003601f168201915b50505050506139619092919063ffffffff16565b901515613bc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bb991906149e2565b60405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000613c0a8235614cb8565b905092915050565b6000613c1e8251614cb8565b905092915050565b60008083601f8401121515613c3a57600080fd","","0081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000614c7182614c8e565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000614cc382614c8e565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000614cf582614cfc565b9050919050565b6000614d0782614c8e565b9050919050565b82818337600083830152505050565b60005b83811015614d3b578082015181840152602081019050614d20565b83811115614d4a576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058207a32f859e9b006c916f06199f8f51e19ca09bf799c351abb52f69253170af56b6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","15610c48573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167f1f9a5d24931ca42f0aff966b11ec2bb02977859841adcedc8b7c10dba128308e8484604051610c949291906148fd565b60405180910390a250505050565b610ccb7f436861696e53746f726167650000000000000000000000000000000000000000612ff5565b610cd3613826565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d279190614638565b60206040518083038186803b158015610d3f57600080fd5b505afa158015610d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d7791908101906141b6565b1515610db8576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610daf90614ac4565b60405180910390fd5b610dc0613826565b73ffffffffffffffffffffffffffffffffffffffff1663d0613a5f836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e149190614638565b60206040518083038186803b158015610e2c57600080fd5b505afa158015610e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e649190810190614208565b8110151515610ea8576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610e9f90614a24565b60405180910390fd5b610eb0613826565b73ffffffffffffffffffffffffffffffffffffffff16634b17e3bb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f069291906147ea565b600060405180830381600087803b158015610f2057600080fd5b505af1158015610f34573d6000803e3d6000fd5b505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f8b7f436861696e53746f726167650000000000000000000000000000000000000000612ff5565b610f93613826565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fe79190614638565b60206040518083038186803b158015610fff57600080fd5b505afa158015611013573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061103791908101906141b6565b1515611078576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161106f90614ac4565b60405180910390fd5b611080613826565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110d49190614638565b60206040518083038186803b1580156110ec57600080fd5b505afa158015611100573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061112491908101906141b6565b1515611165576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161115c90614ac4565b60405180910390fd5b61116d613835565b73ffffffffffffffffffffffffffffffffffffffff1663b213a41884846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111c39291906148fd565b60206040518083038186803b1580156111db57600080fd5b505afa1580156111ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061121391908101906141b6565b1515611254576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161124b90614a44565b60405180910390fd5b61125c613826565b73ffffffffffffffffffffffffffffffffffffffff16635a6a102a86868686866040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112b895949392919061468a565b600060405180830381600087803b1580156112d257600080fd5b505af11580156112e6573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f6f99bb8364badf3dc4700b3d78827f4d2c98a3a70c8c6a520d0d1da10a6fdff085858560405161134b93929190614953565b60405180910390a35050505050565b61136261309b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113d991906148c7565b60206040518083038186803b1580156113f157600080fd5b505afa158015611405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114299190810190613dd0565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b6114d27f436861696e53746f726167650000000000000000000000000000000000000000612ff5565b6114da613826565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161152e9190614638565b60206040518083038186803b15801561154657600080fd5b505afa15801561155a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061157e91908101906141b6565b15156115bf576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016115b690614ac4565b60405180910390fd5b6115c7613826565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28585856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161161f939291906146d8565b60206040518083038186803b15801561163757600080fd5b505afa15801561164b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061166f91908101906141b6565b15156116b0576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016116a790614a44565b60405180910390fd5b6116b8613826565b73ffffffffffffffffffffffffffffffffffffffff16636bddd7ba858585856040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117129493929190614753565b600060405180830381600087803b15801561172c57600080fd5b505af1158015611740573d6000803e3d6000fd5b5050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156118806040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561186d5780601f106118425761010080835404028352916020019161186d565b820191906000526020600020905b81548152906001019060200180831161185057829003601f168201915b505050505061386590919063ffffffff16565b9015156118c3576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016118ba91906149e2565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6119157f436861696e53746f726167650000000000000000000000000000000000000000612ff5565b61191d613826565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119719190614638565b60206040518083038186803b15801561198957600080fd5b505afa15801561199d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119c191908101906141b6565b1515611a02576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016119f990614ac4565b60405180910390fd5b611a0a613826565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a62939291906146d8565b60206040518083038186803b158015611a7a57600080fd5b505afa158015611a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ab291908101906141b6565b1515611af3576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611aea90614a44565b60405180910390fd5b6000611afd613835565b73ffffffffffffffffffffffffffffffffffffffff16638d14e60f8484876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b5593929190614921565b602060405180830381600087803b158015611b6f57600080fd5b505af1158015611b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ba791908101906141b6565b90508373ffffffffffffffffffffffffffffffffffffffff167ffbaf37c066475af3158e9df07088a45d3005751a986206966ad7d538fc86123360018585604051611bf493929190614ba4565b60405180910390a2801515611e2357611c0b613826565b73ffffffffffffffffffffffffffffffffffffffff16637d0722528585856040518463ffffffff167c0100000000","000000000000000000000000000000000000000000000000028152600401611c63939291906146d8565b600060405180830381600087803b158015611c7d57600080fd5b505af1158015611c91573d6000803e3d6000fd5b50505050611c9d613826565b73ffffffffffffffffffffffffffffffffffffffff16632817fe6a85611cc1613835565b73ffffffffffffffffffffffffffffffffffffffff16639bd7613687876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d179291906148fd565b60206040518083038186803b158015611d2f57600080fd5b505afa158015611d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d679190810190614208565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611da09291906147ea565b600060405180830381600087803b158015611dba57600080fd5b505af1158015611dce573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167f1f9a5d24931ca42f0aff966b11ec2bb02977859841adcedc8b7c10dba128308e8484604051611e1a9291906148fd565b60405180910390a25b50505050565b611e527f436861696e53746f726167650000000000000000000000000000000000000000612ff5565b611e5a613826565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611eae9190614638565b60206040518083038186803b158015611ec657600080fd5b505afa158015611eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611efe91908101906141b6565b1515611f3f576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611f3690614ac4565b60405180910390fd5b611f47613826565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f9b9190614638565b60206040518083038186803b158015611fb357600080fd5b505afa158015611fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611feb91908101906141b6565b151561202c576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161202390614ac4565b60405180910390fd5b612034613826565b73ffffffffffffffffffffffffffffffffffffffff166380a0f2c28484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161208c93929190614653565b600060405180830381600087803b1580156120a657600080fd5b505af11580156120ba573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fe9adc71fe19394aa0fc7fa4a55535de93b087ebac1eaea506d808284c64096528360405161211b91906148ac565b60405180910390a3505050565b6121517f436861696e53746f726167650000000000000000000000000000000000000000612ff5565b612159613826565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121ad9190614638565b60206040518083038186803b1580156121c557600080fd5b505afa1580156121d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121fd91908101906141b6565b15151561223f576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161223690614b04565b60405180910390fd5b612247613826565b73ffffffffffffffffffffffffffffffffffffffff1663fcdce0018461226b613931565b73ffffffffffffffffffffffffffffffffffffffff1663dfde08506040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156122cc57600080fd5b505afa1580156122e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123049190810190614208565b85856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612341949392919061484a565b600060405180830381600087803b15801561235b57600080fd5b505af115801561236f573d6000803e3d6000fd5b50505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146124ad6040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124995780601f1061246e57610100808354040283529160200191612499565b820191906000526020600020905b81548152906001019060200180831161247c57829003601f168201915b50505050506139619092919063ffffffff16565b9015156124f0576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016124e791906149e2565b60405180910390fd5b5050565b61251d7f46696c654d616e61676572000000000000000000000000000000000000000000612ff5565b60008090505b8585905081101561267257612536613826565b73ffffffffffffffffffffffffffffffffffffffff16634c2b1e2e878784818110151561255f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168460006040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125b993929190614813565b600060405180830381600087803b1580156125d357600080fd5b505af11580156125e7573d6000803e3d6000fd5b5050505085858281811015156125f957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f4fb178e139e9968e61febd6e2cd6367124212a6be5008e49ac3737e4465525df858560405161265d9291906148fd565b60405180910390a28080600101915050612523565b505050505050565b61268261309b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156126f4576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016126eb90614a84565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6127dd7f436861696e53746f726167650000000000000000000000000000000000000000612ff5565b6127e5613826565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016128399190614638565b60206040518083038186803b15801561285157600080fd5b505afa158015612865573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061288991908101906141b6565b15156128ca576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016128c190614ac4565b60405180910390fd5b6128d2613826565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28787876040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161292a939291906146d8565b60206040518083038186803b15801561294257600080fd5b505afa158015612956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061297a91908101906141b6565b1515156129bc576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016129b390614b24565b60405180910390fd5b60006129c6613826565b73ffffffffffffffffffffffffffffffffffffffff1663a0b5ad1e886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a1a9190614638565b60206040518083038186803b158015612a3257600080fd5b505afa158015612a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a6a9190810190614208565b111515612aac576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612aa390614b64565b60405180910390fd5b6000612ab6613835565b73ffffffffffffffffffffffffffffffffffffffff16633c05e3dd87878a6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b0e93929190614921565b602060405180830381600087803b158015612b2857600080fd5b505af1158015612b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b6091908101906141b6565b9050801515612d00576000612b73613835565b73ffffffffffffffffffffffffffffffffffffffff16639bd7613688886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612bc99291906148fd565b60206040518083038186803b158015612be157600080fd5b505afa158015612bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c199190810190614208565b9050612c23613826565b73ffffffffffffffffffffffffffffffffffffffff16","634c2b1e2e898360016040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612c7c93929190614813565b600060405180830381600087803b158015612c9657600080fd5b505af1158015612caa573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff167f4fb178e139e9968e61febd6e2cd6367124212a6be5008e49ac3737e4465525df8888604051612cf69291906148fd565b60405180910390a2505b612d08613826565b73ffffffffffffffffffffffffffffffffffffffff166391eb51808888888888886040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612d6696959493929190614793565b600060405180830381600087803b158015612d8057600080fd5b505af1158015612d94573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff167fa4adc06c8468d434934c5b3caece26dc7ef74848d502a5e6cc2d76e4b53c37c887878686604051612de49493929190614985565b60405180910390a28673ffffffffffffffffffffffffffffffffffffffff167ffbaf37c066475af3158e9df07088a45d3005751a986206966ad7d538fc86123360008888604051612e3793929190614ba4565b60405180910390a250505050505050565b612e717f436861696e53746f726167650000000000000000000000000000000000000000612ff5565b612e79613826565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612ecd9190614638565b60206040518083038186803b158015612ee557600080fd5b505afa158015612ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612f1d91908101906141b6565b1515612f5e576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612f5590614ac4565b60405180910390fd5b612f66613826565b73ffffffffffffffffffffffffffffffffffffffff1663977b65908484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612fbe939291906146d8565b600060405180830381600087803b158015612fd857600080fd5b505af1158015612fec573d6000803e3d6000fd5b50505050505050565b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613098576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161308f90614b84565b60405180910390fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561312d576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161312490614b44565b60405180910390fd5b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61317e7f436861696e53746f726167650000000000000000000000000000000000000000612ff5565b613186613826565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016131da9190614638565b60206040518083038186803b1580156131f257600080fd5b505afa158015613206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061322a91908101906141b6565b151561326b576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161326290614ac4565b60405180910390fd5b613273613826565b73ffffffffffffffffffffffffffffffffffffffff1663f13a5969826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016132c79190614638565b60206040518083038186803b1580156132df57600080fd5b505afa1580156132f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133179190810190614208565b600014151561335b576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161335290614aa4565b60405180910390fd5b613363613826565b73ffffffffffffffffffffffffffffffffffffffff166380c2e0af826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016133b79190614638565b600060405180830381600087803b1580156133d157600080fd5b505af11580156133e5573d6000803e3d6000fd5b5050505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156134bf5780601f10613494576101008083540402835291602001916134bf565b820191906000526020600020905b8154815290600101906020018083116134a257829003601f168201915b505050505081565b6014815110151561350d576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161350490614ae4565b60405180910390fd5b600080905060008090505b82518110156135b55760056000848381518110151561353357fe5b90602001906020020151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156135a857600191506135b5565b8080600101915050613518565b508015156135f8576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016135ef90614a04565b60405180910390fd5b5050565b61360461309b565b60008090505b60048054905081101561375b57600060048281548110151561362857fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016136ac91906148c7565b60206040518083038186803b1580156136c457600080fd5b505afa1580156136d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506136fc9190810190613dd0565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050808060010191505061360a565b50565b61376661309b565b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f52aff5fa0f806e34ba57f9c78d4798c2aee3581f8b3f300dd69a30570494843260405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061383061174a565b905090565b60006138607f46696c654d616e61676572000000000000000000000000000000000000000000613a36565b905090565b606082826040516020018083805190602001908083835b6020831015156138a1578051825260208201915060208101905060208303925061387c565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156138f457805182526020820191506020810190506020830392506138cf565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b600061395c7f53657474696e6700000000000000000000000000000000000000000000000000613a36565b905090565b60608383836040516020018084805190602001908083835b60208310151561399e5780518252602082019150602081019050602083039250613979565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b6020831015156139f157805182526020820191506020810190506020830392506139cc565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613b7f6040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613b6b5780601f10613b4057610100808354040283529160200191613b6b565b820191906000526020600020905b815481529060010190602001808311613b4e57829003601f168201915b50505050506139619092919063ffffffff16565b901515613bc2576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613bb991906149e2565b60405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000613c0a8235614cb8565b905092915050565b6000613c1e8251614cb8565b905092915050565b60008083601f8401121515613c3a57600080fd","","0081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000614c7182614c8e565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000614cc382614c8e565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000614cf582614cfc565b9050919050565b6000614d0782614c8e565b9050919050565b82818337600083830152505050565b60005b83811015614d3b578082015181840152602081019050614d20565b83811115614d4a576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a7230582081efadf04b78fb3758029fa72fc2ece71db02ed7b9361082a660967ef79913636c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approveAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddresses\",\"type\":\"address[]\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"onAddFileFinish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"mustAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"deRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setFileExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"onDeleteFileFinish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"setStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approveFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setFileDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"names\",\"type\":\"bytes32[]\"}],\"name\":\"mustContainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"UserAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"FileExtSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"AccountApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"FileApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"AddFileFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"DeleteFileFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_RESOLVER = "resolver";

    public static final String FUNC_APPROVEACCOUNT = "approveAccount";

    public static final String FUNC_ONADDFILEFINISH = "onAddFileFinish";

    public static final String FUNC_DELETEFILE = "deleteFile";

    public static final String FUNC_GETIMPORTS = "getImports";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_MUSTOWNER = "mustOwner";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_GETSTORAGE = "getStorage";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_MUSTADDRESS = "mustAddress";

    public static final String FUNC_DEREGISTER = "deRegister";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_ADDADDRESS = "addAddress";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETFILEEXT = "setFileExt";

    public static final String FUNC_SETSTORAGE = "setStorage";

    public static final String FUNC_ONDELETEFILEFINISH = "onDeleteFileFinish";

    public static final String FUNC_SETEXT = "setExt";

    public static final String FUNC_SETSTORAGETOTAL = "setStorageTotal";

    public static final String FUNC_APPROVEFILE = "approveFile";

    public static final String FUNC_SETFILEDURATION = "setFileDuration";

    public static final String FUNC_ADDFILE = "addFile";

    public static final String FUNC_MUSTMANAGER = "mustManager";

    public static final String FUNC_MUSTCONTAINADDRESS = "mustContainAddress";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_REFRESHCACHE = "refreshCache";

    public static final Event USERACTION_EVENT = new Event("UserAction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event FILEEXTSET_EVENT = new Event("FileExtSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ACCOUNTAPPROVED_EVENT = new Event("AccountApproved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event FILEAPPROVED_EVENT = new Event("FileApproved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ADDFILEFINISHED_EVENT = new Event("AddFileFinished", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event DELETEFILEFINISHED_EVENT = new Event("DeleteFileFinished", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event STORAGECHANGED_EVENT = new Event("StorageChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected UserManager(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String resolver() throws ContractException {
        final Function function = new Function(FUNC_RESOLVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt approveAccount(String from, String to, Boolean approved) {
        final Function function = new Function(
                FUNC_APPROVEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] approveAccount(String from, String to, Boolean approved, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApproveAccount(String from, String to, Boolean approved) {
        final Function function = new Function(
                FUNC_APPROVEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, Boolean> getApproveAccountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, Boolean>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue()
                );
    }

    public TransactionReceipt onAddFileFinish(List<String> userAddresses, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_ONADDFILEFINISH, 
                Arrays.<Type>asList(userAddresses.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(userAddresses, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] onAddFileFinish(List<String> userAddresses, String cid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ONADDFILEFINISH, 
                Arrays.<Type>asList(userAddresses.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(userAddresses, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOnAddFileFinish(List<String> userAddresses, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_ONADDFILEFINISH, 
                Arrays.<Type>asList(userAddresses.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(userAddresses, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<List<String>, String, BigInteger> getOnAddFileFinishInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ONADDFILEFINISH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<List<String>, String, BigInteger>(

                convertToNative((List<Address>) results.get(0).getValue()), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt deleteFile(String userAddress, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteFile(String userAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteFile(String userAddress, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public List getImports() throws ContractException {
        final Function function = new Function(FUNC_GETIMPORTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public String getAddress(byte[] name) throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt register(String userAddress, String ext) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String userAddress, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String userAddress, String ext) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String getStorage() throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt mustAddress(byte[] name) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustAddress(byte[] name) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt deRegister(String userAddress) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deRegister(String userAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeRegister(String userAddress) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DEREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt addAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setFileExt(String userAddress, String cid, String ext) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setFileExt(String userAddress, String cid, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetFileExt(String userAddress, String cid, String ext) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getSetFileExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETFILEEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt setStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorage(String value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt onDeleteFileFinish(String userAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_ONDELETEFILEFINISH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] onDeleteFileFinish(String userAddress, String cid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ONDELETEFILEFINISH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOnDeleteFileFinish(String userAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_ONDELETEFILEFINISH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getOnDeleteFileFinishInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ONDELETEFILEFINISH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt setExt(String userAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setExt(String userAddress, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetExt(String userAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setStorageTotal(String userAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorageTotal(String userAddress, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorageTotal(String userAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetStorageTotalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt approveFile(String from, String to, String cid, Boolean approved) {
        final Function function = new Function(
                FUNC_APPROVEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] approveFile(String from, String to, String cid, Boolean approved, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApproveFile(String from, String to, String cid, Boolean approved) {
        final Function function = new Function(
                FUNC_APPROVEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, Boolean> getApproveFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, Boolean>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (Boolean) results.get(3).getValue()
                );
    }

    public TransactionReceipt setFileDuration(String userAddress, String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setFileDuration(String userAddress, String cid, BigInteger duration, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetFileDuration(String userAddress, String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getSetFileDurationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt addFile(String userAddress, String cid, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addFile(String userAddress, String cid, BigInteger duration, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFile(String userAddress, String cid, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, String> getAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt mustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustContainAddress(List<byte[]> names) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustContainAddress(List<byte[]> names, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustContainAddress(List<byte[]> names) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getMustContainAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(

                convertToNative((List<Bytes32>) results.get(0).getValue())
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt refreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refreshCache(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public List<UserActionEventResponse> getUserActionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERACTION_EVENT, transactionReceipt);
        ArrayList<UserActionEventResponse> responses = new ArrayList<UserActionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserActionEventResponse typedResponse = new UserActionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUserActionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(USERACTION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUserActionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(USERACTION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FileExtSetEventResponse> getFileExtSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FILEEXTSET_EVENT, transactionReceipt);
        ArrayList<FileExtSetEventResponse> responses = new ArrayList<FileExtSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FileExtSetEventResponse typedResponse = new FileExtSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ext = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFileExtSetEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEEXTSET_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFileExtSetEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEEXTSET_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AccountApprovedEventResponse> getAccountApprovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCOUNTAPPROVED_EVENT, transactionReceipt);
        ArrayList<AccountApprovedEventResponse> responses = new ArrayList<AccountApprovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccountApprovedEventResponse typedResponse = new AccountApprovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAccountApprovedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ACCOUNTAPPROVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAccountApprovedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ACCOUNTAPPROVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FileApprovedEventResponse> getFileApprovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FILEAPPROVED_EVENT, transactionReceipt);
        ArrayList<FileApprovedEventResponse> responses = new ArrayList<FileApprovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FileApprovedEventResponse typedResponse = new FileApprovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFileApprovedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEAPPROVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFileApprovedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEAPPROVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AddFileFinishedEventResponse> getAddFileFinishedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDFILEFINISHED_EVENT, transactionReceipt);
        ArrayList<AddFileFinishedEventResponse> responses = new ArrayList<AddFileFinishedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddFileFinishedEventResponse typedResponse = new AddFileFinishedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddFileFinishedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDFILEFINISHED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddFileFinishedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDFILEFINISHED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DeleteFileFinishedEventResponse> getDeleteFileFinishedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEFILEFINISHED_EVENT, transactionReceipt);
        ArrayList<DeleteFileFinishedEventResponse> responses = new ArrayList<DeleteFileFinishedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteFileFinishedEventResponse typedResponse = new DeleteFileFinishedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDeleteFileFinishedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEFILEFINISHED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDeleteFileFinishedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEFILEFINISHED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<StorageChangedEventResponse> getStorageChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STORAGECHANGED_EVENT, transactionReceipt);
        ArrayList<StorageChangedEventResponse> responses = new ArrayList<StorageChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StorageChangedEventResponse typedResponse = new StorageChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStorageChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStorageChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static UserManager load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new UserManager(contractAddress, client, credential);
    }

    public static UserManager deploy(Client client, CryptoKeyPair credential, String _resolver) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)));
        return deploy(UserManager.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class UserActionEventResponse {
        public TransactionReceipt.Logs log;

        public String userAddress;

        public BigInteger action;

        public String cid;
    }

    public static class FileExtSetEventResponse {
        public TransactionReceipt.Logs log;

        public String userAddress;

        public String cid;

        public String ext;
    }

    public static class AccountApprovedEventResponse {
        public TransactionReceipt.Logs log;

        public String from;

        public String to;

        public Boolean approved;
    }

    public static class FileApprovedEventResponse {
        public TransactionReceipt.Logs log;

        public String from;

        public String to;

        public String cid;

        public Boolean approved;
    }

    public static class AddFileFinishedEventResponse {
        public TransactionReceipt.Logs log;

        public String userAddress;

        public String cid;
    }

    public static class DeleteFileFinishedEventResponse {
        public TransactionReceipt.Logs log;

        public String userAddress;

        public String cid;
    }

    public static class StorageChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
