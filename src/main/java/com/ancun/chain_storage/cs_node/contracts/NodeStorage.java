package com.ancun.chain_storage.cs_node.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class NodeStorage extends Contract {
    public static final String[] BINARY_ARRAY = {"","810190613ae0565b611f76565b604051610864919061418b565b60405180910390f35b34801561087957600080fd5b50610894600480360361088f9190810190613ab7565b612174565b005b3480156108a257600080fd5b506108bd60048036036108b89190810190613ab7565b6122d6565b6040516108ca91906141c8565b60405180910390f35b3480156108df57600080fd5b506108fa60048036036108f59190810190613ab7565b6123ba565b60405161090791906142ca565b60405180910390f35b34801561091c57600080fd5b5061093760048036036109329190810190613ae0565b61240d565b604051610944919061418b565b60405180910390f35b34801561095957600080fd5b50610974600480360361096f9190810190613ba4565b612705565b005b34801561098257600080fd5b5061099d60048036036109989190810190613ba4565b61275d565b005b3480156109ab57600080fd5b506109c660048036036109c19190810190613c4c565b6127b8565b6040516109d492919061415b565b60405180910390f35b3480156109e957600080fd5b50610a0460048036036109ff9190810190613cc4565b612931565b604051610a1191906140e7565b60405180910390f35b348015610a2657600080fd5b50610a416004803603610a3c9190810190613ab7565b61297a565b604051610a4e91906142ca565b60405180910390f35b348015610a6357600080fd5b50610a7e6004803603610a799190810190613ab7565b6129cd565b604051610a8b91906142ca565b60405180910390f35b348015610aa057600080fd5b50610abb6004803603610ab69190810190613cc4565b612a20565b604051610ac8919061418b565b60405180910390f35b610adc600354611da7565b6000828260405180838380828437808301925050509250505060405180910390209050610b248460086000848152602001908152602001600020612bb990919063ffffffff16565b15610ba657610b4e8460086000848152602001908152602001600020612be990919063ffffffff16565b506000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020819055505b610bfa81600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612c1990919063ffffffff16565b15610c5557610c5381600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612c3090919063ffffffff16565b505b50505050565b600080838360405180838380828437808301925050509250505060405180910390209050610ca48560096000848152602001908152602001600020612bb990919063ffffffff16565b9150509392505050565b610cb9600354611da7565b6000828260405180838380828437808301925050509250505060405180910390209050600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009055610d8481600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612c3090919063ffffffff16565b5050505050565b610d93610f0e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfc9061422a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000838360405180838380828437808301925050509250505060405180910390209050610f0560086000838152602001908152602001600020612c47565b91505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f97906142aa565b60405180910390fd5b565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600001549050919050565b610ffc600354611da7565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600080820160009055600182016000905550506002820160008082016000808201600061106d91906136a5565b505050506004820160008082016000808201600061108b91906136a5565b50505050600682016000808201600080820160006110a991906136a5565b505050506008820160006110bd91906136c6565b50506110d3816005612be990919063ffffffff16565b5050565b60006110e4600354611da7565b600083836040518083838082843780830192505050925050506040518091039020905061115b81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612c1990919063ffffffff16565b156111b6576111b481600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612c3090919063ffffffff16565b505b61120a81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612c1990919063ffffffff16565b15156112665761126481600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612c6790919063ffffffff16565b505b61128b8560086000848152602001908152602001600020612bb990919063ffffffff16565b156112b7576112b58560086000848152602001908152602001600020612be990919063ffffffff16565b505b6112dc8560096000848152602001908152602001600020612bb990919063ffffffff16565b1515611309576113078560096000848152602001908152602001600020612c7e90919063ffffffff16565b505b600060019050606061132c60086000858152602001908152602001600020612c47565b905060008090505b81518110156113c4576113a88460046000858581518110151561135357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612c1990919063ffffffff16565b15156113b757600092506113c4565b8080600101915050611334565b508193505050509392505050565b60008083836040518083838082843780830192505050925050506040518091039020905061141b8560086000848152602001908152602001600020612bb990919063ffffffff16565b9150509392505050565b60006114316005612cae565b905090565b6000808383604051808383808284378083019250505092505050604051809103902090506114ae81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612c1990919063ffffffff16565b9150509392505050565b6114c3600354611da7565b6114cb61370e565b6114d361370e565b6114db61370e565b60a06040519081016040528060408051908101604052806000815260200189815250815260200184815260200183815260200182815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000016000820151816000015560208201518160010155505060208201518160020160008201518160000160008201518160000190805190602001906115e8929190613728565b5050505050604082015181600401600082015181600001600082015181600001908051906020019061161b929190613728565b5050505050606082015181600601600082015181600001600082015181600001908051906020019061164e929190613728565b5050505050608082015181600801908051906020019061166f929190613775565b50905050611687876005612c7e90919063ffffffff16565b5050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6116c2600354611da7565b600083836040518083838082843780830192505050925050506040518091039020905081600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000208190555061178e81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612c6790919063ffffffff16565b505050505050565b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160010154119050919050565b6060611833600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612cc3565b9050919050565b606060006118466137f5565b61185a61","18536005612cae565b8686612cd8565b9050600061188c826060015161187e60018560800151612e2890919063ffffffff16565b612e7290919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156118c35781602001602082028038833980820191505090505b50905060008090505b8360400151811015611945576118ee8184016005612ee690919063ffffffff16565b82828151811015156118fc57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506118cc565b50808360200151846080015114945094505050509250929050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119f65780601f106119cb576101008083540402835291602001916119f6565b820191906000526020600020905b8154815290600101906020018083116119d957829003601f168201915b505050505081565b6000611a0b600354611da7565b6000848460405180838380828437808301925050509250505060405180910390209050611a538660086000848152602001908152602001600020612bb990919063ffffffff16565b1515611ad557611a7e8660086000848152602001908152602001600020612c7e90919063ffffffff16565b5082600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020819055505b611b2981600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612c1990919063ffffffff16565b1515611b8557611b8381600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612c6790919063ffffffff16565b505b611ba060086000838152602001908152602001600020612cae565b915050949350505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600101549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611c2b600354611da7565b8181600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008019190611c7c929190613825565b50505050565b611c8d600354611da7565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600101819055505050565b6060600082805190602001209050611d0460096000838152602001908152602001600020612c47565b915050919050565b600080838360405180838380828437808301925050509250505060405180910390209050611d4b60086000838152602001908152602001600020612cae565b91505092915050565b6000611da0600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612f01565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611edc6040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ec85780601f10611e9d57610100808354040283529160200191611ec8565b820191906000526020600020905b815481529060010190602001808311611eab57829003601f168201915b5050505050612f169092919063ffffffff16565b901515611f1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1691906141c8565b60405180910390fd5b5050565b6060611f6f600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601612cc3565b9050919050565b6000611f83600354611da7565b6000838360405180838380828437808301925050509250505060405180910390209050611fcb85600a6000848152602001908152602001600020612bb990919063ffffffff16565b1515611ff857611ff685600a6000848152602001908152602001600020612c7e90919063ffffffff16565b505b61204c81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601612c1990919063ffffffff16565b15156120a8576120a681600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601612c6790919063ffffffff16565b505b60606120f785858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611cdb565b905060006001905060008090505b82518110156121665761214a838281518110151561211f57fe5b90602001906020020151600a6000878152602001908152602001600020612bb990919063ffffffff16565b15156121595760009150612166565b8080600101915050612105565b508093505050509392505050565b61217c610f0e565b61218581612feb565b6040805190810160405280600781526020017f53746f7261676500000000000000000000000000000000000000000000000000815250600090805190602001906121d09291906138a5565b5061229a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375d0c0dc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b15801561225857600080fd5b505afa15801561226c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506122959190810190613d4a565b613125565b600381905550600060035414156122d3577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123ae5780601f10612383576101008083540402835291602001916123ae565b820191906000526020600020905b81548152906001019060200180831161239157829003601f168201915b50505050509050919050565b6000612406600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601612f01565b9050919050565b600061241a600354611da7565b600083836040518083838082843780830192505050925050506040518091039020905061249181600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612c1990919063ffffffff16565b156124ec576124ea81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612c3090919063ffffffff16565b505b61254081600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601612c1990919063ffffffff16565b1561259b5761259981600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601612c3090919063ffffffff16565b505b6125c08560096000848152602001908152602001600020612bb990919063ffffffff16565b156125ec576125ea8560096000848152602001908152602001600020612be990919063ffffffff16565b505b61261185600a6000848152602001908152602001600020612bb990919063ffffffff16565b1561263d5761263b85600a6000848152602001908152602001600020612be990919063ffffffff16565b505b6000600190506060612660600a6000858152602001908152602001600020612c47565b905060008090505b81518110156126f7576126dc8460046000858581518110151561268757fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612c1990919063ffffffff16565b156126ea57600092506126f7565b8080600101915050612668565b508193505050509392505050565b61275981600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000161313890919063ffffffff16565b5050565b6127b4816001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016131979092919063ffffffff16565b5050565b606060006127c46137f5565b612818612811600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612f01565b8686612cd8565b9050600061284a826060015161283c60018560800151612e2890919063ffffffff16565b612e7290919063ffffffff16565b","9050606082604001516040519080825280602002602001820160405280156128815781602001602082028038833980820191505090505b50905060008090505b8360400151811015612915576128ec818401600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040161322190919063ffffffff16565b82828151811015156128fa57fe5b9060200190602002018181525050808060010191505061288a565b5080836020015184608001511494509450505050935093915050565b60606000838360405180838380828437808301925050509250505060405180910390209050612971600a6000838152602001908152602001600020612c47565b91505092915050565b60006129c6600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001613238565b9050919050565b6000612a19600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612f01565b9050919050565b6000808383604051808383808284378083019250505092505050604051809103902090506001612a6160086000848152602001908152602001600020612cae565b111515612a72576001915050612bb3565b600060076000612a9e600060086000878152602001908152602001600020612ee690919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205490506000600190505b612b0e60086000858152602001908152602001600020612cae565b811015612bab5760076000612b3e8360086000888152602001908152602001600020612ee690919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205482141515612b9e5760009350505050612bb3565b8080600101915050612af3565b506001925050505b92915050565b6000612be1836000018373ffffffffffffffffffffffffffffffffffffffff16600102613276565b905092915050565b6000612c11836000018373ffffffffffffffffffffffffffffffffffffffff16600102613299565b905092915050565b6000612c288360000183613276565b905092915050565b6000612c3f8360000183613299565b905092915050565b606080612c5683600001613390565b905060608190508092505050919050565b6000612c7683600001836133ec565b905092915050565b6000612ca6836000018373ffffffffffffffffffffffffffffffffffffffff166001026133ec565b905092915050565b6000612cbc82600001613461565b9050919050565b6060612cd182600001613390565b9050919050565b612ce06137f5565b612ce86137f5565b60a060405190810160405280868152602001600081526020016000815260200160008152602001600181525090506000851480612d255750600084145b15612d335780915050612e21565b60328411612d415783612d44565b60325b8160600181815250508060600151816040018181525050612d7281606001518661347290919063ffffffff16565b8160200181815250506000612d948260600151876134bc90919063ffffffff16565b90506000811115612dc157612db76001836020015161350690919063ffffffff16565b8260200181815250505b6001841115612dd557838260800181815250505b816020015182608001511115612df45781602001518260800181815250505b81602001518260800151148015612e0b5750600081115b15612e1b57808260400181815250505b81925050505b9392505050565b6000612e6a83836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061355d565b905092915050565b600080831415612e855760009050612ee0565b60008284029050828482811515612e9857fe5b04141515612edb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ed29061428a565b60405180910390fd5b809150505b92915050565b6000612ef583600001836135ba565b60019004905092915050565b6000612f0f82600001613461565b9050919050565b60608383836040516020018084805190602001908083835b602083101515612f535780518252602082019150602081019050602083039250612f2e565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515612fa65780518252602082019150602081019050602083039250612f81565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b612ff3610f0e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613065576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161305c9061426a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b81600001548111151515613181576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131789061424a565b60405180910390fd5b8082600001600082825403925050819055505050565b80156131fd5782600101546131b983856000015461350690919063ffffffff16565b111515156131fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131f3906141ea565b60405180910390fd5b5b61321482846000015461350690919063ffffffff16565b8360000181905550505050565b600061323083600001836135ba565b905092915050565b60008160010154826000015411156132535760009050613271565b61326e82600001548360010154612e2890919063ffffffff16565b90505b919050565b600080836001016000848152602001908152602001600020541415905092915050565b600080836001016000848152602001908152602001600020549050600081141515613384576000600182039050600060018660000180549050039050818114151561333a57600086600001828154811015156132f157fe5b9060005260206000200154905080876000018481548110151561331057fe5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480151561334957fe5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061338a565b60009150505b92915050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156133e057602002820191906000526020600020905b8154815260200190600101908083116133cc575b50505050509050919050565b60006133f88383613276565b151561345657826000018290806001815401808255809150509060018203906000526020600020016000909192909190915055508260000180549050836001016000848152602001908152602001600020819055506001905061345b565b600090505b92915050565b600081600001805490509050919050565b60006134b483836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506135e0565b905092915050565b60006134fe83836040805190810160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250613645565b905092915050565b6000808284019050838110151515613553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161354a9061420a565b60405180910390fd5b8091505092915050565b600083831115829015156135a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161359e91906141c8565b60405180910390fd5b5060008385039050809150509392505050565b600082600001828154811015156135cd57fe5b9060005260206000200154905092915050565b600080831182901515613629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161362091906141c8565b60405180910390fd5b506000838581151561363757fe5b049050809150509392505050565b6000808314158290151561368f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161368691906141c8565b60405180910390fd5b50828481151561369b57fe5b0690509392505050565b50805460008255906000526020600020908101906136c39190613925565b50565b50805460018160011615610100020316600290046000825580601f106136ec575061370b565b601f01602090049060005260206000209081019061370a919061394a565b5b50565b60206040519081016040528061372261396f565b81525090565b828054828255906000526020600020908101928215613764579160200282015b82811115613763578251825591602001919060010190613748565b5b5090506137719190613925565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106137b657805160ff19168380011785556137e4565b828001600101855582156137e4579182015b828111156137e35782518255916020019190600101906137c8565b5b5090506137f1919061394a565b5090565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f0160209004","81019282601f1061386657803560ff1916838001178555613894565b82800160010185558215613894579182015b82811115613893578235825591602001919060010190613878565b5b5090506138a1919061394a565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106138e657805160ff1916838001178555613914565b82800160010185558215613914579182015b828111156139135782518255916020019190600101906138f8565b5b509050613921919061394a565b5090565b61394791905b8082111561394357600081600090555060010161392b565b5090565b90565b61396c91905b80821115613968576000816000905550600101613950565b5090565b90565b602060405190810160405280606081525090565b600061398f82356143f0565b905092915050565b60006139a38235614402565b905092915050565b60008083601f84011215156139bf57600080fd5b8235905067ffffffffffffffff8111156139d857600080fd5b6020830191508360018202830111156139f057600080fd5b9250929050565b600082601f8301121515613a0a57600080fd5b8135613a1d613a1882614312565b6142e5565b91508082526020830160208301858383011115613a3957600080fd5b613a44838284614416565b50505092915050565b600082601f8301121515613a6057600080fd5b8151613a73613a6e82614312565b6142e5565b91508082526020830160208301858383011115613a8f57600080fd5b613a9a838284614425565b50505092915050565b6000613aaf823561440c565b905092915050565b600060208284031215613ac957600080fd5b6000613ad784828501613983565b91505092915050565b600080600060408486031215613af557600080fd5b6000613b0386828701613983565b935050602084013567ffffffffffffffff811115613b2057600080fd5b613b2c868287016139ab565b92509250509250925092565b60008060008060608587031215613b4e57600080fd5b6000613b5c87828801613983565b945050602085013567ffffffffffffffff811115613b7957600080fd5b613b85878288016139ab565b93509350506040613b9887828801613aa3565b91505092959194509250565b60008060408385031215613bb757600080fd5b6000613bc585828601613983565b9250506020613bd685828601613aa3565b9150509250929050565b60008060008060608587031215613bf657600080fd5b6000613c0487828801613983565b9450506020613c1587828801613aa3565b935050604085013567ffffffffffffffff811115613c3257600080fd5b613c3e878288016139ab565b925092505092959194509250565b600080600060608486031215613c6157600080fd5b6000613c6f86828701613983565b9350506020613c8086828701613aa3565b9250506040613c9186828701613aa3565b9150509250925092565b600060208284031215613cad57600080fd5b6000613cbb84828501613997565b91505092915050565b60008060208385031215613cd757600080fd5b600083013567ffffffffffffffff811115613cf157600080fd5b613cfd858286016139ab565b92509250509250929050565b600060208284031215613d1b57600080fd5b600082013567ffffffffffffffff811115613d3557600080fd5b613d41848285016139f7565b91505092915050565b600060208284031215613d5c57600080fd5b600082015167ffffffffffffffff811115613d7657600080fd5b613d8284828501613a4d565b91505092915050565b60008060408385031215613d9e57600080fd5b6000613dac85828601613aa3565b9250506020613dbd85828601613aa3565b9150509250929050565b613dd08161439e565b82525050565b6000613de182614358565b808452602084019350613df38361433e565b60005b82811015613e2557613e09868351613dc7565b613e1282614384565b9150602086019550600181019050613df6565b50849250505092915050565b6000613e3c82614363565b808452602084019350613e4e8361434b565b60005b82811015613e8057613e64868351613e9b565b613e6d82614391565b9150602086019550600181019050613e51565b50849250505092915050565b613e95816143b0565b82525050565b613ea4816143bc565b82525050565b6000613eb582614379565b808452613ec9816020860160208601614425565b613ed281614458565b602085010191505092915050565b6000613eeb8261436e565b808452613eff816020860160208601614425565b613f0881614458565b602085010191505092915050565b6000601d82527f53534d3a7573655370616365207370616365206e6f7420656e6f7567680000006020830152604082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000601d82527f6e6577206f776e657220697320746865207a65726f20616464726573730000006020830152604082019050919050565b6000601982527f53534d3a667265655370616365206f7574206f662075736564000000000000006020830152604082019050919050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b6140c6816143e6565b82525050565b60006020820190506140e16000830184613dc7565b92915050565b600060208201905081810360008301526141018184613dd6565b905092915050565b600060408201905081810360008301526141238185613dd6565b90506141326020830184613e8c565b9392505050565b600060208201905081810360008301526141538184613e31565b905092915050565b600060408201905081810360008301526141758185613e31565b90506141846020830184613e8c565b9392505050565b60006020820190506141a06000830184613e8c565b92915050565b600060208201905081810360008301526141c08184613ee0565b905092915050565b600060208201905081810360008301526141e28184613eaa565b905092915050565b6000602082019050818103600083015261420381613f16565b9050919050565b6000602082019050818103600083015261422381613f4d565b9050919050565b6000602082019050818103600083015261424381613f84565b9050919050565b6000602082019050818103600083015261426381613fbb565b9050919050565b6000602082019050818103600083015261428381613ff2565b9050919050565b600060208201905081810360008301526142a381614029565b9050919050565b600060208201905081810360008301526142c381614086565b9050919050565b60006020820190506142df60008301846140bd565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561430857600080fd5b8060405250919050565b600067ffffffffffffffff82111561432957600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b60006143a9826143c6565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006143fb826143c6565b9050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614443578082015181840152602081019050614428565b83811115614452576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058202193b5e1533ea7d4d2b21f8bf569230c7c7039c7b3d3524e6e7a1ed3d6eb5e696c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040527f6d616e61676572000000000000000000000000000000000000000000000000006003553480156200003557600080fd5b5060405160208062004c588339810180604052620000579190810190620005bd565b8033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000f481620000fc640100000000026401000000009004565b5050620007a5565b62000115620002a2640100000000026401000000009004565b620001348162000339640100000000026200304a176401000000009004565b6040805190810160405280600781526020017f53746f726167650000000000000000000000000000000000000000000000000081525060009080519060200190620001819291906200049a565b5062000265600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c22931696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156200020b57600080fd5b505afa15801562000220573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506200024b9190810190620005e9565b620004876401000000000262003184176401000000009004565b600381905550600060035414156200029f577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000337576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016200032e90620006be565b60405180910390fd5b565b62000352620002a2640100000000026401000000009004565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620003c7576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401620003be906200069c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004dd57805160ff19168380011785556200050e565b828001600101855582156200050e579182015b828111156200050d578251825591602001919060010190620004f0565b5b5090506200051d919062000521565b5090565b6200054691905b808211156200054257600081600090555060010162000528565b5090565b90565b60006200055782516200075b565b905092915050565b600082601f83011215156200057357600080fd5b81516200058a62000584826200070e565b620006e0565b91508082526020830160208301858383011115620005a757600080fd5b620005b48382846200076f565b50505092915050565b600060208284031215620005d057600080fd5b6000620005e08482850162000549565b91505092915050565b600060208284031215620005fc57600080fd5b600082015167ffffffffffffffff8111156200061757600080fd5b62000625848285016200055f565b91505092915050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b60006020820190508181036000830152620006b7816200062e565b9050919050565b60006020820190508181036000830152620006d98162000665565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156200070457600080fd5b8060405250919050565b600067ffffffffffffffff8211156200072657600080fd5b601f19601f8301169050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000768826200073b565b9050919050565b60005b838110156200078f57808201518184015260208101905062000772565b838111156200079f576000848401525b50505050565b6144a380620007b56000396000f3fe608060405260043610610263576000357c01000000000000000000000000000000000000000000000000000000009004806368aa0d8711610156578063af700e43116100d3578063cdd32d7711610097578063cdd32d7714610976578063d0613a5f146109b3578063df0a42ea146109f0578063ea36ac4a14610a2e578063eccbe27214610a6b578063fdc4793914610aa857610263565b8063af700e4314610891578063b1eb3c2e146108ce578063b2236b64146108e5578063c116b3ba1461090e578063c22931691461094b57610263565b806391726a991161011a57806391726a9914610788578063977b6590146107b15780639786acf2146107da578063a0b5ad1e14610817578063ae6cb4c11461085457610263565b806368aa0d871461067f5780637279e3cd146106bc5780637d072252146106f957806380d52989146107225780638b6ceb4f1461075f57610263565b80634b532010116101e457806352fa65f4116101a857806352fa65f4146105765780635fe906931461059f57806364ae8761146105dc57806366e1bd7f146106055780636874ba701461064257610263565b80634b5320101461047d5780634c116b5c146104ba5780634f263593146104e35780635089e2c8146105205780635218563e1461054b57610263565b8063367c5c6b1161022b578063367c5c6b146103605780633eab5fba1461039d5780633f90dee3146103da5780634a47ceb7146104175780634b17e3bb1461045457610263565b806305282c7014610268578063091d0757146102915780630a2b67ee146102cf5780630ec991c21461030c5780632817fe6a14610337575b600080fd5b34801561027457600080fd5b5061028f600480360361028a9190810190613ab7565b610ad1565b005b34801561029d57600080fd5b506102b860048036036102b39190810190613d8b565b610c0b565b6040516102c6929190614109565b60405180910390f35b3480156102db57600080fd5b506102f660048036036102f19190810190613ae0565b610d31565b604051610303919061418b565b60405180910390f35b34801561031857600080fd5b50610321610d84565b60405161032e91906140cc565b60405180910390f35b34801561034357600080fd5b5061035e60048036036103599190810190613ba4565b610daa565b005b34801561036c57600080fd5b5061038760048036036103829190810190613cc4565b610e02565b60405161039491906142ca565b60405180910390f35b3480156103a957600080fd5b506103c460048036036103bf9190810190613ab7565b610e4a565b6040516103d191906141c8565b60405180910390f35b3480156103e657600080fd5b5061040160048036036103fc9190810190613ae0565b610f2e565b60405161040e919061418b565b60405180910390f35b34801561042357600080fd5b5061043e60048036036104399190810190613cc4565b611229565b60405161044b91906140e7565b60405180910390f35b34801561046057600080fd5b5061047b60048036036104769190810190613ba4565b611272565b005b34801561048957600080fd5b506104a4600480360361049f9190810190613ab7565b6112cb565b6040516104b19190614139565b60405180910390f35b3480156104c657600080fd5b506104e160048036036104dc9190810190613b38565b61131e565b005b3480156104ef57600080fd5b5061050a60048036036105059190810190613ae0565b6113fd565b604051610517919061418b565b60405180910390f35b34801561052c57600080fd5b50610535611450565b60405161054291906140cc565b60405180910390f35b34801561055757600080fd5b50610560611476565b60405161056d91906142ca565b60405180910390f35b34801561058257600080fd5b5061059d60048036036105989190810190613ab7565b611487565b005b3480156105ab57600080fd5b506105c660048036036105c19190810190613ab7565b61156d565b6040516105d391906142ca565b60405180910390f35b3480156105e857600080fd5b5061060360048036036105fe9190810190613ae0565b6115c0565b005b34801561061157600080fd5b5061062c60048036036106279190810190613cc4565b61174a565b604051610639919061418b565b60405180910390f35b34801561064e57600080fd5b5061066960048036036106649190810190613ab7565b6118e3565b60405161067691906142ca565b60405180910390f35b34801561068b57600080fd5b506106a660048036036106a19190810190613ae0565b611936565b6040516106b3919061418b565b60405180910390f35b3480156106c857600080fd5b506106e360048036036106de9190810190613ab7565b611c2e565b6040516106f091906142ca565b60405180910390f35b34801561070557600080fd5b50610720600480360361071b9190810190613ae0565b611c7d565b005b34801561072e57600080fd5b5061074960048036036107449190810190613ab7565b611d5a565b60405161075691906142ca565b60405180910390f35b34801561076b57600080fd5b5061078660048036036107819190810190613c9b565b611dad565b005b34801561079457600080fd5b506107af60048036036107aa9190810190613ab7565b611f29565b005b3480156107bd57600080fd5b506107d860048036036107d39190810190613ae0565b61208b565b005b3480156107e657600080fd5b5061080160048036036107fc9190810190613ae0565b6120ed565b60405161080e919061418b565b60405180910390f35b34801561082357600080fd5b5061083e60048036036108399190810190613ab7565b61216f565b60405161084b91906142ca56","5b60405180910390f35b34801561086057600080fd5b5061087b60048036036108769190810190613b38565b6121c2565b60405161088891906142ca565b60405180910390f35b34801561089d57600080fd5b506108b860048036036108b39190810190613cc4565b61236f565b6040516108c591906140e7565b60405180910390f35b3480156108da57600080fd5b506108e36123b8565b005b3480156108f157600080fd5b5061090c60048036036109079190810190613be0565b61244c565b005b34801561091a57600080fd5b5061093560048036036109309190810190613ab7565b612625565b604051610942919061418b565b60405180910390f35b34801561095757600080fd5b50610960612676565b60405161096d91906141a6565b60405180910390f35b34801561098257600080fd5b5061099d60048036036109989190810190613d09565b612714565b6040516109aa91906140e7565b60405180910390f35b3480156109bf57600080fd5b506109da60048036036109d59190810190613ab7565b612745565b6040516109e791906142ca565b60405180910390f35b3480156109fc57600080fd5b50610a176004803603610a129190810190613c4c565b612794565b604051610a2592919061415b565b60405180910390f35b348015610a3a57600080fd5b50610a556004803603610a509190810190613ae0565b61290d565b604051610a62919061418b565b60405180910390f35b348015610a7757600080fd5b50610a926004803603610a8d9190810190613ab7565b612b0b565b604051610a9f9190614139565b60405180910390f35b348015610ab457600080fd5b50610acf6004803603610aca9190810190613ba4565b612b5e565b005b610ad96123b8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b4b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610b429061424a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000610c176136a5565b610c2b610c246005612bb9565b8686612bce565b90506000610c5d8260600151610c4f60018560800151612d1e90919063ffffffff16565b612d6890919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015610c945781602001602082028038833980820191505090505b50905060008090505b8360400151811015610d1657610cbf8184016005612ddc90919063ffffffff16565b8282815181101515610ccd57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610c9d565b50808360200151846080015114945094505050509250929050565b600080838360405180838380828437808301925050509250505060405180910390209050610d7a8560086000848152602001908152602001600020612df790919063ffffffff16565b9150509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610dfe81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001612e2790919063ffffffff16565b5050565b600080838360405180838380828437808301925050509250505060405180910390209050610e4160086000838152602001908152602001600020612bb9565b91505092915050565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f225780601f10610ef757610100808354040283529160200191610f22565b820191906000526020600020905b815481529060010190602001808311610f0557829003601f168201915b50505050509050919050565b6000610f3b600354611dad565b6000838360405180838380828437808301925050509250505060405180910390209050610fb281600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612e8690919063ffffffff16565b1561100d5761100b81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612e9d90919063ffffffff16565b505b61106181600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612e8690919063ffffffff16565b15156110bd576110bb81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612eb490919063ffffffff16565b505b6110e28560086000848152602001908152602001600020612df790919063ffffffff16565b1561110e5761110c8560086000848152602001908152602001600020612ecb90919063ffffffff16565b505b6111338560096000848152602001908152602001600020612df790919063ffffffff16565b15156111605761115e8560096000848152602001908152602001600020612efb90919063ffffffff16565b505b600060019050606061118360086000858152602001908152602001600020612f2b565b905060008090505b815181101561121b576111ff846004600085858151811015156111aa57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612e8690919063ffffffff16565b151561120e576000925061121b565b808060010191505061118b565b508193505050509392505050565b6060600083836040518083838082843780830192505050925050506040518091039020905061126960086000838152602001908152602001600020612f2b565b91505092915050565b61127d600354611dad565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600101819055505050565b6060611317600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612f4b565b9050919050565b611329600354611dad565b600083836040518083838082843780830192505050925050506040518091039020905081600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020819055506113f581600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612eb490919063ffffffff16565b505050505050565b6000808383604051808383808284378083019250505092505050604051809103902090506114468560096000848152602001908152602001600020612df790919063ffffffff16565b9150509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006114826005612bb9565b905090565b611492600354611dad565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600080820160009055600182016000905550506002820160008082016000808201600061150391906136d5565b505050506004820160008082016000808201600061152191906136d5565b505050506006820160008082016000808201600061153f91906136d5565b5050505060088201600061155391906136f6565b5050611569816005612ecb90919063ffffffff16565b5050565b60006115b9600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612f60565b9050919050565b6115cb600354611dad565b60008282604051808383808284378083019250505092505050604051809103902090506116138460086000848152602001908152602001600020612df790919063ffffffff16565b156116955761163d8460086000848152602001908152602001600020612ecb90919063ffffffff16565b506000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020819055505b6116e981600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612e8690919063ffffffff16565b156117445761174281600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612e9d90919063ffffffff16565b505b50505050565b600080838360405180838380828437808301925050509250505060405180910390209050600161178b60086000848152602001908152602001600020612bb9565b11151561179c5760019150506118dd565b6000600760006117c8600060086000878152602001908152602001600020612ddc90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205490506000600190505b61183860086000858152602001908152602001600020612bb9565b8110156118d5576007600061186883600860","","2001602082028038833980820191505090505b50905060008090505b83604001518110156128f1576128c8818401600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016131d590919063ffffffff16565b82828151811015156128d657fe5b90602001906020020181815250508080600101915050612866565b5080836020015184608001511494509450505050935093915050565b600061291a600354611dad565b600083836040518083838082843780830192505050925050506040518091039020905061296285600a6000848152602001908152602001600020612df790919063ffffffff16565b151561298f5761298d85600a6000848152602001908152602001600020612efb90919063ffffffff16565b505b6129e381600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601612e8690919063ffffffff16565b1515612a3f57612a3d81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601612eb490919063ffffffff16565b505b6060612a8e85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612714565b905060006001905060008090505b8251811015612afd57612ae18382815181101515612ab657fe5b90602001906020020151600a6000878152602001908152602001600020612df790919063ffffffff16565b1515612af05760009150612afd565b8080600101915050612a9c565b508093505050509392505050565b6060612b57600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601612f4b565b9050919050565b612bb5816001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016131ec9092919063ffffffff16565b5050565b6000612bc782600001613276565b9050919050565b612bd66136a5565b612bde6136a5565b60a060405190810160405280868152602001600081526020016000815260200160008152602001600181525090506000851480612c1b5750600084145b15612c295780915050612d17565b60328411612c375783612c3a565b60325b8160600181815250508060600151816040018181525050612c6881606001518661328790919063ffffffff16565b8160200181815250506000612c8a8260600151876132d190919063ffffffff16565b90506000811115612cb757612cad6001836020015161331b90919063ffffffff16565b8260200181815250505b6001841115612ccb57838260800181815250505b816020015182608001511115612cea5781602001518260800181815250505b81602001518260800151148015612d015750600081115b15612d1157808260400181815250505b81925050505b9392505050565b6000612d6083836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613372565b905092915050565b600080831415612d7b5760009050612dd6565b60008284029050828482811515612d8e57fe5b04141515612dd1576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612dc8906141ea565b60405180910390fd5b809150505b92915050565b6000612deb83600001836133cf565b60019004905092915050565b6000612e1f836000018373ffffffffffffffffffffffffffffffffffffffff166001026133f5565b905092915050565b81600001548111151515612e70576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612e67906142aa565b60405180910390fd5b8082600001600082825403925050819055505050565b6000612e9583600001836133f5565b905092915050565b6000612eac8360000183613418565b905092915050565b6000612ec3836000018361350f565b905092915050565b6000612ef3836000018373ffffffffffffffffffffffffffffffffffffffff16600102613418565b905092915050565b6000612f23836000018373ffffffffffffffffffffffffffffffffffffffff1660010261350f565b905092915050565b606080612f3a83600001613584565b905060608190508092505050919050565b6060612f5982600001613584565b9050919050565b6000612f6e82600001613276565b9050919050565b60608383836040516020018084805190602001908083835b602083101515612fb25780518252602082019150602081019050602083039250612f8d565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b6020831015156130055780518252602082019150602081019050602083039250612fe0565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b6130526123b8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156130c4576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016130bb9061426a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b60008160010154826000015411156131b257600090506131d0565b6131cd82600001548360010154612d1e90919063ffffffff16565b90505b919050565b60006131e483600001836133cf565b905092915050565b801561325257826001015461320e83856000015461331b90919063ffffffff16565b11151515613251576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016132489061420a565b60405180910390fd5b5b61326982846000015461331b90919063ffffffff16565b8360000181905550505050565b600081600001805490509050919050565b60006132c983836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506135e0565b905092915050565b600061331383836040805190810160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250613645565b905092915050565b6000808284019050838110151515613368576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161335f9061422a565b60405180910390fd5b8091505092915050565b600083831115829015156133bc576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016133b391906141c8565b60405180910390fd5b5060008385039050809150509392505050565b600082600001828154811015156133e257fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b60008083600101600084815260200190815260200160002054905060008114151561350357600060018203905060006001866000018054905003905081811415156134b9576000866000018281548110151561347057fe5b9060005260206000200154905080876000018481548110151561348f57fe5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548015156134c857fe5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050613509565b60009150505b92915050565b600061351b83836133f5565b151561357957826000018290806001815401808255809150509060018203906000526020600020016000909192909190915055508260000180549050836001016000848152602001908152602001600020819055506001905061357e565b600090505b92915050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156135d457602002820191906000526020600020905b8154815260200190600101908083116135c0575b50505050509050919050565b600080831182901515613629576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161362091906141c8565b60405180910390fd5b506000838581151561363757fe5b049050809150509392505050565b6000808314158290151561368f576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161368691906141c8565b60405180910390fd5b50828481151561369b57fe5b0690509392505050565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b50805460008255906000526020600020908101906136f39190613925565b50565b50805460018160011615610100020316600290046000825580601f1061371c575061373b565b601f01602090049060005260206000209081019061373a919061394a565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061377f57805160ff19168380011785556137ad565b828001600101855582156137ad579182015b828111156137ac578251825591602001919060010190613791565b5b5090506137ba919061394a565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106137ff57803560ff191683800117855561382d565b8280016001018555821561382d579182015b8281111561382c578235825591602001919060010190613811565b5b50905061383a919061394a565b5090565b602060405190810160405280","61385261396f565b81525090565b828054828255906000526020600020908101928215613894579160200282015b82811115613893578251825591602001919060010190613878565b5b5090506138a19190613925565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106138e657805160ff1916838001178555613914565b82800160010185558215613914579182015b828111156139135782518255916020019190600101906138f8565b5b509050613921919061394a565b5090565b61394791905b8082111561394357600081600090555060010161392b565b5090565b90565b61396c91905b80821115613968576000816000905550600101613950565b5090565b90565b602060405190810160405280606081525090565b600061398f82356143f0565b905092915050565b60006139a38235614402565b905092915050565b60008083601f84011215156139bf57600080fd5b8235905067ffffffffffffffff8111156139d857600080fd5b6020830191508360018202830111156139f057600080fd5b9250929050565b600082601f8301121515613a0a57600080fd5b8135613a1d613a1882614312565b6142e5565b91508082526020830160208301858383011115613a3957600080fd5b613a44838284614416565b50505092915050565b600082601f8301121515613a6057600080fd5b8151613a73613a6e82614312565b6142e5565b91508082526020830160208301858383011115613a8f57600080fd5b613a9a838284614425565b50505092915050565b6000613aaf823561440c565b905092915050565b600060208284031215613ac957600080fd5b6000613ad784828501613983565b91505092915050565b600080600060408486031215613af557600080fd5b6000613b0386828701613983565b935050602084013567ffffffffffffffff811115613b2057600080fd5b613b2c868287016139ab565b92509250509250925092565b60008060008060608587031215613b4e57600080fd5b6000613b5c87828801613983565b945050602085013567ffffffffffffffff811115613b7957600080fd5b613b85878288016139ab565b93509350506040613b9887828801613aa3565b91505092959194509250565b60008060408385031215613bb757600080fd5b6000613bc585828601613983565b9250506020613bd685828601613aa3565b9150509250929050565b60008060008060608587031215613bf657600080fd5b6000613c0487828801613983565b9450506020613c1587828801613aa3565b935050604085013567ffffffffffffffff811115613c3257600080fd5b613c3e878288016139ab565b925092505092959194509250565b600080600060608486031215613c6157600080fd5b6000613c6f86828701613983565b9350506020613c8086828701613aa3565b9250506040613c9186828701613aa3565b9150509250925092565b600060208284031215613cad57600080fd5b6000613cbb84828501613997565b91505092915050565b60008060208385031215613cd757600080fd5b600083013567ffffffffffffffff811115613cf157600080fd5b613cfd858286016139ab565b92509250509250929050565b600060208284031215613d1b57600080fd5b600082013567ffffffffffffffff811115613d3557600080fd5b613d41848285016139f7565b91505092915050565b600060208284031215613d5c57600080fd5b600082015167ffffffffffffffff811115613d7657600080fd5b613d8284828501613a4d565b91505092915050565b60008060408385031215613d9e57600080fd5b6000613dac85828601613aa3565b9250506020613dbd85828601613aa3565b9150509250929050565b613dd08161439e565b82525050565b6000613de182614358565b808452602084019350613df38361433e565b60005b82811015613e2557613e09868351613dc7565b613e1282614384565b9150602086019550600181019050613df6565b50849250505092915050565b6000613e3c82614363565b808452602084019350613e4e8361434b565b60005b82811015613e8057613e64868351613e9b565b613e6d82614391565b9150602086019550600181019050613e51565b50849250505092915050565b613e95816143b0565b82525050565b613ea4816143bc565b82525050565b6000613eb582614379565b808452613ec9816020860160208601614425565b613ed281614458565b602085010191505092915050565b6000613eeb8261436e565b808452613eff816020860160208601614425565b613f0881614458565b602085010191505092915050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601d82527f53534d3a7573655370616365207370616365206e6f7420656e6f7567680000006020830152604082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000601d82527f6e6577206f776e657220697320746865207a65726f20616464726573730000006020830152604082019050919050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b6000601982527f53534d3a667265655370616365206f7574206f662075736564000000000000006020830152604082019050919050565b6140c6816143e6565b82525050565b60006020820190506140e16000830184613dc7565b92915050565b600060208201905081810360008301526141018184613dd6565b905092915050565b600060408201905081810360008301526141238185613dd6565b90506141326020830184613e8c565b9392505050565b600060208201905081810360008301526141538184613e31565b905092915050565b600060408201905081810360008301526141758185613e31565b90506141846020830184613e8c565b9392505050565b60006020820190506141a06000830184613e8c565b92915050565b600060208201905081810360008301526141c08184613ee0565b905092915050565b600060208201905081810360008301526141e28184613eaa565b905092915050565b6000602082019050818103600083015261420381613f16565b9050919050565b6000602082019050818103600083015261422381613f73565b9050919050565b6000602082019050818103600083015261424381613faa565b9050919050565b6000602082019050818103600083015261426381613fe1565b9050919050565b6000602082019050818103600083015261428381614018565b9050919050565b600060208201905081810360008301526142a38161404f565b9050919050565b600060208201905081810360008301526142c381614086565b9050919050565b60006020820190506142df60008301846140bd565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561430857600080fd5b8060405250919050565b600067ffffffffffffffff82111561432957600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b60006143a9826143c6565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006143fb826143c6565b9050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614443578082015181840152602081019050614428565b83811115614452576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058203eb8da9d669bac36fd3eabe6108532a511e3ca17dac20fec2dc86bb40892987d6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeCancelCanAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"isFileAdded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getCanAddFileNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getStorageUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"deleteNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeAddFile\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"isCanAddFile\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNodeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"fileExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"storageTotal\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"newNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getNodeCanAddFileCidHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getAllNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"nodeCanAddFile\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getStorageTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getCanAddFileNodeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getCidCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getNodeCanDeleteFileCidHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeCanDeleteFile\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getNodeCanDeleteFileCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeDeleteFile\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"freeStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"useStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getCidHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getCanDeleteFileNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"availableSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getNodeCanAddFileCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"isSizeConsistent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],","\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_NODECANCELCANADDFILE = "nodeCancelCanAddFile";

    public static final String FUNC_ISFILEADDED = "isFileAdded";

    public static final String FUNC_DELETEFILE = "deleteFile";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_GETCANADDFILENODEADDRESSES = "getCanAddFileNodeAddresses";

    public static final String FUNC_MUSTOWNER = "mustOwner";

    public static final String FUNC_GETSTORAGEUSED = "getStorageUsed";

    public static final String FUNC_DELETENODE = "deleteNode";

    public static final String FUNC_NODEADDFILE = "nodeAddFile";

    public static final String FUNC_ISCANADDFILE = "isCanAddFile";

    public static final String FUNC_GETNODECOUNT = "getNodeCount";

    public static final String FUNC_FILEEXIST = "fileExist";

    public static final String FUNC_NEWNODE = "newNode";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_ADDFILE = "addFile";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_GETNODECANADDFILECIDHASHES = "getNodeCanAddFileCidHashes";

    public static final String FUNC_GETALLNODEADDRESSES = "getAllNodeAddresses";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_NODECANADDFILE = "nodeCanAddFile";

    public static final String FUNC_GETSTORAGETOTAL = "getStorageTotal";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETEXT = "setExt";

    public static final String FUNC_SETSTORAGETOTAL = "setStorageTotal";

    public static final String FUNC_GETNODEADDRESSES = "getNodeAddresses";

    public static final String FUNC_GETCANADDFILENODECOUNT = "getCanAddFileNodeCount";

    public static final String FUNC_GETCIDCOUNT = "getCidCount";

    public static final String FUNC_MUSTMANAGER = "mustManager";

    public static final String FUNC_GETNODECANDELETEFILECIDHASHES = "getNodeCanDeleteFileCidHashes";

    public static final String FUNC_NODECANDELETEFILE = "nodeCanDeleteFile";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_GETEXT = "getExt";

    public static final String FUNC_GETNODECANDELETEFILECOUNT = "getNodeCanDeleteFileCount";

    public static final String FUNC_NODEDELETEFILE = "nodeDeleteFile";

    public static final String FUNC_FREESTORAGE = "freeStorage";

    public static final String FUNC_USESTORAGE = "useStorage";

    public static final String FUNC_GETCIDHASHES = "getCidHashes";

    public static final String FUNC_GETCANDELETEFILENODEADDRESSES = "getCanDeleteFileNodeAddresses";

    public static final String FUNC_AVAILABLESPACE = "availableSpace";

    public static final String FUNC_GETNODECANADDFILECOUNT = "getNodeCanAddFileCount";

    public static final String FUNC_ISSIZECONSISTENT = "isSizeConsistent";

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected NodeStorage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt nodeCancelCanAddFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODECANCELCANADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeCancelCanAddFile(String nodeAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODECANCELCANADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeCancelCanAddFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODECANCELCANADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getNodeCancelCanAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODECANCELCANADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Boolean isFileAdded(String nodeAddress, String cid) throws ContractException {
        final Function function = new Function(FUNC_ISFILEADDED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt deleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteFile(String nodeAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List getCanAddFileNodeAddresses(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETCANADDFILENODEADDRESSES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt mustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public BigInteger getStorageUsed(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGEUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt deleteNode(String nodeAddress) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteNode(String nodeAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteNode(String nodeAddress) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETENODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt nodeAddFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODEADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeAddFile(String nodeAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeAddFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODEADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getNodeAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getNodeAddFileOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_NODEADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Boolean isCanAddFile(String nodeAddress, String cid) throws ContractException {
        final Function function = new Function(FUNC_ISCANADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger getNodeCount() throws ContractException {
        final Function function = new Function(FUNC_GETNODECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean fileExist(String nodeAddress, String cid) throws ContractException {
        final Function function = new Function(FUNC_FILEEXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt newNode(String nodeAddress, BigInteger storageTotal, String ext) {
        final Function function = new Function(
                FUNC_NEWNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] newNode(String nodeAddress, BigInteger storageTotal, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewNode(String nodeAddress, BigInteger storageTotal, String ext) {
        final Function function = new Function(
                FUNC_NEWNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getNewNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWNODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt addFile(String nodeAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addFile(String nodeAddress, String cid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFile(String nodeAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Boolean exist(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List getNodeCanAddFileCidHashes(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETNODECANADDFILECIDHASHES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple2<List<String>, Boolean> getAllNodeAddresses(BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETALLNODEADDRESSES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt nodeCanAddFile(String nodeAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_NODECANADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeCanAddFile(String nodeAddress, String cid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODECANADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeCanAddFile(String nodeAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_NODECANADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getNodeCanAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODECANADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getNodeCanAddFileOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_NODECANADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getStorageTotal(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setExt(String nodeAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setExt(String nodeAddress, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetExt(String nodeAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setStorageTotal(String nodeAddress, BigInteger value) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorageTotal(String nodeAddress, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorageTotal(String nodeAddress, BigInteger value) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetStorageTotalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public List getNodeAddresses(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETNODEADDRESSES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getCanAddFileNodeCount(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETCANADDFILENODECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getCidCount(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETCIDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt mustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public List getNodeCanDeleteFileCidHashes(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETNODECANDELETEFILECIDHASHES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt nodeCanDeleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODECANDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeCanDeleteFile(String nodeAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODECANDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeCanDeleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODECANDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getNodeCanDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODECANDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getNodeCanDeleteFileOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_NODECANDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String getExt(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getNodeCanDeleteFileCount(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETNODECANDELETEFILECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt nodeDeleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODEDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeDeleteFile(String nodeAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeDeleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODEDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getNodeDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getNodeDeleteFileOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_NODEDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt freeStorage(String nodeAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] freeStorage(String nodeAddress, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeStorage(String nodeAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getFreeStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREESTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt useStorage(String nodeAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] useStorage(String nodeAddress, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUseStorage(String nodeAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUseStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USESTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<List<byte[]>, Boolean> getCidHashes(String nodeAddress, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETCIDHASHES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<byte[]>, Boolean>(
                convertToNative((List<Bytes32>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public List getCanDeleteFileNodeAddresses(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETCANDELETEFILENODEADDRESSES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger availableSpace(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_AVAILABLESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getNodeCanAddFileCount(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETNODECANADDFILECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean isSizeConsistent(String cid) throws ContractException {
        final Function function = new Function(FUNC_ISSIZECONSISTENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static NodeStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new NodeStorage(contractAddress, client, credential);
    }

    public static NodeStorage deploy(Client client, CryptoKeyPair credential, String _manager) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)));
        return deploy(NodeStorage.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
