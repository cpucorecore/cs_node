package com.ancun.chain_storage.cs_node.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Setting extends Contract {
    public static final String[] BINARY_ARRAY = {"","ffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e70610ab3565b610e786121e5565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f4d61784e6f64654578744c656e67746800000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610f0e57600080fd5b505af1158015610f22573d6000803e3d6000fd5b5050505050565b6000610f336121e5565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f4d617846696c654578744c656e677468000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610fbf57600080fd5b505afa158015610fd3573d6000803e3d6000fd5b505050506040513d6020811015610fe957600080fd5b8101908080519060200190929190505050905090565b60006110096121e5565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f496e6974537061636500000000000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561109557600080fd5b505afa1580156110a9573d6000803e3d6000fd5b505050506040513d60208110156110bf57600080fd5b8101908080519060200190929190505050905090565b6110dd610ab3565b6110e56121e5565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f4d61784e6f646543616e44656c65746546696c65436f756e7400000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561117b57600080fd5b505af115801561118f573d6000803e3d6000fd5b5050505050565b61119e610ab3565b6111a66121e5565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f4d61784e6f646543616e41646446696c65436f756e7400000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561123c57600080fd5b505af1158015611250573d6000803e3d6000fd5b5050505050565b60006112616121e5565b73ffffffffffffffffffffffffffffffffffffffff166321f8a7217f41646d696e4163636f756e7400000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156112ed57600080fd5b505afa158015611301573d6000803e3d6000fd5b505050506040513d602081101561131757600080fd5b8101908080519060200190929190505050905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156113b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806123966021913960400191505060405180910390fd5b60006113bf611257565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061142757508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b8061147f5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156114f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f533a6e6f2061757468000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6114fb6121e5565b73ffffffffffffffffffffffffffffffffffffffff1663ca446dd97f41646d696e4163636f756e740000000000000000000000000000000000000000846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156115bd57600080fd5b505af11580156115d1573d6000803e3d6000fd5b505050505050565b60006115e36121e5565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f4d61784e6f646543616e44656c65746546696c65436f756e74000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561166f57600080fd5b505afa158015611683573d6000803e3d6000fd5b505050506040513d602081101561169957600080fd5b8101908080519060200190929190505050905090565b60006116b96121e5565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f4d61784e6f64654578744c656e677468000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561174557600080fd5b505afa158015611759573d6000803e3d6000fd5b505050506040513d602081101561176f57600080fd5b8101908080519060200190929190505050905090565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561181b5780601f106117f05761010080835404028352916020019161181b565b820191906000526020600020905b8154815290600101906020018083116117fe57829003601f168201915b505050505081565b600061182d6121e5565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f4d61784e6f646543616e41646446696c65436f756e74000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156118b957600080fd5b505afa1580156118cd573d6000803e3d6000fd5b505050506040513d60208110156118e357600080fd5b8101908080519060200190929190505050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611927610ab3565b61192f6121e5565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f4d61784369644c656e6774680000000000000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156119c557600080fd5b505af11580156119d9573d6000803e3d6000fd5b5050505050565b6119e8610ab3565b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f85a70e3ed8a3924b3769cbe4e925987bbd40e8cea31487cbe13bee7b727310a460405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611ab0610ab3565b611ab86121e5565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f5265706c69636100000000000000000000000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611b4e57600080fd5b505af1158015611b62573d6000803e3d6000fd5b5050505050565b6000611b736121e5565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f4d61784369644c656e67746800000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611bff57600080fd5b505afa158015611c13573d6000803e3d6000fd5b505050506040513d6020811015611c2957600080fd5b8101908080519060200190929190505050905090565b611c47610ab3565b611c4f6121e5565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f4d6178557365724578744c656e67746800000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611ce557600080fd5b505af1158015611cf9573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e356040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e215780601f10611df657610100808354040283529160200191611e21565b820191906000526020600020905b815481529060010190602001808311611e0457829003601f168201915b50505050506122c09092919063ffffff","ff16565b901515611edd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611ea2578082015181840152602081019050611e87565b50505050905090810190601f168015611ecf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b611ee9610ab3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611f8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612056610ab3565b61205e6121e5565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f4d617846696c654578744c656e67746800000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156120f457600080fd5b505af1158015612108573d6000803e3d6000fd5b5050505050565b60006121196121e5565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f5265706c696361000000000000000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156121a557600080fd5b505afa1580156121b9573d6000803e3d6000fd5b505050506040513d60208110156121cf57600080fd5b8101908080519060200190929190505050905090565b60006121ef610c3b565b905090565b606082826040516020018083805190602001908083835b602083101515612230578051825260208201915060208101905060208303925061220b565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515612283578051825260208201915060208101905060208303925061225e565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60608383836040516020018084805190602001908083835b6020831015156122fd57805182526020820191506020810190506020830392506122d8565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515612350578051825260208201915060208101905060208303925061232b565b6001836020036101000a03801982511681845116808217855250505050505090500182815260200193505050506040516020818303038152906040529050939250505056fe533a63616e206e6f742073657420616464726573732830292061732061646d696ea165627a7a7230582023326552b4b9dc4d8eb3651caee2bf7b03ddf2d3515f3a129c359db330d3a8250029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000ce7f53657474696e6700000000000000000000000000000000000000000000000000620000d4640100000000026401000000009004565b620001be565b8060405160200180828152602001915050604051602081830303815290604052600090805190602001906200010b9291906200010f565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015257805160ff191683800117855562000183565b8280016001018555821562000183579182015b828111156200018257825182559160200191906001019062000165565b5b50905062000192919062000196565b5090565b620001bb91905b80821115620001b75760008160009055506001016200019d565b5090565b90565b6123e180620001ce6000396000f3fe6080604052600436106101b8576000357c0100000000000000000000000000000000000000000000000000000000900480636e1f75ad11610109578063b1eb3c2e116100a7578063dfde085011610081578063dfde08501461077d578063f6bf01d4146107a8578063facc6396146107e3578063fc82d8fa14610834576101b8565b8063b1eb3c2e146106ab578063c2293169146106c2578063d2e8cfe814610752576101b8565b80638d54e00b116100e35780638d54e00b146105a957806391726a99146105e45780639c89509b14610635578063ae13ff8114610670576101b8565b80636e1f75ad146104dc578063703848bc146105335780638b6ceb4f1461056e576101b8565b806329bbf638116101765780635089e2c8116101505780635089e2c8146103c8578063688ccaba1461041f57806368a0a419146104765780636cac8932146104b1576101b8565b806329bbf63814610321578063326b875e1461034c578063345640c71461039d576101b8565b8062c6a405146101bd578063036a8795146101e857806305282c70146102135780630ec991c2146102645780631bea7109146102bb5780631e0c7ae1146102f6575b600080fd5b3480156101c957600080fd5b506101d261086f565b6040518082815260200191505060405180910390f35b3480156101f457600080fd5b506101fd610945565b6040518082815260200191505060405180910390f35b34801561021f57600080fd5b506102626004803603602081101561023657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a1b565b005b34801561027057600080fd5b50610279610b88565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102c757600080fd5b506102f4600480360360208110156102de57600080fd5b8101908080359060200190929190505050610bae565b005b34801561030257600080fd5b5061030b610c6f565b6040518082815260200191505060405180910390f35b34801561032d57600080fd5b50610336610d45565b6040518082815260200191505060405180910390f35b34801561035857600080fd5b5061039b6004803603602081101561036f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e1b565b005b3480156103a957600080fd5b506103b26110c7565b6040518082815260200191505060405180910390f35b3480156103d457600080fd5b506103dd61119d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561042b57600080fd5b506104346111c3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048257600080fd5b506104af6004803603602081101561049957600080fd5b8101908080359060200190929190505050611299565b005b3480156104bd57600080fd5b506104c661135a565b6040518082815260200191505060405180910390f35b3480156104e857600080fd5b506104f1611430565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053f57600080fd5b5061056c6004803603602081101561055657600080fd5b8101908080359060200190929190505050611637565b005b34801561057a57600080fd5b506105a76004803603602081101561059157600080fd5b81019080803590602001909291905050506116f8565b005b3480156105b557600080fd5b506105e2600480360360208110156105cc57600080fd5b81019080803590602001909291905050506118d9565b005b3480156105f057600080fd5b506106336004803603602081101561060757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061199a565b005b34801561064157600080fd5b5061066e6004803603602081101561065857600080fd5b8101908080359060200190929190505050611b07565b005b34801561067c57600080fd5b506106a96004803603602081101561069357600080fd5b8101908080359060200190929190505050611bc8565b005b3480156106b757600080fd5b506106c0611c89565b005b3480156106ce57600080fd5b506106d7611d50565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107175780820151818401526020810190506106fc565b50505050905090810190601f1680156107445780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561075e57600080fd5b50610767611dee565b6040518082815260200191505060405180910390f35b34801561078957600080fd5b50610792611ec4565b6040518082815260200191505060405180910390f35b3480156107b457600080fd5b506107e1600480360360208110156107cb57600080fd5b8101908080359060200190929190505050611f9a565b005b3480156107ef57600080fd5b506108326004803603602081101561080657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061205b565b005b34801561084057600080fd5b5061086d6004803603602081101561085757600080fd5b8101908080359060200190929190505050612123565b005b60006108796121e4565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d61784e6f64654578744c656e677468000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561090557600080fd5b505afa158015610919573d6000803e3d6000fd5b505050506040513d602081101561092f57600080fd5b8101908080519060200190929190505050905090565b600061094f6121e4565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d61784e6f646543616e44656c65746546696c65436f756e74000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156109db57600080fd5b505afa1580156109ef573d6000803e3d6000fd5b505050506040513d6020811015610a0557600080fd5b8101908080519060200190929190505050905090565b610a23611c89565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ac8576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610bb6611c89565b610bbe6121e4565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f4d61784e6f646543616e41646446696c65436f756e7400000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610c5457600080fd5b505af1158015610c68573d6000803e3d6000fd5b5050505050565b6000610c796121e4565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f5265706c696361000000000000000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610d0557600080fd5b505afa158015610d19573d6000803e3d6000fd5b505050506040513d6020811015610d2f57600080fd5b8101908080519060200190929190505050905090565b6000610d4f6121e4565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d617846696c654578744c656e677468000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610ddb57600080fd5b505afa158015610def573d6000803e3d6000fd5b505050506040513d6020811015610e0557600080fd5b8101908080519060200190929190505050905090565b600073ffffffffffffffffffffffffffffffffffffff","ff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ea3576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806123956021913960400191505060405180910390fd5b6000610ead6111c3565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610f1557508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610f6d5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610fe1576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f533a6e6f2061757468000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b610fe96121e4565b73ffffffffffffffffffffffffffffffffffffffff166304558f0b7f41646d696e4163636f756e740000000000000000000000000000000000000000846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156110ab57600080fd5b505af11580156110bf573d6000803e3d6000fd5b505050505050565b60006110d16121e4565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d61784e6f646543616e41646446696c65436f756e74000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561115d57600080fd5b505afa158015611171573d6000803e3d6000fd5b505050506040513d602081101561118757600080fd5b8101908080519060200190929190505050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006111cd6121e4565b73ffffffffffffffffffffffffffffffffffffffff1663c0c22a627f41646d696e4163636f756e7400000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561125957600080fd5b505afa15801561126d573d6000803e3d6000fd5b505050506040513d602081101561128357600080fd5b8101908080519060200190929190505050905090565b6112a1611c89565b6112a96121e4565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f4d61784369644c656e6774680000000000000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561133f57600080fd5b505af1158015611353573d6000803e3d6000fd5b5050505050565b60006113646121e4565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d61784369644c656e67746800000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156113f057600080fd5b505afa158015611404573d6000803e3d6000fd5b505050506040513d602081101561141a57600080fd5b8101908080519060200190929190505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156115666040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115535780601f1061152857610100808354040283529160200191611553565b820191906000526020600020905b81548152906001019060200180831161153657829003601f168201915b50505050506121f390919063ffffffff16565b90151561160e576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156115d35780820151818401526020810190506115b8565b50505050905090810190601f1680156116005780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61163f611c89565b6116476121e4565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f4d617846696c654578744c656e67746800000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156116dd57600080fd5b505af11580156116f1573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461182d6040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118195780601f106117ee57610100808354040283529160200191611819565b820191906000526020600020905b8154815290600101906020018083116117fc57829003601f168201915b50505050506122bf9092919063ffffffff16565b9015156118d5576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561189a57808201518184015260208101905061187f565b50505050905090810190601f1680156118c75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b6118e1611c89565b6118e96121e4565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f4d6178557365724578744c656e67746800000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561197f57600080fd5b505af1158015611993573d6000803e3d6000fd5b5050505050565b6119a2611c89565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a47576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611b0f611c89565b611b176121e4565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f5265706c69636100000000000000000000000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611bad57600080fd5b505af1158015611bc1573d6000803e3d6000fd5b5050505050565b611bd0611c89565b611bd86121e4565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f4d61784e6f64654578744c656e67746800000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611c6e57600080fd5b505af1158015611c82573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d4e576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611de65780601f10611dbb57610100808354040283529160200191611de6565b820191906000526020600020905b815481529060010190602001808311611dc957829003601f168201915b505050505081565b6000611df86121e4565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d6178557365724578744c656e67746800000000000000000000000000","0000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611e8457600080fd5b505afa158015611e98573d6000803e3d6000fd5b505050506040513d6020811015611eae57600080fd5b8101908080519060200190929190505050905090565b6000611ece6121e4565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f496e6974537061636500000000000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611f5a57600080fd5b505afa158015611f6e573d6000803e3d6000fd5b505050506040513d6020811015611f8457600080fd5b8101908080519060200190929190505050905090565b611fa2611c89565b611faa6121e4565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f4d61784e6f646543616e44656c65746546696c65436f756e7400000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561204057600080fd5b505af1158015612054573d6000803e3d6000fd5b5050505050565b612063611c89565b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f52aff5fa0f806e34ba57f9c78d4798c2aee3581f8b3f300dd69a30570494843260405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61212b611c89565b6121336121e4565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f496e697453706163650000000000000000000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156121c957600080fd5b505af11580156121dd573d6000803e3d6000fd5b5050505050565b60006121ee611430565b905090565b606082826040516020018083805190602001908083835b60208310151561222f578051825260208201915060208101905060208303925061220a565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515612282578051825260208201915060208101905060208303925061225d565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60608383836040516020018084805190602001908083835b6020831015156122fc57805182526020820191506020810190506020830392506122d7565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b60208310151561234f578051825260208201915060208101905060208303925061232a565b6001836020036101000a03801982511681845116808217855250505050505090500182815260200193505050506040516020818303038152906040529050939250505056fe533a63616e206e6f742073657420616464726573732830292061732061646d696ea165627a7a72305820195845d4161bc35366f66b438b272a1163d819e24dd16c9ccdeb3151a3213fec0029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getMaxUserExtLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"space\",\"type\":\"uint256\"}],\"name\":\"setInitSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMaxNodeExtLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxFileExtLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxNodeCanDeleteFileCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxNodeCanAddFileCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxNodeCanDeleteFileCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxNodeExtLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxNodeCanAddFileCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMaxCidLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"replica\",\"type\":\"uint256\"}],\"name\":\"setReplica\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxCidLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMaxUserExtLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMaxFileExtLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReplica\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"field\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"previousValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SettingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETMAXUSEREXTLENGTH = "getMaxUserExtLength";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_MUSTOWNER = "mustOwner";

    public static final String FUNC_SETINITSPACE = "setInitSpace";

    public static final String FUNC_GETSTORAGE = "getStorage";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_SETMAXNODEEXTLENGTH = "setMaxNodeExtLength";

    public static final String FUNC_GETMAXFILEEXTLENGTH = "getMaxFileExtLength";

    public static final String FUNC_GETINITSPACE = "getInitSpace";

    public static final String FUNC_SETMAXNODECANDELETEFILECOUNT = "setMaxNodeCanDeleteFileCount";

    public static final String FUNC_SETMAXNODECANADDFILECOUNT = "setMaxNodeCanAddFileCount";

    public static final String FUNC_GETADMIN = "getAdmin";

    public static final String FUNC_SETADMIN = "setAdmin";

    public static final String FUNC_GETMAXNODECANDELETEFILECOUNT = "getMaxNodeCanDeleteFileCount";

    public static final String FUNC_GETMAXNODEEXTLENGTH = "getMaxNodeExtLength";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_GETMAXNODECANADDFILECOUNT = "getMaxNodeCanAddFileCount";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETMAXCIDLENGTH = "setMaxCidLength";

    public static final String FUNC_SETSTORAGE = "setStorage";

    public static final String FUNC_SETREPLICA = "setReplica";

    public static final String FUNC_GETMAXCIDLENGTH = "getMaxCidLength";

    public static final String FUNC_SETMAXUSEREXTLENGTH = "setMaxUserExtLength";

    public static final String FUNC_MUSTMANAGER = "mustManager";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_SETMAXFILEEXTLENGTH = "setMaxFileExtLength";

    public static final String FUNC_GETREPLICA = "getReplica";

    public static final Event SETTINGCHANGED_EVENT = new Event("SettingChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event STORAGECHANGED_EVENT = new Event("StorageChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected Setting(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger getMaxUserExtLength() throws ContractException {
        final Function function = new Function(FUNC_GETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt setInitSpace(BigInteger space) {
        final Function function = new Function(
                FUNC_SETINITSPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setInitSpace(BigInteger space, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETINITSPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetInitSpace(BigInteger space) {
        final Function function = new Function(
                FUNC_SETINITSPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetInitSpaceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETINITSPACE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String getStorage() throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setMaxNodeExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxNodeExtLength(BigInteger length, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxNodeExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxNodeExtLengthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getMaxFileExtLength() throws ContractException {
        final Function function = new Function(FUNC_GETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getInitSpace() throws ContractException {
        final Function function = new Function(FUNC_GETINITSPACE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setMaxNodeCanDeleteFileCount(BigInteger value) {
        final Function function = new Function(
                FUNC_SETMAXNODECANDELETEFILECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxNodeCanDeleteFileCount(BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXNODECANDELETEFILECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxNodeCanDeleteFileCount(BigInteger value) {
        final Function function = new Function(
                FUNC_SETMAXNODECANDELETEFILECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxNodeCanDeleteFileCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXNODECANDELETEFILECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt setMaxNodeCanAddFileCount(BigInteger value) {
        final Function function = new Function(
                FUNC_SETMAXNODECANADDFILECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxNodeCanAddFileCount(BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXNODECANADDFILECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxNodeCanAddFileCount(BigInteger value) {
        final Function function = new Function(
                FUNC_SETMAXNODECANADDFILECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxNodeCanAddFileCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXNODECANADDFILECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String getAdmin() throws ContractException {
        final Function function = new Function(FUNC_GETADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setAdmin(String adminAddress) {
        final Function function = new Function(
                FUNC_SETADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setAdmin(String adminAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAdmin(String adminAddress) {
        final Function function = new Function(
                FUNC_SETADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public BigInteger getMaxNodeCanDeleteFileCount() throws ContractException {
        final Function function = new Function(FUNC_GETMAXNODECANDELETEFILECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getMaxNodeExtLength() throws ContractException {
        final Function function = new Function(FUNC_GETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getMaxNodeCanAddFileCount() throws ContractException {
        final Function function = new Function(FUNC_GETMAXNODECANADDFILECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setMaxCidLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXCIDLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxCidLength(BigInteger length, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXCIDLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxCidLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXCIDLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxCidLengthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXCIDLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt setStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorage(String value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setReplica(BigInteger replica) {
        final Function function = new Function(
                FUNC_SETREPLICA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(replica)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setReplica(BigInteger replica, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETREPLICA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(replica)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetReplica(BigInteger replica) {
        final Function function = new Function(
                FUNC_SETREPLICA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(replica)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetReplicaInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETREPLICA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getMaxCidLength() throws ContractException {
        final Function function = new Function(FUNC_GETMAXCIDLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setMaxUserExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxUserExtLength(BigInteger length, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxUserExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxUserExtLengthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setMaxFileExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxFileExtLength(BigInteger length, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxFileExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxFileExtLengthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getReplica() throws ContractException {
        final Function function = new Function(FUNC_GETREPLICA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List<SettingChangedEventResponse> getSettingChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETTINGCHANGED_EVENT, transactionReceipt);
        ArrayList<SettingChangedEventResponse> responses = new ArrayList<SettingChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettingChangedEventResponse typedResponse = new SettingChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.field = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.previousValue = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newValue = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSettingChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SETTINGCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSettingChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SETTINGCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<StorageChangedEventResponse> getStorageChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STORAGECHANGED_EVENT, transactionReceipt);
        ArrayList<StorageChangedEventResponse> responses = new ArrayList<StorageChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StorageChangedEventResponse typedResponse = new StorageChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStorageChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStorageChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Setting load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Setting(contractAddress, client, credential);
    }

    public static Setting deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Setting.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class SettingChangedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] name;

        public byte[] field;

        public BigInteger previousValue;

        public BigInteger newValue;
    }

    public static class StorageChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
